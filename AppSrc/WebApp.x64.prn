Compiling Program: C:\Projects\LeafletTest\AppSrc\WebApp.src
Memory Available: 11386982400
1>Use AllWebAppClasses.pkg
Using pre-compiled package ALLWEBAPPCLASSES.PKG
Including file: AllWebAppClasses.x64.pkd    (C:\Program Files\DataFlex 20.1\Pkg\AllWebAppClasses.x64.pkd)
34491>Use cConnection.pkg
34491>Use cWebMenuItemLoadView.pkg
34491>
34491>Object oApplication is a cApplication
34493>    Object oConnection is a cConnection
34495>        Use LoginEncryption.pkg
Including file: LoginEncryption.pkg    (C:\Program Files\DataFlex 20.1\Pkg\LoginEncryption.pkg)
34495>>>Use cLoginEncryption.pkg
Including file: cLoginEncryption.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cLoginEncryption.pkg)
34495>>>>>Use cCryptographerEx.pkg
34495>>>>>
34495>>>>>Class cLoginEncryption is a cObject
34496>>>>>    
34496>>>>>    Procedure Construct_Object
34498>>>>>        Forward Send Construct_Object
34500>>>>>        // this must be set to a multi (40ish) character random key
34500>>>>>        Property String psEncryptPassword ""
34501>>>>>        
34501>>>>>        Object oDataCrypter is a cCryptographerEx
34503>>>>>            Set piHash to CALG_SHA_256
34504>>>>>            Set piCipher to CALG_AES_256
34505>>>>>            Set psProvider to "" //  Not providing a specific provider gives the default provider for the provider type
34506>>>>>            Set piProvider to PROV_RSA_AES
34507>>>>>        End_Object
34508>>>>>    End_Procedure
34509>>>>>    
34509>>>>>    // This can be augmented to return a password encryption key using any
34509>>>>>    // hidden mechanism desired.
34509>>>>>    Function GetEncryptionPassword Returns String
34511>>>>>        String sPassword
34511>>>>>        Get psEncryptPassword to sPassword
34512>>>>>        Function_Return sPassword
34513>>>>>    End_Function
34514>>>>>    
34514>>>>>    // Encrypts a string into an unreadable hash that can later be decrypted using DecryptKey.
34514>>>>>    //
34514>>>>>    // Params:
34514>>>>>    //   sPlainText     String to encrypt.
34514>>>>>    // Returns:
34514>>>>>    //   Base64 encoded hash.
34514>>>>>    Function EncryptPassword String sPlainText Returns String
34516>>>>>        String sEncryptPassword sBase64
34516>>>>>        UChar[] ucBinary
34517>>>>>        Pointer pBase64
34517>>>>>        Integer iVoid
34517>>>>>        
34517>>>>>        //  Encrypt Key
34517>>>>>        Get GetEncryptionPassword to sEncryptPassword
34518>>>>>        If (sEncryptPassword = "") Begin
34520>>>>>            Error DFERR_PROGRAM "No encryption password set"
34521>>>>>>
34521>>>>>        End
34521>>>>>>
34521>>>>>        
34521>>>>>        Get Encrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) (StringToUCharArray(sPlainText)) to ucBinary
34522>>>>>        
34522>>>>>        If (SizeOfArray(ucBinary) = 0) Begin
34524>>>>>            Error DFERR_PROGRAM "Unable to encrypt database login password"
34525>>>>>>
34525>>>>>            Function_Return ""
34526>>>>>        End
34526>>>>>>
34526>>>>>        
34526>>>>>        //  Encode binary hash to Base64
34526>>>>>        Move (Base64Encode(AddressOf(ucBinary), SizeOfArray(ucBinary))) to pBase64
34527>>>>>        Move (PointerToString(pBase64)) to sBase64
34528>>>>>        Move (Free(pBase64)) to iVoid
34529>>>>>        
34529>>>>>        Function_Return sBase64
34530>>>>>    End_Function
34531>>>>>    
34531>>>>>    
34531>>>>>    // Decrypts the unreadable hash generated by EncryptKey into a readable string.
34531>>>>>    //
34531>>>>>    // Params:
34531>>>>>    //   sBase64EncryptedPassword       Base64 Encrypted password
34531>>>>>    // Returns:
34531>>>>>    //   Readable plain text password
34531>>>>>    Function DecryptPassword String sBase64EncryptedPassword Returns String
34533>>>>>        String sEncryptPassword
34533>>>>>        UChar[] ucBinary ucPlain
34535>>>>>        Boolean bIsHex
34535>>>>>        Integer iLen iVoid
34535>>>>>        Pointer pBinary
34535>>>>>        
34535>>>>>        If (sBase64EncryptedPassword <> "") Begin
34537>>>>>            //  Decode from Base64
34537>>>>>            Move (Base64Decode(AddressOf(sBase64EncryptedPassword), &iLen)) to pBinary
34538>>>>>            
34538>>>>>            Move (ResizeArray(ucBinary, iLen, 0)) to ucBinary
34539>>>>>            Move (MemCopy(AddressOf(ucBinary), pBinary, iLen)) to iVoid
34540>>>>>                        
34540>>>>>            Move (Free(pBinary)) to iVoid
34541>>>>>            
34541>>>>>            //  Encrypted binary hash to string
34541>>>>>            Get GetEncryptionPassword to sEncryptPassword
34542>>>>>            Get Decrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) ucBinary to ucPlain
34543>>>>>        End
34543>>>>>>
34543>>>>>        
34543>>>>>        Function_Return (UCharArrayToString(ucPlain))
34544>>>>>    End_Function
34545>>>>>End_Class
34546>>>
34546>>>Object oLoginEncryption is a cLoginEncryption
34548>>>
34548>>>    // this must be created in your appsrc directory and must contain an encryption
34548>>>    // key that is set to psEncryptPassword. It will look something like this
34548>>>    //
34548>>>    // Set psEncryptPassword to "JchUAo7W@r.b{<Yk~OONi0nq=sMi[*Rn[A-`Vo)q"
34548>>>    //  
Including file: LoginEncryptionKey.inc    (C:\Projects\LeafletTest\AppSrc\LoginEncryptionKey.inc)
34548>>>>// Studio generated login encryption key
34548>>>>Set psEncryptPassword to "(zeWgswe@|Fpp$QO|<~VYv$44:([sNwe{MtV()?x"
34549>>>>
34549>>>    
34549>>>    // use this to register this object to your cConnection Object. This object
34549>>>    // must be created after the cConnection object
34549>>>    Move Self to ghoLoginEncryption
34550>>>End_Object
34551>    End_Object
34552>End_Object
34553>
34553>Object oWebApp is a cWebApp
34555>    Set psTheme to "DF_Material"
34556>    Set peApplicationStateMode to asmHistoryOnly
34557>    Set peLoginMode to lmLoginNone
34558>    Set psEncryptPassword to "Q7>}w~hmwPZ9#6g^wTyq[zAo>(k.Pvm#ndfiDO34"
34559>    
34559>    Use JsonConfig.pkg
Including file: JsonConfig.pkg    (C:\Projects\LeafletTest\AppSrc\JsonConfig.pkg)
34559>>>//==============================================================================
34559>>>// JsonConfig.pkg
34559>>>//
34559>>>// A singleton object which can read in a JSON configuration file, store it as a
34559>>>// DataFlex Json object, then supply values from it as required.
34559>>>// 
34559>>>// It has a global handle: ghoJsonConfig and then a terse global method for 
34559>>>// getting back the settings: (Config({setting-path})).
34559>>>//
34559>>>// Author:  Mike Peat
34559>>>// Date:    04/02/2020
34559>>>//
34559>>>// Usage:
34559>>>// 
34559>>>//   Load the config file:
34559>>>//     Get LoadConfig of ghoJsonConfig {optional-filename} {optional-path} to bOK
34559>>>//
34559>>>//   If not supplied the default filename is "config.json" and the path is the
34559>>>//   programs directory of your current workspace.  If you pass an empty
34559>>>//   filename then "config.json:" will be used.  There is no requirement for
34559>>>//   filename extension to be ".json" (although that _would_ seem sensible).
34559>>>//
34559>>>//   Reading a setting:
34559>>>//     Move (Config("foo.bar.baz[3].bob")) to nVar  // nVar is now 42
34559>>>//   Or:
34559>>>//     Get Config "foo.bar.baz[3].bob"     to sVar  // sVar is now "42"
34559>>>//
34559>>>//   Which would return the setting in the file from:
34559>>>//      {
34559>>>//          "foo" : {
34559>>>//              "bar" : {
34559>>>//                  "baz" : [
34559>>>//                      66,
34559>>>//                      {
34559>>>//                          "jim" : "jack"
34559>>>//                      },
34559>>>//                      false,
34559>>>//                      {
34559>>>//                          "bob" : 42     <--- This one!
34559>>>//                      },
34559>>>//                      {
34559>>>//                          "kim" : "possible"
34559>>>//                      }
34559>>>//                  ]
34559>>>//              }
34559>>>//          }
34559>>>//      }
34559>>>//
34559>>>// (If "Config" conflicts with anything in your environment you can simply
34559>>>//  change the name of the global function at the bottom of the package.)
34559>>>//
34559>>>// It should handle multi-dimentional arrays (i.e. foo[3][22][6]) and JSON of
34559>>>// arbitrary depth and length.
34559>>>//
34559>>>// Attempts to get settings which are not in the JSON will return empty strings.
34559>>>//
34559>>>// NOTE: JSON is case-sensitive, so your search-strings must exactly match the
34559>>>//       object names ("foo" is *not* "Foo") in the JSON file.
34559>>>//
34559>>>//==============================================================================
34559>>>    Use UI
34559>>>Use seq_chnl.pkg
34559>>>Use cJsonObject.pkg
34559>>>
34559>>>Global_Variable Handle ghoJsonConfig
34559>>>Register_Function ReadSetting String sDefs Handle hoDefs Returns String
34559>>>
34559>>>Define C_jsonConfigDefaultFile for "config.json"
34559>>>
34559>>>Object oJsonConfig is a cObject
34561>>>    Property Handle phoConfig
34563>>>    
34563>>>    Move Self to ghoJsonConfig
34564>>>    
34564>>>    Procedure UserMessage String sMsg String sTitle
34567>>>            Send ShowInfoBox sMsg sTitle
34568>>>    End_Procedure
34569>>>    
34569>>>    Function LoadConfig Returns Boolean
34572>>>        String  sFile sDir sPath sErr
34572>>>        Handle  hoConfig
34572>>>        Integer iArg iChn
34572>>>        UChar[] ucaConfig
34573>>>        Boolean bOK bExists
34573>>>        
34573>>>        // If phoConfig exists, destroy it
34573>>>        Get phoConfig to hoConfig
34574>>>        
34574>>>        If hoConfig Begin
34576>>>            Send Destroy of hoConfig
34577>>>            Set phoConfig to 0
34578>>>        End
34578>>>>
34578>>>        
34578>>>        // The default filename & path
34578>>>        Move C_jsonConfigDefaultFile to sFile
34579>>>        Move (psProgramPath(phoWorkspace(ghoApplication))) to sDir
34580>>>
34580>>>        // Deal with optional filename and path:
34580>>>        If (num_arguments > 0) Begin
34582>>>            Move 1                              to iArg
34583>>>            Move iArg&                          to sFile
34584>>>            If (sFile = "") ;  // use default                Move C_jsonConfigDefaultFile    to sFile
34587>>>            
34587>>>            If (num_arguments > 1) Begin
34589>>>                Move 2                          to iArg
34590>>>                Move iArg&                      to sDir
34591>>>            End
34591>>>>
34591>>>
34591>>>        End
34591>>>>
34591>>>        
34591>>>        // Read the config file
34591>>>        Move (sDir + SysConf(SYSCONF_DIR_SEPARATOR) + sFile) to sPath
34592>>>        
34592>>>        File_Exist sPath bExists
34593>>>        
34593>>>        If not bExists Begin
34595>>>            Send UserMessage ('Config file "' + sPath + '" does not exist') 'File Error'
34596>>>            Function_Return False
34597>>>        End
34597>>>>
34597>>>        
34597>>>        Get Seq_New_Channel   to iChn
34598>>>        Direct_Input     channel iChn sPath
34600>>>        Read_Block       channel iChn ucaConfig -1
34602>>>        Close_Input      channel iChn
34604>>>        Send Seq_Release_Channel iChn
34605>>>        
34605>>>        If (SizeOfArray(ucaConfig) < 7) Begin  // About the minimum: {"x":y}
34607>>>            Send UserMessage ('Configuration file "' + sPath * '" was missing or did not contain data') 'Config Error'
34608>>>            Function_Return False
34609>>>        End
34609>>>>
34609>>>        
34609>>>        // Turn that into JSON
34609>>>        Get Create (RefClass(cJsonObject))  to hoConfig
34610>>>        Get ParseUtf8 of hoConfig ucaConfig to bOK
34611>>>        
34611>>>        If not bOK Begin
34613>>>            Get psParseError of hoConfig to sErr
34614>>>            Send Destroy of hoConfig
34615>>>            Send UserMessage ('Configuration file "' + sPath + '" was not valid JSON -' * sErr) 'Config Error'
34616>>>            Function_Return False
34617>>>        End
34617>>>>
34617>>>        
34617>>>        Set phoConfig to hoConfig
34618>>>        Function_Return True
34619>>>    End_Function
34620>>>    
34620>>>    Function ReadArray String sDefs Handle hoDefs Returns String
34623>>>        Integer iLSBPos iRSBPos iIndex
34623>>>        Handle  hoMemb
34623>>>        String  sVal
34623>>>        
34623>>>        If ((not(hoDefs) or ;            (sDefs = ""))) ;            Function_Return ""
34626>>>        
34626>>>        Move (Pos("[", sDefs)) to iLSBPos
34627>>>        Move (Pos("]", sDefs)) to iRSBPos
34628>>>        
34628>>>        If (not(iLSBPos) or ;            not(iRSBPos) or ;            (iLSBPos > iRSBPos) or ;            (iLSBPos <> 1)) ;            Function_Return ""
34631>>>        
34631>>>        Move (Mid(sDefs, (iRSBPos - iLSBPos - 1), (iLSBPos + 1))) to iIndex
34632>>>        
34632>>>        If (MemberCount(hoDefs) <= iIndex) ;            Function_Return ""
34635>>>        
34635>>>        Get MemberByIndex of hoDefs iIndex to hoMemb
34636>>>
34636>>>        If (Length(Trim(sDefs)) = iRSBPos) Begin // It ends here
34638>>>            Get JsonValue of hoMemb to sVal
34639>>>            Send Destroy of hoMemb
34640>>>            Function_Return sVal
34641>>>        End
34641>>>>
34641>>>
34641>>>        Move (Right(sDefs, (Length(sDefs) - iRSBPos))) to sDefs
34642>>>        If (Left(sDefs, 1) = ".") ;            Move (Replace(".", sDefs, "")) to sDefs
34645>>>        Get ReadSetting sDefs hoMemb to sVal
34646>>>        Send Destroy of hoMemb
34647>>>        Function_Return sVal
34648>>>    End_Function
34649>>>    
34649>>>    Function ReadSetting String sDefs Handle hoDefs Returns String
34652>>>        Integer iLSBPos iDotPos iPos
34652>>>        String  sMemb sVal
34652>>>        Handle  hoMemb
34652>>>
34652>>>        If ((not(hoDefs) or ;            (sDefs = ""))) ;            Function_Return ""
34655>>>            
34655>>>        If (Left(sDefs, 1) = "[") ;            Function_Return (ReadArray(Self, sDefs, hoDefs))
34658>>>        
34658>>>        Move (Pos(".", sDefs))      to iDotPos
34659>>>        Move (Pos("[", sDefs))      to iLSBPos
34660>>>        
34660>>>        If (iLSBPos and iDotPos) ;            Move (iDotPos min iLSBPos)  to iPos
34663>>>        Else If (iDotPos) ;            Move iDotPos                to iPos
34667>>>        Else ;            Move iLSBPos                to iPos
34669>>>        
34669>>>        If not iPos Begin  // We are there!
34671>>>            
34671>>>            If (HasMember(hoDefs, sDefs)) ;                Function_Return (MemberValue(hoDefs, sDefs))
34674>>>            Else ;                Function_Return ""
34676>>>        
34676>>>        End
34676>>>>
34676>>>        
34676>>>        Move (Left(sDefs, (iPos - 1)))    to sMemb
34677>>>        
34677>>>        If (HasMember(hoDefs, sMemb)) Begin
34679>>>            Get Member of hoDefs sMemb to hoMemb
34680>>>            Move (Right(sDefs, (Length(sDefs) - iPos + 1))) to sDefs
34681>>>            If (Left(sDefs, 1) = ".") ;                Move (Replace(".", sDefs, "")) to sDefs
34684>>>            Get ReadSetting sDefs hoMemb to sVal
34685>>>            Send Destroy of hoMemb
34686>>>        End
34686>>>>
34686>>>        
34686>>>        Function_Return sVal
34687>>>    End_Function
34688>>>    
34688>>>    Function Setting String sDefs Returns String
34691>>>        Handle hoConfig
34691>>>        
34691>>>        Get phoConfig to hoConfig
34692>>>        
34692>>>        If not hoConfig ;            Function_Return ""
34695>>>        
34695>>>        Function_Return (ReadSetting(Self, sDefs, hoConfig))
34696>>>    End_Function
34697>>>    
34697>>>End_Object
34698>>>
34698>>>// I wanted a terse global function name here, but if "Config" conflicts with
34698>>>// anything in your environment you can simply change it to whatever you want.
34698>>>Function Config Global String sDefs Returns String
34700>>>    Function_Return (Setting(ghoJsonConfig, sDefs))
34701>>>End_Function
34702>
34702>//    Get LoadConfig of ghoJsonConfig to WindowIndex  // Loads setting from Programs/config.json (the default)
34702>    Get LoadConfig of ghoJsonConfig "leafletConfig.json" to WindowIndex  // Loads setting from Programs/leafletConfig.json
34703>
34703>    Object oCommandbar is a cWebCommandBar
34705>        Object oMenuBar is a cWebMenuBar
34707>            Object oFileMenu is a cWebMenuItem
34709>                Set psCaption to C_$File
34710>                
34710>                Object oClearMenuItem is a cWebMenuClear
34712>                End_Object
34713>                             
34713>                Object oClearAllMenuItem is a cWebMenuClearAll
34715>                End_Object  
34716>                
34716>                Object oPromptMenuItem is a cWebMenuPrompt
34718>                    Set pbBeginGroup to True
34719>                End_Object  
34720>                               
34720>                Object oFindMenuItem is a cWebMenuFind
34722>                End_Object  
34723>
34723>                Object oNextMenuItem is a cWebMenuFindNext
34725>                End_Object  
34726>
34726>                Object oPreviousMenuItem is a cWebMenuFindPrevious
34728>                End_Object  
34729>                
34729>                Object oLastMenuItem is a cWebMenuFindLast
34731>                End_Object                
34732>                                
34732>                Object oFirstMenuItem is a cWebMenuFindFirst
34734>                End_Object  
34735>                
34735>                Object oSaveMenuItem is a cWebMenuSave
34737>                    Set pbBeginGroup to True
34738>                End_Object  
34739>                
34739>                Object oDeleteMenuItem is a cWebMenuDelete
34741>                End_Object  
34742>                
34742>                Object oLoginMenuItem is a cWebMenuItem
34744>                    Set psCaption to C_$LogIn
34745>                    Set pbBeginGroup to True
34746>                    Set psCSSClass to "WebLoginMenuItem"
34747>
34747>                    Procedure OnClick
34750>                        Send RequestLogin to ghoWebSessionManager
34751>                    End_Procedure
34752>                    
34752>                    Procedure OnLoad
34755>                        Integer eLoginMode
34755>                        Handle hoLogin
34755>                        Get GetLoginView to hoLogin
34756>                        Get peLoginMode to eLoginMode
34757>                        WebSet pbRender to  (hoLogin and eLoginMode<>lmLoginNone)
34758>                    End_Procedure  // OnLoad
34759>                    
34759>                End_Object  
34760>
34760>                Object oLogoutMenuItem is a cWebMenuItem
34762>                    Set psCaption to C_$LogOut
34763>                    Set psCSSClass to "WebLogoutMenuItem"
34764>
34764>                    Procedure OnClick
34767>                        Send RequestLogOut of ghoWebSessionManager
34768>                    End_Procedure
34769>
34769>                    Procedure OnLoad
34772>                        Integer eLoginMode
34772>                        Handle hoLogin
34772>                        Get GetLoginView to hoLogin
34773>                        Get peLoginMode to eLoginMode
34774>                        WebSet pbRender to  (hoLogin and eLoginMode<>lmLoginNone)
34775>                    End_Procedure
34776>                End_Object  
34777>            End_Object  
34778>    
34778>            Object oViewMenu is a cWebMenuItem
34780>                Set psCaption to C_$View
34781>
34781>                Object oSimpleMapTest1 is a cWebMenuItemLoadView
34783>                    Set psCaption to "Simple Map Test"
34784>                    Set psLoadViewOnClick to "oSimpleMapTest"
34785>                End_Object
34786>
34786>                Object oTestGeoMappingItem1 is a cWebMenuItemLoadView
34788>                    Set psCaption to "GeoMapping Test"
34789>                    Set psLoadViewOnClick to "oTestGeoMap"
34790>                End_Object
34791>
34791>                Object oPathTraceExampleItem1 is a cWebMenuItemLoadView
34793>                    Set psCaption to "Path Trace Example"
34794>                    Set psLoadViewOnClick to "oPathTrace"
34795>                End_Object
34796>
34796>                Object oCountriesItem1 is a cWebMenuItemLoadView
34798>                    Set psCaption to "Countries"
34799>                    Set psLoadViewOnClick to "oCountries"
34800>                End_Object
34801>            End_Object  
34802>        End_Object  
34803>        
34803>    End_Object
34804>
34804>    Use SessionManager.wo
Including file: SessionManager.wo    (C:\Projects\LeafletTest\AppSrc\SessionManager.wo)
34804>>>Use cWebSessionManagerStandard.pkg
Including file: cWebSessionManagerStandard.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cWebSessionManagerStandard.pkg)
34804>>>>>Use cWebSessionManager.pkg
34804>>>>>Use cWebAppSessionDataDictionary.dd
Including file: cWebAppSessionDataDictionary.dd    (C:\Program Files\DataFlex 20.1\Pkg\cWebAppSessionDataDictionary.dd)
34804>>>>>>>Use DataDict.pkg
34804>>>>>>>
34804>>>>>>>Open WebAppSession
Including file: WebAppSession.fd    (C:\Projects\LeafletTest\DDSrc\WebAppSession.fd)
34806>>>>>>>Open WebAppUser
Including file: WebAppUser.fd    (C:\Projects\LeafletTest\DDSrc\WebAppUser.fd)
34808>>>>>>>
34808>>>>>>>Class cWebAppSessionDataDictionary is a DataDictionary
34809>>>>>>>    
34809>>>>>>>    Procedure Construct_Object
34811>>>>>>>        Forward Send Construct_Object
34813>>>>>>>        Set Main_File to WebAppSession.File_Number
34814>>>>>>>
34814>>>>>>>        Set Add_Server_File to WebAppUser.File_Number
34815>>>>>>>
34815>>>>>>>        Set ParentNullAllowed WebAppUser.File_Number to True
34816>>>>>>>
34816>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
34817>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
34818>>>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
34819>>>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
34820>>>>>>>
34820>>>>>>>        Set Field_Option Field WebAppSession.Active DD_RETAIN to True
34821>>>>>>>        Set Field_Checkbox_Values Field WebAppSession.Active to "Y" "N"
34822>>>>>>>        Set Field_Error Field WebAppSession.Active to 500 "Invalid WebAppSession Active State"
34823>>>>>>>
34823>>>>>>>    End_Procedure
34824>>>>>>>
34824>>>>>>>    Procedure Creating
34826>>>>>>>        DateTime dtCurrentDateTime
34826>>>>>>>        
34826>>>>>>>        Forward Send Creating
34828>>>>>>>        
34828>>>>>>>        //  Init usecounter
34828>>>>>>>        Move 0 to WebAppSession.UseCount
34829>>>>>>>        
34829>>>>>>>        //  Set the creation and access time to the current time
34829>>>>>>>        Move (CurrentDateTime()) to dtCurrentDateTime
34830>>>>>>>    
34830>>>>>>>        Get TimeToString dtCurrentDateTime to WebAppSession.CreateTime
34831>>>>>>>        Get TimeToString dtCurrentDateTime to WebAppSession.LastAccessTime
34832>>>>>>>        
34832>>>>>>>        Move dtCurrentDateTime to WebAppSession.CreateDate
34833>>>>>>>        Move dtCurrentDateTime to WebAppSession.LastAccessDate
34834>>>>>>>    End_Procedure
34835>>>>>>>    
34835>>>>>>>    
34835>>>>>>>    
34835>>>>>>>    //
34835>>>>>>>    //  Converts the given time to an string that can be saved in the database.
34835>>>>>>>    //
34835>>>>>>>    //  Params:
34835>>>>>>>    //      dtTime  Time to convert
34835>>>>>>>    //  Returns:
34835>>>>>>>    //      String with "HH:MM:SS" format
34835>>>>>>>    //
34835>>>>>>>    Function TimeToString DateTime dtTime Returns String
34837>>>>>>>        String sHours sMinutes sSeconds
34837>>>>>>>        
34837>>>>>>>        //  Extract parts
34837>>>>>>>        Move (String(DateGetHour(dtTime))) to sHours
34838>>>>>>>        Move (String(DateGetMinute(dtTime))) to sMinutes
34839>>>>>>>        Move (String(DateGetSecond(dtTime))) to sSeconds
34840>>>>>>>        
34840>>>>>>>        //  Fill out with 0
34840>>>>>>>        If (Length(sHours) = 1) ;            Move ("0" + sHours) to sHours
34843>>>>>>>        If (Length(sMinutes) = 1) ;            Move ("0" + sMinutes) to sMinutes
34846>>>>>>>        If (Length(sSeconds) = 1) ;            Move ("0" + sSeconds) to sSeconds
34849>>>>>>>        
34849>>>>>>>        Function_Return (sHours + ":" + sMinutes + ":" + sSeconds)
34850>>>>>>>    End_Function
34851>>>>>>>    
34851>>>>>>>    //
34851>>>>>>>    //  Sets the time of the datetime variable to the time in the string.
34851>>>>>>>    //
34851>>>>>>>    //  Params:
34851>>>>>>>    //      dtTime  Datetime variable to add time to
34851>>>>>>>    //      sTimeString String with time in the format "HH:MM:SS"
34851>>>>>>>    //  Returns:
34851>>>>>>>    //      dtDateTime with the loaded time
34851>>>>>>>    //
34851>>>>>>>    Function StringToTime DateTime dtTime String sTimeString Returns DateTime
34853>>>>>>>        String sHours sMinutes sSeconds
34853>>>>>>>        
34853>>>>>>>        //  Extract parts
34853>>>>>>>        Move (Mid(sTimeString, 2, 1)) to sHours
34854>>>>>>>        Move (Mid(sTimeString, 2, 4)) to sMinutes
34855>>>>>>>        Move (Mid(sTimeString, 2, 7)) to sSeconds
34856>>>>>>>        
34856>>>>>>>        //  Set to DateTime
34856>>>>>>>        Move (DateSetHour(dtTime, (Integer(sHours)))) to dtTime
34857>>>>>>>        Move (DateSetMinute(dtTime, (Integer(sMinutes)))) to dtTime
34858>>>>>>>        Move (DateSetSecond(dtTime, (Integer(sSeconds)))) to dtTime
34859>>>>>>>        
34859>>>>>>>        Function_Return dtTime
34860>>>>>>>    End_Function
34861>>>>>>>
34861>>>>>>>End_Class
34862>>>>>Use cWebAppUserDataDictionary.dd
Including file: cWebAppUserDataDictionary.dd    (C:\Program Files\DataFlex 20.1\Pkg\cWebAppUserDataDictionary.dd)
34862>>>>>>>Use DataDict.pkg
34862>>>>>>>Open WebAppUser
34864>>>>>>>Open WebAppSession
34866>>>>>>>
34866>>>>>>>Class cWebAppUserDataDictionary is a DataDictionary
34867>>>>>>>    
34867>>>>>>>    Procedure Construct_Object
34869>>>>>>>        Forward Send Construct_Object
34871>>>>>>>        Set Main_File to WebAppUser.File_Number
34872>>>>>>>
34872>>>>>>>        Set Add_Client_File to WebAppSession.File_Number
34873>>>>>>>
34873>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
34874>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
34875>>>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
34876>>>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
34877>>>>>>>    End_Procedure
34878>>>>>>>
34878>>>>>>>End_Class
34879>>>>>
34879>>>>>Class cWebSessionManagerStandard is a cWebSessionManager
34880>>>>>    
34880>>>>>    Procedure Construct_Object
34882>>>>>        Handle hoUserDD hoSessionDD
34882>>>>>        
34882>>>>>        Forward Send Construct_Object
34884>>>>>        
34884>>>>>        Property Handle phoUserDD 0      // Handle to the WebAppUser DDO
34885>>>>>        Property Handle phoSessionDD 0   // Handle to the WebAppSession DDO        
34886>>>>>        
34886>>>>>        Get Create (RefClass(cWebAppUserDataDictionary)) to hoUserDD
34887>>>>>        Get Create (RefClass(cWebAppSessionDataDictionary)) to hoSessionDD
34888>>>>>        Set DDO_Server of hoSessionDD to hoUserDD
34889>>>>>
34889>>>>>        Set phoUserDD to hoUserDD
34890>>>>>        Set phoSessionDD to hoSessionDD
34891>>>>>        Property Boolean pbCreatingNewSession False
34892>>>>>        Property String psLoginName
34893>>>>>        Property String psUserName ""
34894>>>>>        Property Integer piUserRights 0
34895>>>>>    End_Procedure
34896>>>>>    
34896>>>>>    Function CreateSession String sRemoteAddress Returns String
34898>>>>>        String sSessionKey
34898>>>>>        Integer iErr
34898>>>>>        Boolean bLogWebSession
34898>>>>>        Handle hoSessionDD       
34898>>>>>        Get phoSessionDD to hoSessionDD
34899>>>>>        
34899>>>>>        //  Get session key
34899>>>>>        Forward Get CreateSession sRemoteAddress to sSessionKey
34901>>>>>        
34901>>>>>        Get pbLogWebSession to bLogWebSession
34902>>>>>        If not bLogWebSession Begin
34904>>>>>            Function_Return sSessionKey        
34905>>>>>        End
34905>>>>>>
34905>>>>>
34905>>>>>        //  Store session
34905>>>>>        Send Clear of hoSessionDD
34906>>>>>        Set Field_Changed_Value of hoSessionDD Field WebAppSession.SessionKey to sSessionKey
34907>>>>>        Set Field_Changed_Value of hoSessionDD Field WebAppSession.RemoteAddress to sRemoteAddress
34908>>>>>        Set Field_Changed_Value of hoSessionDD Field WebAppSession.Active to "Y"
34909>>>>>        Get Request_Validate of hoSessionDD to iErr
34910>>>>>        If (iErr) Begin
34912>>>>>            // this should not happen. If it does its a programming error
34912>>>>>            Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
34913>>>>>>
34913>>>>>            Function_Return ""
34914>>>>>        End
34914>>>>>>
34914>>>>>        Send Request_Save of hoSessionDD
34915>>>>>       
34915>>>>>        Function_Return sSessionKey        
34916>>>>>    End_Function
34917>>>>>    
34917>>>>>    
34917>>>>>    Function ValidateSession String sSessionKey Boolean bOptLoadWebApp Returns Boolean
34919>>>>>        DateTime dtLastAccess dtCurrent
34919>>>>>        TimeSpan tsDiff
34919>>>>>        Integer iErr iSessionTimeout iSpanMinutes
34919>>>>>        Boolean bResult bCreatingNewSession
34919>>>>>        Boolean bLogWebSession bLoadWebApp
34919>>>>>        Integer eLoginMode
34919>>>>>        String sTime
34919>>>>>        Handle hoSessionDD hoUserDD       
34919>>>>>        
34919>>>>>        Move False to bLoadWebApp
34920>>>>>        If (num_arguments >= 2) Begin
34922>>>>>            Move bOptLoadWebApp to bLoadWebApp
34923>>>>>        End
34923>>>>>>
34923>>>>>        
34923>>>>>        Get phoSessionDD to hoSessionDD
34924>>>>>        Get phoUserDD to hoUserDD
34925>>>>>        
34925>>>>>        Get pbLogWebSession to bLogWebSession
34926>>>>>        Get peLoginMode to eLoginMode
34927>>>>>        
34927>>>>>        // for this object, you can only disable logging if login completely is disabled
34927>>>>>        If (not(bLogWebSession) and (eLoginMode<>lmLoginNone)) Begin
34929>>>>>            Error DFERR_PROGRAM C_$WebSessionLoggingMustBeEnabled
34930>>>>>>
34930>>>>>            Function_Return False
34931>>>>>        End
34931>>>>>>
34931>>>>>
34931>>>>>        //  Clear session properties
34931>>>>>        Set psSessionKey to ""
34932>>>>>        Send UpdateSessionProperties True
34933>>>>>        
34933>>>>>        If not bLogWebSession Begin
34935>>>>>            Forward Get ValidateSession sSessionKey to bResult
34937>>>>>            Function_Return bResult
34938>>>>>        End        
34938>>>>>>
34938>>>>>        
34938>>>>>        Move False to bResult
34939>>>>>        Get piSessionTimeout to iSessionTimeout 
34940>>>>>        
34940>>>>>        //  Check if session exists
34940>>>>>        Send Clear of hoSessionDD
34941>>>>>        Move sSessionKey to WebAppSession.SessionKey
34942>>>>>        Send Find of hoSessionDD EQ Index.1
34943>>>>>            
34943>>>>>        If (Found) Begin
34945>>>>>            //  Calculate timespan between now and last access time
34945>>>>>            Move (CurrentDateTime()) to dtCurrent
34946>>>>>            Move WebAppSession.LastAccessDate to dtLastAccess
34947>>>>>            Get StringToTime of hoSessionDD dtLastAccess WebAppSession.LastAccessTime to dtLastAccess
34948>>>>>            Move (dtCurrent - dtLastAccess) to tsDiff
34949>>>>>            Move (SpanTotalMinutes(tsDiff)) to iSpanMinutes
34950>>>>>            
34950>>>>>            //  Check if session didn't time out
34950>>>>>            If (IsDateValid(dtLastAccess) and (iSessionTimeout <= 0 or (iSpanMinutes < iSessionTimeout)) and WebAppSession.Active = "Y") Begin
34952>>>>>                Forward Get ValidateSession sSessionKey to bResult
34954>>>>>                   
34954>>>>>                If (bResult) Begin
34956>>>>>                    //  Update session record
34956>>>>>                    Get TimeToString of hoSessionDD dtCurrent to sTime 
34957>>>>>                    Set Field_Changed_Value of hoSessionDD Field WebAppSession.LastAccessDate to dtCurrent
34958>>>>>                    Set Field_Changed_Value of hoSessionDD Field WebAppSession.LastAccessTime to sTime
34959>>>>>                    Set Field_Changed_Value of hoSessionDD Field WebAppSession.UseCount to (WebAppSession.UseCount + 1)
34960>>>>>                    Get Request_Validate of hoSessionDD to iErr
34961>>>>>                    If (iErr) Begin
34963>>>>>                        // this should not happen. If it does its a programming error
34963>>>>>                        Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
34964>>>>>>
34964>>>>>                        Function_Return False
34965>>>>>                    End
34965>>>>>>
34965>>>>>                    Send Request_Save of hoSessionDD
34966>>>>>                    
34966>>>>>                    //  Update user properties
34966>>>>>                    Send UpdateSessionProperties False
34967>>>>>                End
34967>>>>>>
34967>>>>>            End
34967>>>>>>
34967>>>>>            Else Begin
34968>>>>>                // Test the Creating New Session Flag to protect against infinite recursion....
34968>>>>>                Get pbCreatingNewSession to bCreatingNewSession
34969>>>>>                
34969>>>>>                If (not(bCreatingNewSession)) Begin
34971>>>>>                    Set pbCreatingNewSession to True                    
34972>>>>>                    Get RecreateSession of ghoWebApp to bResult
34973>>>>>                    Set pbCreatingNewSession to False
34974>>>>>                    
34974>>>>>                    If (not(bLoadWebApp)) Begin
34976>>>>>                        Move False to bResult   //  We can only continue immediately if we were loading the webapp, other operations are not allowed!
34977>>>>>                        Error DFERR_WEBAPP_SESSION_TIMEOUT "Your application session has timed out or is inactive, please login again."
34978>>>>>>
34978>>>>>                        Send NavigateRefresh of ghoWebApp          // refresh the WebApp at the client (triggers a login)
34979>>>>>                    End
34979>>>>>>
34979>>>>>                End
34979>>>>>>
34979>>>>>            End
34979>>>>>>
34979>>>>>        End
34979>>>>>>
34979>>>>>        Else Begin
34980>>>>>            Error DFERR_WEBAPP_BAD_SESSION_KEY "Session key not known (reload page to recreate session)"
34981>>>>>>
34981>>>>>        End
34981>>>>>>
34981>>>>>        
34981>>>>>        Function_Return bResult
34982>>>>>    End_Function
34983>>>>>    
34983>>>>>    Function UserLogin String sLoginName String sPassword Returns Boolean
34985>>>>>        String sSessionKey sUserPassword
34985>>>>>        Handle hoSessionDD hoUserDD
34985>>>>>        Boolean bMatch  
34985>>>>>        
34985>>>>>        Get phoSessionDD to hoSessionDD
34986>>>>>        Get phoUserDD to hoUserDD
34987>>>>>        Integer iErr eLoginMode
34987>>>>>        
34987>>>>>        // Refind session record
34987>>>>>        Get psSessionKey to sSessionKey
34988>>>>>        Send Clear of hoSessionDD
34989>>>>>        Move sSessionKey to WebAppSession.SessionKey
34990>>>>>        Send Find of hoSessionDD EQ Index.1
34991>>>>>        
34991>>>>>        If (Found and WebAppSession.SessionKey = sSessionKey) Begin
34993>>>>>            Get peLoginMode to eLoginMode
34994>>>>>            
34994>>>>>            //  Find the user
34994>>>>>            Move sLoginName to WebAppUser.LoginName
34995>>>>>            Send Find of hoUserDD EQ Index.1
34996>>>>>            
34996>>>>>            // Check username and password
34996>>>>>            If (Found and (Lowercase(sLoginName) = Lowercase(Trim(WebAppUser.LoginName)))) Begin
34998>>>>>                Get Field_Current_Value of hoUserDD Field WebAppUser.Password to sUserPassword
34999>>>>>                Get ComparePasswords (Trim(sUserPassword)) (Trim(sPassword)) to bMatch
35000>>>>>                
35000>>>>>                If (bMatch) Begin
35002>>>>>                    // Store the login
35002>>>>>                    Set Field_Changed_Value of hoUserDD Field WebAppUser.LastLogin to (CurrentDateTime())
35003>>>>>                    Get Request_Validate of hoSessionDD to iErr
35004>>>>>                    If (iErr) Begin
35006>>>>>                        // this should not happen. If it does its a programming error
35006>>>>>                        Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
35007>>>>>>
35007>>>>>                        Function_Return False
35008>>>>>                    End
35008>>>>>>
35008>>>>>                    
35008>>>>>                    Send Request_Save of hoSessionDD
35009>>>>>                    
35009>>>>>                    // Update session properties
35009>>>>>                    Send UpdateSessionProperties False
35010>>>>>                    Send NotifyChangeRights
35011>>>>>                    Function_Return True
35012>>>>>                End
35012>>>>>>
35012>>>>>                Else Begin
35013>>>>>                    //  We should rely directly on this buffer elsewhere but just be sure
35013>>>>>                    Send Clear of hoUserDD
35014>>>>>                End
35014>>>>>>
35014>>>>>            End
35014>>>>>>
35014>>>>>        End
35014>>>>>>
35014>>>>>          
35014>>>>>        Function_Return False
35015>>>>>    End_Function
35016>>>>>    
35016>>>>>    Function IsLoggedIn Returns Boolean
35018>>>>>        String sLoginName
35018>>>>>        Boolean bLogWebSession bLoggedIn
35018>>>>>        
35018>>>>>        Get pbLogWebSession to bLogWebSession
35019>>>>>        If not bLogWebSession Begin
35021>>>>>            Forward Get IsLoggedIn to bLoggedIn
35023>>>>>            Function_Return bLoggedIn
35024>>>>>        End
35024>>>>>>
35024>>>>>        
35024>>>>>        Get psLoginName to sLoginName
35025>>>>>        
35025>>>>>        Function_Return (sLoginName <> "")
35026>>>>>    End_Function
35027>>>>>    
35027>>>>>    
35027>>>>>    //
35027>>>>>    // This procedure is called when validating a session and after logging in. Its purpose is to 
35027>>>>>    // update properties based on the session and user data. Augment this function to update 
35027>>>>>    // properties based on the session / user table. Note that WebAppUser and WebAppSession contain
35027>>>>>    // the right records when this procedure is called.
35027>>>>>    //
35027>>>>>    // Params:
35027>>>>>    //      bClear   True if the procedure is called before session validation to clear properties.
35027>>>>>    //
35027>>>>>    Procedure UpdateSessionProperties Boolean bClear
35029>>>>>        Handle hoUserDD
35029>>>>>        
35029>>>>>        Get phoUserDD to hoUserDD
35030>>>>>        
35030>>>>>        //  Update user properties
35030>>>>>        If (not(bClear) and HasRecord(hoUserDD)) Begin
35032>>>>>            Set psUsername to (Trim(WebAppUser.FullName))
35033>>>>>            Set psLoginName to (Trim(WebAppUser.LoginName))
35034>>>>>            Set piUserRights to WebAppUser.Rights
35035>>>>>            
35035>>>>>            Send OnSessionPropertiesSet 
35036>>>>>        End
35036>>>>>>
35036>>>>>        Else Begin
35037>>>>>            Set psUsername to ""
35038>>>>>            Set psLoginName to ""
35039>>>>>            Set piUserRights to 0
35040>>>>>            
35040>>>>>            Send OnSessionPropertiesClear
35041>>>>>        End
35041>>>>>>
35041>>>>>    End_Procedure
35042>>>>>    
35042>>>>>    //
35042>>>>>    // This function is called to perform the password comparison. It gets the entered password and
35042>>>>>    // the password value of the user table as parameters. The WebAppUser buffer will contain the
35042>>>>>    // right record. This function can be augmented to implement security features like storing the
35042>>>>>    // password as a hashed value.
35042>>>>>    //
35042>>>>>    // Params:
35042>>>>>    //      sUserPassword       Value of the WebAppUser.Password field.
35042>>>>>    //      sEnteredPassword    Value entered on the login screen during login.
35042>>>>>    //
35042>>>>>    Function ComparePasswords String sUserPassword String sEnteredPassword Returns Boolean
35044>>>>>        Function_Return (sUserPassword = sEnteredPassword)
35045>>>>>    End_Function
35046>>>>>    
35046>>>>>    Procedure OnSessionPropertiesSet
35048>>>>>        //  Empty event stub
35048>>>>>    End_Procedure
35049>>>>>    
35049>>>>>    Procedure OnSessionPropertiesClear
35051>>>>>        //  Empty event stub
35051>>>>>    End_Procedure
35052>>>>>    
35052>>>>>    Procedure EndSession
35054>>>>>        Integer iErr
35054>>>>>        Boolean bLogWebSession
35054>>>>>        Handle hoSessionDD       
35054>>>>>        
35054>>>>>        Get phoSessionDD to hoSessionDD
35055>>>>>        Get pbLogWebSession to bLogWebSession
35056>>>>>        If not bLogWebSession Begin
35058>>>>>            Forward Send EndSession
35060>>>>>            Procedure_Return
35061>>>>>        End
35061>>>>>>
35061>>>>>            
35061>>>>>        //  Check if session exists
35061>>>>>        Send Clear of hoSessionDD
35062>>>>>        Get psSessionKey to WebAppSession.SessionKey
35063>>>>>        
35063>>>>>        Send Find of hoSessionDD EQ Index.1
35064>>>>>        If (Found) Begin
35066>>>>>            Set Field_Changed_Value of hoSessionDD Field WebAppSession.Active to "N"
35067>>>>>            Get Request_Validate of hoSessionDD to iErr
35068>>>>>            If (iErr) Begin
35070>>>>>                // this should not happen. If it does its a programming error
35070>>>>>                Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
35071>>>>>>
35071>>>>>                Procedure_Return
35072>>>>>            End
35072>>>>>>
35072>>>>>            Send Request_Save of hoSessionDD
35073>>>>>        End
35073>>>>>>
35073>>>>>    End_Procedure
35074>>>>>
35074>>>>>End_Class
35075>>>>>
35075>>>
35075>>>Object oSessionManager is a cWebSessionManagerStandard
35077>>>End_Object
35078>>>
35078>>>
35078>    Use LoginDialog.wo
Including file: LoginDialog.wo    (C:\Projects\LeafletTest\AppSrc\LoginDialog.wo)
35078>>>Use cWebModalDialog.pkg
35078>>>Use cWebForm.pkg
35078>>>Use cWebButton.pkg
35078>>>Use cWebPanel.pkg
35078>>>Use cWebLabel.pkg
35078>>>
35078>>>Object oLoginDialog is a cWebModalDialog
35080>>>    Set piMinWidth to 370
35081>>>    Set piMinHeight to 220
35082>>>    Set psCaption to "Login"
35083>>>    Set pbShowClose to (peLoginMode(oWebApp) <> lmLoginRequired)
35084>>>    Set pbLoginModeEnforced to False
35085>>>    
35085>>>    Delegate Set phoLoginView to Self
35087>>>    
35087>>>    Object oTopPanel is a cWebPanel
35089>>>        Set peRegion to prTop
35090>>>        Set piHeight to 55       
35091>>>        
35091>>>        Object oDescription is a cWebLabel
35093>>>            Set psCaption to "Please enter your username and password to login."
35094>>>            Set peAlign to alignCenter
35095>>>        End_Object
35096>>>    End_Object
35097>>>    
35097>>>    Object oRightPanel is a cWebPanel
35099>>>        Set peRegion to prRight
35100>>>        Set piWidth to 20       
35101>>>    End_Object
35102>>>    
35102>>>    Object oMainPanel is a cWebPanel
35104>>>        Set peRegion to prCenter
35105>>>        
35105>>>        Object oLoginName is a cWebForm
35107>>>            Set psLabel to "Login Name:"
35108>>>            Set peLabelPosition to C_WebDefault
35109>>>            Set peLabelAlign to alignRight
35110>>>            Set piMaxLength to 20
35111>>>            Set psAutoComplete to "username"
35112>>>        End_Object
35113>>>        
35113>>>        Object oPassword is a cWebForm
35115>>>            Set psLabel to "Password:"
35116>>>            Set pbPassword to True
35117>>>            Set peLabelAlign to alignRight
35118>>>            Set piMaxLength to 20
35119>>>            Set psAutoComplete to "current-password"
35120>>>        End_Object   
35121>>>        
35121>>>        Object oWarning is a cWebLabel
35123>>>            Set pbVisible to False
35124>>>            Set psCaption to "Invalid loginname or password."
35125>>>            Set psCSSClass to "Warning"
35126>>>            Set peAlign to alignCenter
35127>>>        End_Object
35128>>>    End_Object
35129>>>    
35129>>>    Object oButtonPanel is a cWebPanel
35131>>>        Set peRegion to prBottom
35132>>>        Set piColumnCount to 3
35133>>>        Set piMinHeight to 40
35134>>>
35134>>>        Object oLoginButton is a cWebButton
35136>>>            Set pbShowLabel to False
35137>>>            Set piColumnIndex to 2
35138>>>            Set psCaption to "Login"
35139>>>            Set pbServerOnClick to True
35140>>>                        
35140>>>            Procedure OnClick
35143>>>                Send DoLogin
35144>>>            End_Procedure
35145>>>            
35145>>>        End_Object
35146>>>        
35146>>>    End_Object
35147>>>    
35147>>>    Procedure DoLogin
35150>>>        String sLoginName sPassword
35150>>>        Boolean bResult
35150>>>        Handle hoDefaultView
35150>>>        
35150>>>        WebGet psValue of oLoginName to sLoginName
35153>>>        WebGet psValue of oPassword to sPassword
35156>>>        
35156>>>        Get UserLogin of ghoWebSessionManager sLoginName sPassword to bResult
35157>>>        
35157>>>        If (bResult) Begin
35159>>>            Send Hide of oLoginDialog
35160>>>            Get GetDefaultView to hoDefaultView
35161>>>            If (hoDefaultView > 0) Begin
35163>>>                Send Show of hoDefaultView
35164>>>            End
35164>>>>
35164>>>            
35164>>>            // clear the login values. we don't want to return the login id & password as synchronized properties....
35164>>>            WebSet psValue of oLoginName to ""
35165>>>            WebSet psValue of oPassword  to ""
35166>>>            WebSet pbVisible of oWarning to False
35167>>>        End
35167>>>>
35167>>>        Else Begin
35168>>>            WebSet pbVisible of oWarning to True
35169>>>        End
35169>>>>
35169>>>    End_Procedure
35170>>>    
35170>>>    
35170>>>    Set pbServerOnSubmit to True
35171>>>    Procedure OnSubmit
35174>>>         Send DoLogin
35175>>>    End_Procedure
35176>>>End_Object
35177>    Use WebResourceManager.wo
Including file: WebResourceManager.wo    (C:\Projects\LeafletTest\AppSrc\WebResourceManager.wo)
35177>>>Use cWebResourceManager.pkg
35177>>>
35177>>>Object oWebResourceManager is a cWebResourceManager
35179>>>End_Object
35180>    Use SimpleMapTest.wo
Including file: SimpleMapTest.wo    (C:\Projects\LeafletTest\AppSrc\SimpleMapTest.wo)
35180>>>Use cWebView.pkg
35180>>>Use cWebPanel.pkg
35180>>>Use cWebForm.pkg 
35180>>>Use cWebButton.pkg
35180>>>Use cWebSpacer.pkg
35180>>>Use cLeafletMappingControl.pkg
Including file: cLeafletMappingControl.pkg    (C:\Projects\LeafletLibrary\cLeafletMappingControl.pkg)
35180>>>>>Use cWebBaseControl.pkg
35180>>>>>Use cJsonObject.pkg
35180>>>>>
35180>>>>>// Geoserver structs
35180>>>>>
35180>>>>>Struct stGsGeom
35180>>>>>    String type
35180>>>>>    Number[][][] coordinates
35180>>>>>End_Struct
35180>>>>>
35180>>>>>Struct stGsFeature
35180>>>>>    String   type
35180>>>>>    String   id
35180>>>>>    stGsGeom geometry
35180>>>>>    stGsGeom geometry
35180>>>>>End_Struct
35180>>>>>
35180>>>>>Struct stGeoserverResp
35180>>>>>    String type
35180>>>>>    Integer totalFeatures
35180>>>>>    stGsFeature[] features
35180>>>>>    stGsFeature[] features
35180>>>>>End_Struct
35180>>>>>
35180>>>>>Struct stMapInfo
35180>>>>>    Number   lat
35180>>>>>    Number   lng
35180>>>>>    Number   zoom
35180>>>>>End_Struct
35180>>>>>
35180>>>>>Struct stMarker
35180>>>>>    Number[] aPoint
35180>>>>>    String   sText
35180>>>>>    Boolean  bRise
35180>>>>>    String   sIcon
35180>>>>>End_Struct
35180>>>>>
35180>>>>>Struct stMarkers
35180>>>>>    stMarker[] atMarkers
35180>>>>>    stMarker[] atMarkers
35180>>>>>End_Struct
35180>>>>>
35180>>>>>Struct stPolygon
35180>>>>>    Number[][] aPoints
35180>>>>>    Boolean    bStroke
35180>>>>>    String     sLineColor
35180>>>>>    Integer    iLineWeight
35180>>>>>    Number     nLineOpacity
35180>>>>>    String     sFillColor
35180>>>>>    Number     nFillOpacity
35180>>>>>    Boolean    bFitMap
35180>>>>>End_Struct
35180>>>>>
35180>>>>>Struct stPolygons
35180>>>>>    stPolygon[] atPolygons
35180>>>>>    stPolygon[] atPolygons
35180>>>>>End_Struct
35180>>>>>
35180>>>>>Struct stPolyline
35180>>>>>    Number[][] aPoints
35180>>>>>    Boolean    bStroke
35180>>>>>    Boolean    bFitMap
35180>>>>>    String     sLineColor
35180>>>>>    Integer    iLineWeight
35180>>>>>    Number     nOpacity
35180>>>>>    String     sText
35180>>>>>End_Struct
35180>>>>>
35180>>>>>Struct stPolylines
35180>>>>>    stPolyline[] atPolylines
35180>>>>>    stPolyline[] atPolylines
35180>>>>>End_Struct
35180>>>>>
35180>>>>>Struct stCircle
35180>>>>>    Number[] aCenter
35180>>>>>    // ToDo:  More
35180>>>>>End_Struct
35180>>>>>
35180>>>>>Struct stCircles
35180>>>>>    stCircle[] atCircles
35180>>>>>    stCircle[] atCircles
35180>>>>>End_Struct
35180>>>>>
35180>>>>>Class cLeafletMappingControl is a cWebBaseControl
35181>>>>>    
35181>>>>>    Procedure Construct_Object
35183>>>>>        Forward Send Construct_Object
35185>>>>>        
35185>>>>>        Property String psMapDataAttrib 'Map data &copy; <a href="https://www.openstreetmap.org/" target="_blank">OpenStreetMap</a>'
35186>>>>>        Property String psImageryAttrib 'Imagery &copy; <a href="https://www.mapbox.com/" target="_blank">Mapbox</a>'
35187>>>>>        
35187>>>>>        // Client properties
35187>>>>>        Property Number     pnNorth
35190>>>>>        Property Number     pnEast
35193>>>>>        Property Integer    piInitialZoom
35196>>>>>        Property String     psTileLayer
35199>>>>>        Property Integer    piMaxZoom
35202>>>>>        Property String     psAccessToken
35205>>>>>        Property String     psLayerID
35208>>>>>        Property String     psTileSize "256"
35211>>>>>        Property String     psAttribution
35214>>>>>        Property Boolean    pbAttribution
35217>>>>>        Property Boolean    pbZoomControl
35220>>>>>        Property Boolean    pbServerOnMapClick
35223>>>>>        Property Boolean    pbServerOnMapDblClick
35226>>>>>        
35226>>>>>        // These  are for passing JSON string representations of the 
35226>>>>>        // matching server properties below to the client / server
35226>>>>>        Property String     psMarkers
35229>>>>>        Property String     psPolygons
35232>>>>>        Property String     psPolylines
35235>>>>>        Property String     psCurrentMapInfo
35238>>>>>        
35238>>>>>        // Server properties
35238>>>>>        Property stMarkers  ptMarkers
35241>>>>>        Property stPolygons ptPolygons
35244>>>>>        Property stPolylines ptPolylines
35247>>>>>        
35247>>>>>        // Note: you will need to get your own access token and set it here:
35247>>>>>        Set psAccessToken   to (Config("tokens.leafletAccessToken"))
35248>>>>>        Set psTileLayer     to "https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}"
35249>>>>>        Set psLayerID       to "mapbox/streets-v11"        
35250>>>>>        Set psAttribution   to 'Map data &copy; <a href="https://www.openstreetmap.org/" target="_blank">OpenStreetMap</a> contributors: Imagery &copy; <a href="https://www.mapbox.com/">Mapbox</a>'
35251>>>>>
35251>>>>>        Set pbShowLabel     to False  // No label by default
35252>>>>>        Set piMinHeight     to 100
35253>>>>>        Set piColumnSpan    to 0
35254>>>>>        Set pbFillHeight    to True
35255>>>>>        
35255>>>>>        Set psJSClass to "dfcc.leafletMappingControl"
35256>>>>>    End_Procedure
35257>>>>>
35257>>>>>    Procedure RenderMap
35259>>>>>        Send ClientAction "drawMap"
35260>>>>>    End_Procedure
35261>>>>>    
35261>>>>>    Procedure DefineMap Number nNorth Number nEast Integer iInitZoom Integer iMaxZoom
35263>>>>>        WebSet pnNorth          to nNorth
35264>>>>>        WebSet pnEast           to nEast
35265>>>>>        WebSet piInitialZoom    to iInitZoom
35266>>>>>        WebSet piMaxZoom        to iMaxZoom
35267>>>>>    End_Procedure
35268>>>>>    
35268>>>>>    // This is just a shothhand for DefineMap plus RenderMap in one step
35268>>>>>    Procedure DrawMap Number nNorth Number nEast Integer iInitZoom Integer iMaxZoom
35270>>>>>        Send DefineMap nNorth nEast iInitZoom iMaxZoom
35271>>>>>        Send RenderMap
35272>>>>>    End_Procedure
35273>>>>>    
35273>>>>>    Procedure FitBounds Number nMinN Number nMinE Number nMaxN Number nMaxE
35275>>>>>        String[] asParams
35276>>>>>        
35276>>>>>        Move nMinN to asParams[0]
35277>>>>>        Move nMinE to asParams[1]
35278>>>>>        Move nMaxN to asParams[2]
35279>>>>>        Move nMaxE to asParams[3]
35280>>>>>        
35280>>>>>        Send ClientAction "fitBounds" asParams
35281>>>>>    End_Procedure
35282>>>>>    
35282>>>>>    Function AddPolygon stPolygon tPolygon Returns Integer
35284>>>>>        stPolygons tPolys
35284>>>>>        stPolygons tPolys
35284>>>>>        Integer iIndex
35284>>>>>        Handle  hoJson
35284>>>>>        String  sJson
35284>>>>>        
35284>>>>>        WebGet ptPolygons to tPolys
35287>>>>>        Move (SizeOfArray(tPolys.atPolygons)) to iIndex
35288>>>>>        Move tPolygon to tPolys.atPolygons[iIndex]
35289>>>>>        WebSet ptPolygons to tPolys
35290>>>>>        
35290>>>>>        Get Create (RefClass(cJsonObject)) to hoJson
35291>>>>>        Send DataTypeToJson of hoJson tPolys
35292>>>>>        Get Stringify of hoJson to sJson
35293>>>>>        Send Destroy of hoJson
35294>>>>>        WebSet psPolygons to sJson
35295>>>>>        
35295>>>>>        Function_Return iIndex
35296>>>>>    End_Function
35297>>>>>    
35297>>>>>    Procedure RemovePolygon Integer iIndex
35299>>>>>        stPolygons tPolys
35299>>>>>        stPolygons tPolys
35299>>>>>        String[]   asParams
35300>>>>>        Handle     hoJson
35300>>>>>        String     sJson
35300>>>>>        
35300>>>>>        WebGet ptPolygons to tPolys
35303>>>>>        
35303>>>>>        If (iIndex < SizeOfArray(tPolys.atPolygons)) Begin
35305>>>>>            // Remove it from the server side property
35305>>>>>            Move (RemoveFromArray(tPolys.atPolygons, iIndex)) to tPolys.atPolygons
35306>>>>>            WebSet ptPolygons to tPolys
35307>>>>>            
35307>>>>>            // Serialize that and web set it
35307>>>>>            Get Create (RefClass(cJsonObject)) to hoJson
35308>>>>>            Send DataTypeToJson of hoJson tPolys
35309>>>>>            Get Stringify of hoJson to sJson
35310>>>>>            Send Destroy of hoJson
35311>>>>>            WebSet psPolygons to sJson
35312>>>>>            
35312>>>>>            // Remove it from the client
35312>>>>>            Move iIndex to asParams[0]
35313>>>>>            Send ClientAction "removePolygon" asParams
35314>>>>>        End
35314>>>>>>
35314>>>>>        
35314>>>>>    End_Procedure
35315>>>>>        
35315>>>>>    Procedure RenderPolygon Integer iIndex
35317>>>>>        String[] asParams
35318>>>>>        
35318>>>>>        Move iIndex to asParams[0]
35319>>>>>        Send ClientAction "drawPolygon" asParams
35320>>>>>    End_Procedure
35321>>>>>    
35321>>>>>    Procedure UnrenderPolygon Integer iIndex
35323>>>>>        String[] asParams
35324>>>>>        
35324>>>>>        Move iIndex to asParams[0]
35325>>>>>        Send ClientAction "undrawPolygon" asParams
35326>>>>>    End_Procedure
35327>>>>>    
35327>>>>>    // Shortcut combining AddPolygon and RenderPolygon
35327>>>>>    Procedure DrawPolygon stPolygon tPoly
35329>>>>>        Integer i
35329>>>>>        
35329>>>>>        Get AddPolygon tPoly to i
35330>>>>>        Send RenderPolygon i
35331>>>>>    End_Procedure
35332>>>>>    
35332>>>>>    Function DefinePolyline stPolyline tLine Returns Integer
35334>>>>>        stPolylines tLines
35334>>>>>        stPolylines tLines
35334>>>>>        Integer iIndex
35334>>>>>        Handle  hoJson
35334>>>>>        String  sJson
35334>>>>>        
35334>>>>>        WebGet ptPolylines to tLines
35337>>>>>        Move (SizeOfArray(tLines.atPolylines)) to iIndex
35338>>>>>        Move tLine to tLines.atPolylines[iIndex]
35339>>>>>        WebSet ptPolylines to tLines
35340>>>>>        
35340>>>>>        Get Create (RefClass(cJsonObject)) to hoJson
35341>>>>>        Send DataTypeToJson of hoJson tLines
35342>>>>>        Get Stringify of hoJson to sJson
35343>>>>>        Send Destroy of hoJson
35344>>>>>        WebSet psPolylines to sJson
35345>>>>>        
35345>>>>>        Function_Return iIndex
35346>>>>>    End_Function
35347>>>>>    
35347>>>>>    Procedure RenderPolyline Integer iIndex
35349>>>>>        String[] asParams
35350>>>>>        
35350>>>>>        Move iIndex to asParams[0]
35351>>>>>        Send ClientAction "drawPolyline" asParams
35352>>>>>    End_Procedure
35353>>>>>    
35353>>>>>    Procedure DrawPolyLine stPolyline tLine
35355>>>>>        Integer iIndex
35355>>>>>        
35355>>>>>        Get DefinePolyline tLine to iIndex
35356>>>>>        Send RenderPolyline iIndex
35357>>>>>    End_Procedure
35358>>>>>    
35358>>>>>    Function DefineMarker Number nNorth Number nEast String sText String sIcon Boolean bRise Returns Integer
35360>>>>>        stMarkers tMarkers
35360>>>>>        stMarkers tMarkers
35360>>>>>        Integer   iIndex
35360>>>>>        Handle    hoJson
35360>>>>>        String    sJson
35360>>>>>        
35360>>>>>        WebGet ptMarkers to tMarkers
35363>>>>>        Move (SizeOfArray(tMarkers.atMarkers)) to iIndex
35364>>>>>        Move nNorth to tMarkers.atMarkers[iIndex].aPoint[0]
35365>>>>>        Move nEast  to tMarkers.atMarkers[iIndex].aPoint[1]
35366>>>>>        Move sText  to tMarkers.atMarkers[iIndex].sText
35367>>>>>        Move bRise  to tMarkers.atMarkers[iIndex].bRise
35368>>>>>        Move sIcon  to tMarkers.atMarkers[iIndex].sIcon
35369>>>>>        WebSet ptMarkers to tMarkers
35370>>>>>        
35370>>>>>        Get Create (RefClass(cJsonObject)) to hoJson
35371>>>>>        Send DataTypeToJson of hoJson tMarkers
35372>>>>>        Get Stringify of hoJson to sJson
35373>>>>>        Send Destroy of hoJson
35374>>>>>        WebSet psMarkers to sJson
35375>>>>>        
35375>>>>>        Function_Return iIndex
35376>>>>>    End_Function
35377>>>>>    
35377>>>>>    Procedure ShowMarker Integer iIndex
35379>>>>>        String[] asParams
35380>>>>>        
35380>>>>>        Move iIndex to asParams[0]
35381>>>>>        Send ClientAction "drawMarker" asParams
35382>>>>>    End_Procedure
35383>>>>>    
35383>>>>>    Procedure HideMarker  Integer iIndex
35385>>>>>        String[] asParams
35386>>>>>        
35386>>>>>        Move iIndex to asParams[0]
35387>>>>>        Send ClientAction "hideMarker" asParams
35388>>>>>    End_Procedure
35389>>>>>    
35389>>>>>    // Shortcut combining DefineMarker and ShowMarker
35389>>>>>    Procedure DrawMarker Number nNorth Number nEast String sText String sIcon Boolean bRise
35391>>>>>        Integer iMrk
35391>>>>>        
35391>>>>>        Get DefineMarker nNorth nEast sText sIcon bRise to iMrk
35392>>>>>        Send ShowMarker iMrk
35393>>>>>    End_Procedure
35394>>>>>    
35394>>>>>    Procedure OnMapClick String sLat String sLng
35396>>>>>    End_Procedure
35397>>>>>    
35397>>>>>    Procedure OnMapDblClick String sLat String sLng
35399>>>>>    End_Procedure
35400>>>>>    
35400>>>>>    Function CurrentMapInfo Returns stMapInfo
35402>>>>>        String    sInfo
35402>>>>>        stMapInfo tInfo
35402>>>>>        stMapInfo tInfo
35402>>>>>        Handle    hoJson
35402>>>>>        Boolean   bOK
35402>>>>>        
35402>>>>>        WebGet psCurrentMapInfo to sInfo
35405>>>>>        
35405>>>>>        If (sInfo <> "") Begin
35407>>>>>            Get Create (RefClass(cJsonObject)) to hoJson
35408>>>>>            Set pbRequireAllMembers of hoJson to False
35409>>>>>            Get ParseString of hoJson sInfo to bOK
35410>>>>>            
35410>>>>>            If bOK ;                Get JsonToDataType of hoJson to tInfo
35413>>>>>            Send Destroy of hoJson
35414>>>>>        End
35414>>>>>>
35414>>>>>        
35414>>>>>        Function_Return tInfo
35415>>>>>    End_Function
35416>>>>>    
35416>>>>>    Procedure ChangeLayer String sLayer
35418>>>>>        String[] asParams
35419>>>>>        
35419>>>>>        Move sLayer to asParams[0]
35420>>>>>        Send ClientAction "changeLayer" asParams
35421>>>>>    End_Procedure
35422>>>>>    
35422>>>>>    Procedure ChangeResolution String sRes
35424>>>>>        WebSet psTileSize to sRes
35425>>>>>
35425>>>>>        Send ClientAction "changeResolution"
35426>>>>>    End_Procedure
35427>>>>>    
35427>>>>>    Procedure GetMyLocation
35429>>>>>        Send ClientAction "getCurrentLoc"
35430>>>>>    End_Procedure
35431>>>>>        
35431>>>>>    Procedure MyLocation Number nLat Number nLng 
35433>>>>>    End_Procedure
35434>>>>>    
35434>>>>>    Procedure GeoContributor String sName String sURL String sRole Boolean bCopy
35436>>>>>        String sMapAtt sImageAtt sAttribution
35436>>>>>        
35436>>>>>        Get psMapDataAttrib to sMapAtt
35437>>>>>        Get psImageryAttrib to sImageAtt
35438>>>>>        
35438>>>>>        Move (sMapAtt + ", contributors:" * ;              sRole * If(bCopy, "&copy; ", "") + ;              If((sURL = ""), "", ("<a href='" + sURL + "' target='_blank'>")) + ;              sName + If((sURL = ""), "", "</a>") * sImageAtt) to sAttribution
35439>>>>>        
35439>>>>>        WebSet psAttribution to sAttribution
35440>>>>>    End_Procedure
35441>>>>>    
35441>>>>>    Procedure End_Construct_Object
35443>>>>>        WebPublishProcedure OnMapClick
35444>>>>>        WebPublishProcedure OnMapDblClick
35445>>>>>        WebPublishProcedure MyLocation
35446>>>>>        Forward Send End_Construct_Object
35448>>>>>    End_Procedure
35449>>>>>    
35449>>>>>End_Class
35450>>>Use GeoConnectors\cLocationIQConnector.pkg
Including file: GeoConnectors\cLocationIQConnector.pkg    (C:\Projects\LeafletTest\AppSrc\GeoConnectors\cLocationIQConnector.pkg)
35450>>>>>Use cGeocodeConnector.pkg
Including file: cGeocodeConnector.pkg    (C:\Projects\LeafletTest\AppSrc\cGeocodeConnector.pkg)
35450>>>>>>>Use UI
35450>>>>>>>Use cHttpTransfer.pkg
Including file: cHttpTransfer.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cHttpTransfer.pkg)
35450>>>>>>>>>Use VDFBase.pkg
35450>>>>>>>>>
35450>>>>>>>>>Class cHttpTransfer is a cBaseHttpTransfer
35451>>>>>>>>>    
35451>>>>>>>>>    Function HttpPostRequest String sFilePath String sData Integer bDataIsFile Returns Integer
35453>>>>>>>>>        Integer bStat
35453>>>>>>>>>        Get HttpPostAddrRequest sFilePath (AddressOf(sData)) (SizeOfString(sData)) bDataIsfile to bStat
35454>>>>>>>>>        Function_Return bStat
35455>>>>>>>>>    End_Function
35456>>>>>>>>>    
35456>>>>>>>>>    // This event is not triggered from the runtime. It now uses UChar arrays as the data might 
35456>>>>>>>>>    // not be a valid string (it can any binary data). It still calls the orriginal event for 
35456>>>>>>>>>    // backwards compatibility.
35456>>>>>>>>>    Procedure OnDataReceivedUC String sContentType UChar[] ucData
35458>>>>>>>>>        Send OnDataReceived sContentType (UCharArrayToString(ucData))
35459>>>>>>>>>    End_Procedure
35460>>>>>>>>>    
35460>>>>>>>>>    // Only use this event if you know for sure the data is a string and make sure piBufferSize is
35460>>>>>>>>>    // smaller than the argument size.
35460>>>>>>>>>    Procedure OnDataReceived String sContentType String sData
35462>>>>>>>>>        
35462>>>>>>>>>    End_Procedure
35463>>>>>>>>>    
35463>>>>>>>>>    Function HttpPutRequest String sFilePath String sData Integer bDataIsFile Returns Integer
35465>>>>>>>>>        Integer bStat
35465>>>>>>>>>        Get HttpPutAddrRequest sFilePath (AddressOf(sData)) (SizeOfString(sData)) bDataIsfile to bStat
35466>>>>>>>>>        Function_Return bStat
35467>>>>>>>>>    End_Function
35468>>>>>>>>>    
35468>>>>>>>>>End_Class
35469>>>>>>>Use cJsonObject.pkg
35469>>>>>>>Use cJsonPath.pkg
Including file: cJsonPath.pkg    (C:\Projects\LeafletTest\AppSrc\cJsonPath.pkg)
35469>>>>>>>>>//==============================================================================
35469>>>>>>>>>// cJsonPath.pkg
35469>>>>>>>>>//
35469>>>>>>>>>// A class which will allow you to get either object handles or values from JSON
35469>>>>>>>>>// objects using their path.
35469>>>>>>>>>// 
35469>>>>>>>>>// Author:  Mike Peat
35469>>>>>>>>>// Date:    06/02/2020
35469>>>>>>>>>//
35469>>>>>>>>>// Usage:
35469>>>>>>>>>//   To return a JSON object at a path:
35469>>>>>>>>>//       Get JsonAtPath of oJsonPathObject hoSourceJsonObject, path to hoVar
35469>>>>>>>>>//     or:
35469>>>>>>>>>//       Move (JsonAtPath(oJsonPathObject, hoSourceJsonObject, path)) to hoVar
35469>>>>>>>>>//
35469>>>>>>>>>//   To return a value at a path:
35469>>>>>>>>>//       Get ValueAtPath of oJsonPathObject hoSourceJsonObject path to sVar
35469>>>>>>>>>//     or
35469>>>>>>>>>//       Move (ValueAtPath(oJsonPathObject, hoSourceJson, path)) to sVar
35469>>>>>>>>>//
35469>>>>>>>>>// Path notation:
35469>>>>>>>>>//
35469>>>>>>>>>//    A string with JSON object names, separated by dots "." and array indices
35469>>>>>>>>>//    in square brackets: "foo.bar.baz[0].bill[1][0]"
35469>>>>>>>>>//
35469>>>>>>>>>// Sample JSON:
35469>>>>>>>>>//
35469>>>>>>>>>//    {
35469>>>>>>>>>//      "foo": {
35469>>>>>>>>>//              "bar": {
35469>>>>>>>>>//                      "baz": [
35469>>>>>>>>>//                              66.123,
35469>>>>>>>>>//                              {
35469>>>>>>>>>//                                      "jim": "jack"
35469>>>>>>>>>//                              },
35469>>>>>>>>>//                              false,
35469>>>>>>>>>//                              {
35469>>>>>>>>>//                                      "bob": 42
35469>>>>>>>>>//                              },
35469>>>>>>>>>//                              {
35469>>>>>>>>>//                                      "kim": "possible"
35469>>>>>>>>>//                              },
35469>>>>>>>>>//                              [55, 1, 19, {
35469>>>>>>>>>//                                      "Mork": [
35469>>>>>>>>>//                                              [35, 67, 88, 100, [21, 33, 45, "Tim"]]
35469>>>>>>>>>//                                      ]
35469>>>>>>>>>//                              }]
35469>>>>>>>>>//                      ]
35469>>>>>>>>>//              }
35469>>>>>>>>>//      }
35469>>>>>>>>>//    }
35469>>>>>>>>>//
35469>>>>>>>>>// Examples:
35469>>>>>>>>>//    Move (JsonAtPath(oJPath, hoJson, "foo.bar.baz[5][3].Mork[0][4][3]")) to hoObj
35469>>>>>>>>>//
35469>>>>>>>>>//    Get ValueAtPath of oJPath hJson "foo.bar.baz[5][3].Mork[0][4][3]" to sVal
35469>>>>>>>>>//      (sVal = "Tim")
35469>>>>>>>>>//
35469>>>>>>>>>// In the first example the JSON object would be returned; if you then performed
35469>>>>>>>>>// Move (JsonValue(hoObj)) to sVal you would get the same result as the second
35469>>>>>>>>>// example - i.e. "Tim".
35469>>>>>>>>>//
35469>>>>>>>>>// NOTE: JSON is case-sensitive, so your path-strings must exactly match the
35469>>>>>>>>>//       object names ("foo" is *not* "Foo") in the JSON file.
35469>>>>>>>>>//
35469>>>>>>>>>// Licence (MIT):
35469>>>>>>>>>//
35469>>>>>>>>>// Copyright 2020, Mike Peat, Unicorn InterGlobal Ltd.
35469>>>>>>>>>//
35469>>>>>>>>>// Permission is hereby granted, free of charge, to any person obtaining a copy
35469>>>>>>>>>// of this software and associated documentation files (the "Software"), to deal
35469>>>>>>>>>// in the Software without restriction, including without limitation the rights
35469>>>>>>>>>// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
35469>>>>>>>>>// copies of the Software, and to permit persons to whom the Software is
35469>>>>>>>>>// furnished to do so, subject to the following conditions:
35469>>>>>>>>>//
35469>>>>>>>>>// The above copyright notice and this permission notice shall be included in
35469>>>>>>>>>// all copies or substantial portions of the Software.
35469>>>>>>>>>//
35469>>>>>>>>>// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
35469>>>>>>>>>// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
35469>>>>>>>>>// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
35469>>>>>>>>>// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
35469>>>>>>>>>// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
35469>>>>>>>>>// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
35469>>>>>>>>>// SOFTWARE.
35469>>>>>>>>>//
35469>>>>>>>>>//==============================================================================
35469>>>>>>>>>// Added CountAtPath function to return the count of elements in an array at the
35469>>>>>>>>>// passed path.
35469>>>>>>>>>//==============================================================================
35469>>>>>>>>>//
35469>>>>>>>>>
35469>>>>>>>>>Use UI
35469>>>>>>>>>Use cJsonObject.pkg
35469>>>>>>>>>
35469>>>>>>>>>Class cJsonPath is a cObject
35470>>>>>>>>>    
35470>>>>>>>>>    Function ArrayHandle Handle hoJson String sPath Returns Handle
35472>>>>>>>>>        Integer iLSBPos iRSBPos iIndex
35472>>>>>>>>>        Handle  hoMemb hoObj
35472>>>>>>>>>        
35472>>>>>>>>>        If not hoJson ;            Function_Return 0
35475>>>>>>>>>            
35475>>>>>>>>>        If (sPath = "") Begin
35477>>>>>>>>>            Send Destroy of hoJson
35478>>>>>>>>>            Function_Return 0
35479>>>>>>>>>        End
35479>>>>>>>>>>
35479>>>>>>>>>        
35479>>>>>>>>>        Move (Pos("[", sPath)) to iLSBPos
35480>>>>>>>>>        Move (Pos("]", sPath)) to iRSBPos
35481>>>>>>>>>        
35481>>>>>>>>>        If (not(iLSBPos) or ;            not(iRSBPos) or ;            (iLSBPos > iRSBPos) or ;            (iLSBPos <> 1)) Begin
35483>>>>>>>>>            Send Destroy of hoJson
35484>>>>>>>>>            Function_Return 0
35485>>>>>>>>>        End
35485>>>>>>>>>>
35485>>>>>>>>>        
35485>>>>>>>>>        Move (Mid(sPath, (iRSBPos - iLSBPos - 1), (iLSBPos + 1))) to iIndex
35486>>>>>>>>>        
35486>>>>>>>>>        If (MemberCount(hoJson) <= iIndex) Begin
35488>>>>>>>>>            Send Destroy of hoJson
35489>>>>>>>>>            Function_Return 0
35490>>>>>>>>>        End
35490>>>>>>>>>>
35490>>>>>>>>>        
35490>>>>>>>>>        Get MemberByIndex of hoJson iIndex to hoMemb
35491>>>>>>>>>
35491>>>>>>>>>        If (Length(Trim(sPath)) = iRSBPos) Begin // It ends here
35493>>>>>>>>>            Send Destroy of hoJson
35494>>>>>>>>>            Function_Return hoMemb
35495>>>>>>>>>        End
35495>>>>>>>>>>
35495>>>>>>>>>
35495>>>>>>>>>        Move (Right(sPath, (Length(sPath) - iRSBPos))) to sPath
35496>>>>>>>>>        If (Left(sPath, 1) = ".") ;            Move (Replace(".", sPath, "")) to sPath
35499>>>>>>>>>        Get ObjectHandle hoMemb sPath to hoObj
35500>>>>>>>>>        Send Destroy of hoJson
35501>>>>>>>>>        Function_Return hoObj
35502>>>>>>>>>    End_Function
35503>>>>>>>>>    
35503>>>>>>>>>    Function ObjectHandle Handle hoJson String sPath Returns Handle
35505>>>>>>>>>        Integer iLSBPos iDotPos iPos
35505>>>>>>>>>        String  sMemb
35505>>>>>>>>>        Handle  hoMemb hoObj
35505>>>>>>>>>
35505>>>>>>>>>        If not hoJson ;            Function_Return 0
35508>>>>>>>>>        
35508>>>>>>>>>        If (sPath = "") Begin
35510>>>>>>>>>            Send Destroy of hoJson
35511>>>>>>>>>            Function_Return 0
35512>>>>>>>>>        End
35512>>>>>>>>>>
35512>>>>>>>>>            
35512>>>>>>>>>        If (Left(sPath, 1) = "[") ;            Function_Return (ArrayHandle(Self, hoJson, sPath))
35515>>>>>>>>>        
35515>>>>>>>>>        Move (Pos(".", sPath))      to iDotPos
35516>>>>>>>>>        Move (Pos("[", sPath))      to iLSBPos
35517>>>>>>>>>        
35517>>>>>>>>>        If (iLSBPos and iDotPos) ;            Move (iDotPos min iLSBPos)  to iPos
35520>>>>>>>>>        Else If (iDotPos) ;            Move iDotPos                to iPos
35524>>>>>>>>>        Else ;            Move iLSBPos                to iPos
35526>>>>>>>>>        
35526>>>>>>>>>        If not iPos Begin  // We are there!
35528>>>>>>>>>            
35528>>>>>>>>>            If (HasMember(hoJson, sPath)) Begin
35530>>>>>>>>>                Get Member of hoJson sPath to hoMemb
35531>>>>>>>>>                Send Destroy of hoJson
35532>>>>>>>>>                Function_Return hoMemb
35533>>>>>>>>>            End
35533>>>>>>>>>>
35533>>>>>>>>>            Else Begin
35534>>>>>>>>>                Send Destroy of hoJson
35535>>>>>>>>>                Function_Return 0
35536>>>>>>>>>            End
35536>>>>>>>>>>
35536>>>>>>>>>        
35536>>>>>>>>>        End
35536>>>>>>>>>>
35536>>>>>>>>>        
35536>>>>>>>>>        Move (Left(sPath, (iPos - 1)))    to sMemb
35537>>>>>>>>>        
35537>>>>>>>>>        If (HasMember(hoJson, sMemb)) Begin
35539>>>>>>>>>            Get Member of hoJson sMemb to hoMemb
35540>>>>>>>>>            Send Destroy of hoJson
35541>>>>>>>>>            Move (Right(sPath, (Length(sPath) - iPos + 1))) to sPath
35542>>>>>>>>>            If (Left(sPath, 1) = ".") ;                Move (Replace(".", sPath, "")) to sPath
35545>>>>>>>>>            Get ObjectHandle hoMemb sPath to hoObj
35546>>>>>>>>>            Function_Return hoObj
35547>>>>>>>>>        End
35547>>>>>>>>>>
35547>>>>>>>>>        
35547>>>>>>>>>        Send Destroy of hoJson
35548>>>>>>>>>        Function_Return 0
35549>>>>>>>>>    End_Function
35550>>>>>>>>>    
35550>>>>>>>>>    Function JsonAtPath Handle hoJson String sPath Returns Handle
35552>>>>>>>>>        Handle  hoObj
35552>>>>>>>>>        UChar[] ucaJson
35553>>>>>>>>>        Boolean bOK
35553>>>>>>>>>        
35553>>>>>>>>>        If (not(hoJson) or (sPath = "")) ;            Function_Return 0
35556>>>>>>>>>        
35556>>>>>>>>>        // Do this to "copy" hoJson to hoObj, so hoJson does not get destroyed
35556>>>>>>>>>        // in the process
35556>>>>>>>>>        Get StringifyUtf8 of hoJson to ucaJson
35557>>>>>>>>>        Get CreateNamed (RefClass(cJsonObject)) "CopyJson" to hoObj
35558>>>>>>>>>        Get ParseUtf8 of hoObj ucaJson to bOK
35559>>>>>>>>>        Function_Return (ObjectHandle(Self, hoObj, sPath))
35560>>>>>>>>>    End_Function
35561>>>>>>>>>    
35561>>>>>>>>>    Function ValueAtPath Handle hoJson String sPath Returns String
35563>>>>>>>>>        Handle  hoObj
35563>>>>>>>>>        String  sVal
35563>>>>>>>>>        Integer iType
35563>>>>>>>>>        
35563>>>>>>>>>        Get JsonAtPath hoJson sPath to hoObj
35564>>>>>>>>>
35564>>>>>>>>>        If hoObj Begin
35566>>>>>>>>>            Get JsonType of hoObj to iType
35567>>>>>>>>>            
35567>>>>>>>>>            If ((iType <> jsonTypeObject) and ;                (iType <> jsonTypeArray) and ;                (iType <> jsonTypeNull)) ;                Move (JsonValue(hoObj)) to sVal
35570>>>>>>>>>            
35570>>>>>>>>>            Send Destroy of hoObj
35571>>>>>>>>>        End
35571>>>>>>>>>>
35571>>>>>>>>>        
35571>>>>>>>>>        Function_Return sVal
35572>>>>>>>>>    End_Function
35573>>>>>>>>>    
35573>>>>>>>>>    Function CountAtPath Handle hoJson String sPath Returns Integer
35575>>>>>>>>>        Integer iCount
35575>>>>>>>>>        
35575>>>>>>>>>        Get JsonAtPath hoJson sPath to hoJson
35576>>>>>>>>>        
35576>>>>>>>>>        If not hoJson ;            Function_Return 0
35579>>>>>>>>>        
35579>>>>>>>>>        If (JsonType(hoJson) = jsonTypeArray) ;            Get MemberCount of hoJson to iCount
35582>>>>>>>>>            
35582>>>>>>>>>        Send Destroy of hoJson
35583>>>>>>>>>        Function_Return iCount
35584>>>>>>>>>    End_Function
35585>>>>>>>>>
35585>>>>>>>>>End_Class
35586>>>>>>>Use cGeoHttpTransfer.pkg
Including file: cGeoHttpTransfer.pkg    (C:\Projects\LeafletTest\AppSrc\cGeoHttpTransfer.pkg)
35586>>>>>>>>>Use cHttpTransfer.pkg
35586>>>>>>>>>
35586>>>>>>>>>Class cGeoHttpTransfer is a cHttpTransfer
35587>>>>>>>>>    
35587>>>>>>>>>    Procedure Construct_Object
35589>>>>>>>>>        Forward Send Construct_Object
35591>>>>>>>>>        
35591>>>>>>>>>        Property UChar[] pucaData
35592>>>>>>>>>        Property String  psContentType
35593>>>>>>>>>        
35593>>>>>>>>>        // Make these the defaults, override in object if different
35593>>>>>>>>>        Set piRemotePort    to 443
35594>>>>>>>>>        Set peTransferFlags to ifSecure        
35595>>>>>>>>>    End_Procedure
35596>>>>>>>>>    
35596>>>>>>>>>    Procedure OnDataReceived String sContentType String sData
35598>>>>>>>>>        UChar[] ucaData
35599>>>>>>>>>        
35599>>>>>>>>>        Get pucaData to ucaData
35600>>>>>>>>>        Move (AppendArray(ucaData, StringToUCharArray(sData))) to ucaData
35601>>>>>>>>>        Set pucaData to ucaData
35602>>>>>>>>>    End_Procedure
35603>>>>>>>>>    
35603>>>>>>>>>    Procedure Reset
35605>>>>>>>>>        UChar[] empty
35606>>>>>>>>>        
35606>>>>>>>>>        Set psContentType   to ""
35607>>>>>>>>>        Set pucaData        to empty
35608>>>>>>>>>        Send ClearHeaders
35609>>>>>>>>>    End_Procedure
35610>>>>>>>>>        
35610>>>>>>>>>End_Class
35611>>>>>>>Use cGeocodeHost.pkg
Including file: cGeocodeHost.pkg    (C:\Projects\LeafletTest\AppSrc\cGeocodeHost.pkg)
35611>>>>>>>>>Use UI
35611>>>>>>>>>
35611>>>>>>>>>Class cGeocodeHost is a cObject
35612>>>>>>>>>    
35612>>>>>>>>>    Procedure Construct_Object
35614>>>>>>>>>        Forward Send Construct_Object
35616>>>>>>>>>        
35616>>>>>>>>>        Property String[] pasConnectorIDs
35617>>>>>>>>>        Property String[] pasConnectorNames
35618>>>>>>>>>        Property Handle[] pahConnectorObjects
35619>>>>>>>>>    End_Procedure
35620>>>>>>>>>    
35620>>>>>>>>>    Procedure RegisterGeocodeConnector Handle hoObject String sID String sName
35622>>>>>>>>>        String[] asIDs asNames
35624>>>>>>>>>        Handle[] ahObjs
35625>>>>>>>>>        Integer  iIdx
35625>>>>>>>>>        
35625>>>>>>>>>        Get pahConnectorObjects     to ahObjs
35626>>>>>>>>>        
35626>>>>>>>>>        Move (SearchArray(hoObject, ahObjs)) to iIdx
35627>>>>>>>>>        
35627>>>>>>>>>        If (iIdx = -1) Begin  // Not already registered
35629>>>>>>>>>            Move (SizeOfArray(ahObjs)) to iIdx
35630>>>>>>>>>            Get pasConnectorIDs     to asIDs
35631>>>>>>>>>            Get pasConnectorNames   to asNames
35632>>>>>>>>>            
35632>>>>>>>>>            Move hoObject           to ahObjs[iIdx]
35633>>>>>>>>>            Move sID                to asIDs[iIdx]
35634>>>>>>>>>            Move sName              to asNames[iIdx]
35635>>>>>>>>>            
35635>>>>>>>>>            Set pasConnectorIDs     to asIDs
35636>>>>>>>>>            Set pasConnectorNames   to asNames
35637>>>>>>>>>            Set pahConnectorObjects to ahObjs
35638>>>>>>>>>        End
35638>>>>>>>>>>
35638>>>>>>>>>        
35638>>>>>>>>>    End_Procedure
35639>>>>>>>>>    
35639>>>>>>>>>    Function ConnectorObjectFromID String sID Returns Handle
35641>>>>>>>>>        String[] asIDs
35642>>>>>>>>>        Handle[] ahObjs
35643>>>>>>>>>        Integer  iIdx
35643>>>>>>>>>        
35643>>>>>>>>>        Get pasConnectorIDs to asIDs
35644>>>>>>>>>        
35644>>>>>>>>>        Move (SearchArray(sID, asIDs)) to iIDx
35645>>>>>>>>>        
35645>>>>>>>>>        If (iIdx = -1) ;            Function_Return 0
35648>>>>>>>>>
35648>>>>>>>>>        Get pahConnectorObjects to ahObjs        
35649>>>>>>>>>        Function_Return ahObjs[iIdx]
35650>>>>>>>>>    End_Function
35651>>>>>>>>>
35651>>>>>>>>>End_Class
35652>>>>>>>
35652>>>>>>>Class cGeocodeConnector is a cObject
35653>>>>>>>    
35653>>>>>>>    Procedure Construct_Object
35655>>>>>>>        Forward Send Construct_Object
35657>>>>>>>
35657>>>>>>>        Property String     psName
35658>>>>>>>        Property String     psID
35659>>>>>>>        Property String     psHost
35660>>>>>>>        Property String     psPath
35661>>>>>>>        Property String     psKey
35662>>>>>>>        Property String     psError
35663>>>>>>>        Property Number     pnLat
35664>>>>>>>        Property Number     pnLng
35665>>>>>>>        Property String     psMarker
35666>>>>>>>        Property Integer    piZoom          12
35667>>>>>>>        Property Integer    piMaxZoom       22
35668>>>>>>>        Property String     psDisplayName
35669>>>>>>>        Property String     psWebSite
35670>>>>>>>        Property Boolean    pbFitMap True
35671>>>>>>>        
35671>>>>>>>        Property String     psQuery
35672>>>>>>>        
35672>>>>>>>        Object oHttp is a cGeoHttpTransfer
35674>>>>>>>            Set piRemotePort    to rpHttpSSL
35675>>>>>>>            Set peTransferFlags to ifSecure
35676>>>>>>>        End_Object
35677>>>>>>>        
35677>>>>>>>        Object oJPath is a cJsonPath
35679>>>>>>>        End_Object
35680>>>>>>>        
35680>>>>>>>    End_Procedure
35681>>>>>>>    
35681>>>>>>>    Function CallPath String sPath String sKey String sQuery Returns String
35683>>>>>>>        Function_Return (sPath + "?" + sKey + "&" + sQuery)
35684>>>>>>>    End_Function
35685>>>>>>>    
35685>>>>>>>    Function DoGeoQuery String sQuery Returns Handle
35687>>>>>>>        Boolean bOK
35687>>>>>>>        Integer iStat
35687>>>>>>>        Handle  hoResp
35687>>>>>>>        String  sCall
35687>>>>>>>        
35687>>>>>>>        Set psQuery to sQuery
35688>>>>>>>        
35688>>>>>>>        Send Reset of oHttp
35689>>>>>>>        Set pnLat to 100 // Invalid latitude
35690>>>>>>>        Set psError to ""
35691>>>>>>>        
35691>>>>>>>        Move (CallPath(Self, psPath(Self), psKey(Self), sQuery)) to sCall
35692>>>>>>>        
35692>>>>>>>        Get HTTPGetRequest of oHttp sCall to bOK
35693>>>>>>>        
35693>>>>>>>        If bOK Begin
35695>>>>>>>            Get ResponseStatusCode of oHttp to iStat
35696>>>>>>>            
35696>>>>>>>            If ((iStat >=200) and (iStat < 300)) Begin
35698>>>>>>>                Get Create (RefClass(cJsonObject)) to hoResp
35699>>>>>>>                Set peWhiteSpace of hoResp to jpWhitespace_Pretty
35700>>>>>>>                Set pbEscapeForwardSlash of hoResp to False
35701>>>>>>>                Get ParseUtf8 of hoResp (pucaData(oHttp(Self))) to bOK
35702>>>>>>>                
35702>>>>>>>                If bOK Begin
35704>>>>>>>                    Send ExtractData hoResp
35705>>>>>>>                    Function_Return hoResp
35706>>>>>>>                End
35706>>>>>>>>
35706>>>>>>>                Else Begin
35707>>>>>>>                    Set psError to ("JSON Error -" * psParseError(hoResp))
35708>>>>>>>                    Send Destroy of hoResp
35709>>>>>>>                End
35709>>>>>>>>
35709>>>>>>>                
35709>>>>>>>            End
35709>>>>>>>>
35709>>>>>>>            Else ;                Set psError to ("HTTP Status" * String(iStat))
35711>>>>>>>        End
35711>>>>>>>>
35711>>>>>>>        Else ;            Set psError to "HTTP request failed"
35713>>>>>>>        
35713>>>>>>>        Function_Return 0
35714>>>>>>>    End_Function
35715>>>>>>>    
35715>>>>>>>    Function FreeQuery String sQuery Returns Handle
35717>>>>>>>        Set psError to "Not implemented"
35718>>>>>>>        Function_Return 0
35719>>>>>>>    End_Function
35720>>>>>>>    
35720>>>>>>>    Function StructuredQuery String[] asParams Returns Handle
35722>>>>>>>        Set psError to "Not implemented"
35723>>>>>>>        Function_Return 0
35724>>>>>>>    End_Function
35725>>>>>>>    
35725>>>>>>>    Function PostcodeQuery String sCountry String sPostcode Returns Handle
35727>>>>>>>        Set psError to "Not implemented"
35728>>>>>>>        Function_Return 0
35729>>>>>>>    End_Function
35730>>>>>>>    
35730>>>>>>>    Procedure ExtractData Handle hoJson
35732>>>>>>>    End_Procedure
35733>>>>>>>    
35733>>>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
35735>>>>>>>        Send GeoContributor of hoMap (psName(Self)) (psWebSite(Self)) "GeoLocation" True
35736>>>>>>>        Send DrawMap of hoMap (pnLat(Self)) (pnLng(Self)) (piZoom(Self)) (piMaxZoom(Self))        
35737>>>>>>>    End_Procedure
35738>>>>>>>    
35738>>>>>>>    Procedure PlaceMarker Handle hoMap String sMarker
35740>>>>>>>        Number nLat nLng
35740>>>>>>>        
35740>>>>>>>        If not hoMap ;            Procedure_Return
35743>>>>>>>            
35743>>>>>>>        Get pnLat to nLat
35744>>>>>>>        Get pnLng to nLng
35745>>>>>>>        
35745>>>>>>>        If (nLat = 100) ;  // Invalid latitude            Procedure_Return
35748>>>>>>>        
35748>>>>>>>        Send DrawMarker of hoMap nLat nLng (psDisplayName(Self)) sMarker False
35749>>>>>>>    End_Procedure
35750>>>>>>>    
35750>>>>>>>    Procedure End_Construct_Object
35752>>>>>>>        Forward Send End_Construct_Object
35754>>>>>>>        
35754>>>>>>>        Set psRemoteHost of oHttp to (psHost(Self))
35755>>>>>>>
35755>>>>>>>        If (ObjectClass(Parent(Self)) = RefClass(cGeocodeHost)) ;            Delegate Send RegisterGeocodeConnector Self (psID(Self)) (psName(Self))
35759>>>>>>>    End_Procedure
35760>>>>>>>
35760>>>>>>>End_Class
35761>>>>>
35761>>>>>Class cLocationIQConnector is a cGeocodeConnector
35762>>>>>    
35762>>>>>    Procedure Construct_Object
35764>>>>>        Forward Send Construct_Object
35766>>>>>        
35766>>>>>        Set psHost      to "eu1.locationiq.com"
35767>>>>>        Set psPath      to "v1/search.php"
35768>>>>>        Set psKey       to (Config("tokens.locationIQKey"))
35769>>>>>        Set psName      to "Location IQ"
35770>>>>>        Set psID        to "LOCIQ"
35771>>>>>        Set psWebSite   to "https://locationiq.com/"
35772>>>>>        
35772>>>>>        Property Number[] panBoundingBox
35773>>>>>    End_Procedure
35774>>>>>    
35774>>>>>    Function FreeQuery String sQuery Returns Handle
35776>>>>>        Handle hoJson
35776>>>>>        
35776>>>>>        Move (Replaces(" ", sQuery, "%20")) to sQuery
35777>>>>>        Move ("q=" + sQuery)                to sQuery
35778>>>>>        Get DoGeoQuery sQuery               to hoJson
35779>>>>>        
35779>>>>>        Function_Return hoJson
35780>>>>>    End_Function
35781>>>>>    
35781>>>>>    Function StructuredQuery String[] asParams Returns Handle
35783>>>>>        String   sQuery
35783>>>>>        String[] asQuery
35784>>>>>        Handle   hoJson
35784>>>>>        
35784>>>>>        If (asParams[0] <> "") ;            Move ("country="    + asParams[0])              to asQuery[SizeOfArray(asQuery)]
35787>>>>>        If (asParams[1] <> "") ;            Move ("postalcode=" + asParams[1])              to asQuery[SizeOfArray(asQuery)]
35790>>>>>        If (asParams[2] <> "") ;            Move ("state="      + asParams[2])              to asQuery[SizeOfArray(asQuery)]
35793>>>>>        If (asParams[3] <> "") ;            Move ("county="     + asParams[3])              to asQuery[SizeOfArray(asQuery)]
35796>>>>>        If (asParams[4] <> "") ;            Move ("city="       + asParams[4])              to asQuery[SizeOfArray(asQuery)]
35799>>>>>        If (asParams[6] <> "") ;            Move (asParams[6] * asParams[5])                to asParams[5]
35802>>>>>        If (asParams[5] <> "") ;            Move ("street="     + asParams[5])              to asQuery[SizeOfArray(asQuery)]
35805>>>>>
35805>>>>>        Move (StrJoinFromArray(asQuery, "&"))   to sQuery
35806>>>>>        Move (Replaces(" ", sQuery, "%20"))     to sQuery
35807>>>>>        Get DoGeoQuery sQuery                   to hoJson
35808>>>>>        
35808>>>>>        Function_Return hoJson
35809>>>>>    End_Function
35810>>>>>    
35810>>>>>    Function PostcodeQuery String sCountry String sPostcode Returns Handle
35812>>>>>        String  sQuery
35812>>>>>        Handle  hoJson
35812>>>>>        
35812>>>>>        Move ("postalcode=" + sPostcode + "&countrycodes=" + sCountry)  to sQuery
35813>>>>>        Move (Replaces(" ", sQuery, "%20"))                             to sQuery
35814>>>>>        Get DoGeoQuery sQuery                                           to hoJson
35815>>>>>        
35815>>>>>        Function_Return hoJson
35816>>>>>    End_Function
35817>>>>>    
35817>>>>>    Function CallPath String sPath String sKey String sQuery Returns String
35819>>>>>        String sCallPath
35819>>>>>        
35819>>>>>        Forward Get CallPath sPath sKey sQuery to sCallPath
35821>>>>>        
35821>>>>>        Move (sCallPath + "&format=json") to sCallPath
35822>>>>>        Function_Return sCallPath
35823>>>>>    End_Function
35824>>>>>    
35824>>>>>    Procedure ExtractData Handle hoJson
35826>>>>>        Number nLat nLng
35826>>>>>        Handle hoBox
35826>>>>>        Number[] anBox
35827>>>>>        
35827>>>>>        Set pnLat to (ValueAtPath(oJPath(Self), hoJson, "[0].lat"))
35828>>>>>        Set pnLng to (ValueAtPath(oJPath(Self), hoJson, "[0].lon"))
35829>>>>>        
35829>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "[0].boundingbox[0]")) to anBox[0]
35830>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "[0].boundingbox[1]")) to anBox[1]
35831>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "[0].boundingbox[2]")) to anBox[2]
35832>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "[0].boundingbox[3]")) to anBox[3]
35833>>>>>        Set panBoundingBox to anBox
35834>>>>>
35834>>>>>        Set psDisplayName to (ValueAtPath(oJPath(Self), hoJson, "[0].display_name"))
35835>>>>>    End_Procedure
35836>>>>>    
35836>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
35838>>>>>        Number[]  anBox
35839>>>>>        stPolygon tBox
35839>>>>>        stPolygon tBox
35839>>>>>        String    sName
35839>>>>>        
35839>>>>>        If not hoMap ;            Procedure_Return
35842>>>>>        If (pnLat(Self) = 100) ;            Procedure_Return
35845>>>>>
35845>>>>>        Forward Send DrawMap hoJson hoMap
35847>>>>>
35847>>>>>        // ToDo: work out correct zoom from bounding box maybe?
35847>>>>>        Get panBoundingBox to anBox
35848>>>>>        
35848>>>>>        If (SizeOfArray(anBox) = 4) Begin
35850>>>>>            Move anBox[0]   to tBox.aPoints[0][0]
35851>>>>>            Move anBox[2]   to tBox.aPoints[0][1]
35852>>>>>            
35852>>>>>            Move anBox[1]   to tBox.aPoints[1][0]
35853>>>>>            Move anBox[2]   to tBox.aPoints[1][1]
35854>>>>>            
35854>>>>>            Move anBox[1]   to tBox.aPoints[2][0]
35855>>>>>            Move anBox[3]   to tBox.aPoints[2][1]
35856>>>>>            
35856>>>>>            Move anBox[0]   to tBox.aPoints[3][0]
35857>>>>>            Move anBox[3]   to tBox.aPoints[3][1]
35858>>>>>            
35858>>>>>            Move (Config("defaults.polygon.lineColor"))     to tBox.sLineColor
35859>>>>>            Move (Config("defaults.polygon.lineWeight"))    to tBox.iLineWeight
35860>>>>>            Move (Config("defaults.polygon.lineOpacity"))   to tBox.nLineOpacity
35861>>>>>            Move (Config("defaults.polygon.fillColor"))     to tBox.sFillColor
35862>>>>>            Move (Config("defaults.polygon.fillOpacity"))   to tBox.nFillOpacity
35863>>>>>            
35863>>>>>            Move True to tBox.bStroke
35864>>>>>            Move (pbFitMap(Self)) to tBox.bFitMap
35865>>>>>            
35865>>>>>            Send DrawPolygon of hoMap tBox
35866>>>>>        End
35866>>>>>>
35866>>>>>        
35866>>>>>    End_Procedure
35867>>>>>    
35867>>>>>End_Class
35868>>>
35868>>>Object oSimpleMapTest is a cWebView
35870>>>    Set psCaption to "Simple Map Test"
35871>>>    
35871>>>    Delegate Set phoDefaultView to Self
35873>>>
35873>>>    Object oLocIQ is a cLocationIQConnector
35875>>>        Set pbFitMap to False
35876>>>    End_Object
35877>>>
35877>>>    Object oWebMainPanel is a cWebPanel
35879>>>        Set piColumnCount to 12
35880>>>        
35880>>>        Object oLocation is a cWebForm
35882>>>            Set piColumnSpan to 11
35883>>>            Set psLabel to "Location:"
35884>>>            Set peLabelAlign to alignRight
35885>>>            Set piLabelOffset to 80
35886>>>            Set psValue to "CPH Conference, Tietgensgade 65, 1704 Copenhagen, Denmark"
35887>>>        End_Object
35888>>>
35888>>>        Object oSend is a cWebButton
35890>>>            Set piColumnSpan to 1
35891>>>            Set piColumnIndex to 11
35892>>>            Set psCaption to "Send"
35893>>>        
35893>>>            Procedure OnClick
35896>>>                String sLoc
35896>>>                Handle hoJson
35896>>>                
35896>>>                WebGet psValue of oLocation     to sLoc
35899>>>                Get FreeQuery of oLocIQ sLoc    to hoJson
35900>>>                
35900>>>                If hoJson Begin
35902>>>                    Send DrawMap of oLocIQ hoJson (oMap(Self))
35903>>>                    Send PlaceMarker of oLocIQ (oMap(Self)) ""
35904>>>                    Send Destroy of hoJson
35905>>>                End
35905>>>>
35905>>>                Else ;                    Send ShowInfoBox (psError(oLocIQ)) "Request Failed"
35907>>>                
35907>>>            End_Procedure
35908>>>            
35908>>>        End_Object
35909>>>
35909>>>        Object oWebSpacer1 is a cWebSpacer
35911>>>        End_Object
35912>>>        
35912>>>        Object oMap is a cLeafletMappingControl
35914>>>        End_Object
35915>>>        
35915>>>    End_Object 
35916>>>
35916>>>End_Object
35917>    Use TestGeoMap.wo
Including file: TestGeoMap.wo    (C:\Projects\LeafletTest\AppSrc\TestGeoMap.wo)
35917>>>Use cWebView.pkg
35917>>>Use cWebPanel.pkg
35917>>>Use cWebForm.pkg
35917>>>Use cWebCheckBox.pkg
35917>>>Use cWebCombo.pkg
35917>>>Use cWebSpacer.pkg
35917>>>Use cWebButton.pkg
35917>>>Use cWebHorizontalLine.pkg
35917>>>
35917>>>Use cLeafletMappingControl.pkg
35917>>>Use cGeocodeHost.pkg
35917>>>
35917>>>Use GeoConnectors\cLocationIQConnector.pkg
35917>>>Use GeoConnectors\cMapQuestOpenConnector.pkg
Including file: GeoConnectors\cMapQuestOpenConnector.pkg    (C:\Projects\LeafletTest\AppSrc\GeoConnectors\cMapQuestOpenConnector.pkg)
35917>>>>>Use cGeocodeConnector.pkg
35917>>>>>
35917>>>>>Class cMapQuestOpenConnector is a cGeocodeConnector
35918>>>>>    
35918>>>>>    Procedure Construct_Object
35920>>>>>        Forward Send Construct_Object
35922>>>>>
35922>>>>>        Set psHost      to "open.mapquestapi.com"
35923>>>>>        Set psPath      to "geocoding/v1/address"
35924>>>>>        Set psKey       to (Config("tokens.mapQuestOpenKey"))
35925>>>>>        Set psName      to "Open MapQuest"
35926>>>>>        Set psID        to "OMAPQ"
35927>>>>>        Set psWebSite   to "https://developer.mapquest.com/"
35928>>>>>        
35928>>>>>        Property Number[] panBoundingBox
35929>>>>>    End_Procedure
35930>>>>>    
35930>>>>>    Function FreeQuery String sQuery Returns Handle
35932>>>>>        Handle hoJson
35932>>>>>        
35932>>>>>        Move (Replaces(" ", sQuery, "%20")) to sQuery
35933>>>>>        Move ("location=" + sQuery)         to sQuery
35934>>>>>        Get DoGeoQuery sQuery               to hoJson
35935>>>>>        
35935>>>>>        Function_Return hoJson
35936>>>>>    End_Function
35937>>>>>    
35937>>>>>    Function StructuredQuery String[] asParams Returns Handle
35939>>>>>        String[] asQuery
35940>>>>>        String   sQuery
35940>>>>>        Handle   hoJson
35940>>>>>        Integer  i iMax
35940>>>>>        
35940>>>>>        Move (SizeOfArray(asParams) - 1) to iMax
35941>>>>>        
35941>>>>>        For i from 0 to iMax
35947>>>>>>
35947>>>>>            Move (Replaces(" ", asParams[i], "+")) to asParams[i]
35948>>>>>        Loop        
35949>>>>>>
35949>>>>>
35949>>>>>        If (asParams[0] <> "") ;            Move ("country=" + asParams[0])                 to asQuery[SizeOfArray(asQuery)]
35952>>>>>        If (asParams[1] <> "") ;            Move ("postalCode=" + asParams[1])              to asQuery[SizeOfArray(asQuery)]
35955>>>>>        If (asParams[2] <> "") ;            Move ("state=" + asParams[2])                   to asQuery[SizeOfArray(asQuery)]
35958>>>>>        If (asParams[3] <> "") ;            Move ("county=" + asParams[3])                  to asQuery[SizeOfArray(asQuery)]
35961>>>>>        If (asParams[4] <> "") ;            Move ("city=" + asParams[4])                    to asQuery[SizeOfArray(asQuery)]
35964>>>>>        If (asParams[6] <> "") ;            Move (asParams[6] * asParams[5])                to asParams[5]
35967>>>>>        If (asParams[5] <> "") ;            Move ("street=" + asParams[5])                  to asQuery[SizeOfArray(asQuery)]
35970>>>>>        
35970>>>>>        Move (StrJoinFromArray(asQuery, "&"))   to sQuery
35971>>>>>        Move (Replaces(" ", sQuery, "%20"))     to sQuery
35972>>>>>        Get DoGeoQuery sQuery to hoJson
35973>>>>>        
35973>>>>>        Function_Return hoJson
35974>>>>>    End_Function
35975>>>>>    
35975>>>>>    Function PostcodeQuery String sCountry String sPostcode Returns Handle
35977>>>>>        String sQuery
35977>>>>>        Handle hoJson
35977>>>>>        
35977>>>>>        Move ("postalCode=" + sPostcode + "&" + "country=" + sCountry) to sQuery
35978>>>>>        Move (Replaces(" ", sQuery, "%20")) to sQuery
35979>>>>>        Get DoGeoQuery sQuery to hoJson
35980>>>>>        
35980>>>>>        Function_Return hoJson
35981>>>>>    End_Function
35982>>>>>    
35982>>>>>    Procedure ExtractData Handle hoJson
35984>>>>>        Number nLat nLng
35984>>>>>        Handle hoBox
35984>>>>>        Number[] anBox
35985>>>>>        String sVal sAddr
35985>>>>>        
35985>>>>>        Set pnLat to (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].latLng.lat"))
35986>>>>>        Set pnLng to (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].latLng.lng"))
35987>>>>>        
35987>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].street")) to sVal            
35988>>>>>        If (sVal <> "") ;            Move (sAddr + If((Length(sAddr)), ", ", "") + sVal) to sAddr
35991>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].adminArea6")) to sVal
35992>>>>>        If (sVal <> "") ;            Move (sAddr + If((Length(sAddr)), ", ", "") + sVal) to sAddr
35995>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].adminArea5")) to sVal
35996>>>>>        If (sVal <> "") ;            Move (sAddr + If((Length(sAddr)), ", ", "") + sVal) to sAddr
35999>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].adminArea4")) to sVal
36000>>>>>        If (sVal <> "") ;            Move (sAddr + If((Length(sAddr)), ", ", "") + sVal) to sAddr
36003>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].adminArea3")) to sVal
36004>>>>>        If (sVal <> "") ;            Move (sAddr + If((Length(sAddr)), ", ", "") + sVal) to sAddr
36007>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].adminArea2")) to sVal
36008>>>>>        If (sVal <> "") ;            Move (sAddr + If((Length(sAddr)), ", ", "") + sVal) to sAddr
36011>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].postalCode")) to sVal
36012>>>>>        If (sVal <> "") ;            Move (sAddr + If((Length(sAddr)), ", ", "") + sVal) to sAddr
36015>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].adminArea1")) to sVal
36016>>>>>        If (sVal <> "") ;            Move (sAddr + If((Length(sAddr)), ", ", "") + sVal) to sAddr
36019>>>>>        
36019>>>>>        Set psDisplayName to sAddr
36020>>>>>    End_Procedure
36021>>>>>    
36021>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
36023>>>>>        Number[]  anBox
36024>>>>>        stPolygon tBox
36024>>>>>        stPolygon tBox
36024>>>>>        String    sName
36024>>>>>        
36024>>>>>        If not hoMap ;            Procedure_Return
36027>>>>>        If (pnLat(Self) = 100) ;            Procedure_Return
36030>>>>>        
36030>>>>>        Forward Send DrawMap hoJson hoMap
36032>>>>>
36032>>>>>        Send DrawMap of hoMap (pnLat(Self)) (pnLng(Self)) (piZoom(Self)) (piMaxZoom(Self))
36033>>>>>    End_Procedure
36034>>>>>
36034>>>>>End_Class
36035>>>Use GeoConnectors\cHereConnector.pkg
Including file: GeoConnectors\cHereConnector.pkg    (C:\Projects\LeafletTest\AppSrc\GeoConnectors\cHereConnector.pkg)
36035>>>>>Use cGeocodeConnector.pkg
36035>>>>>
36035>>>>>Class cHereConnector is a cGeocodeConnector
36036>>>>>    
36036>>>>>    Procedure Construct_Object
36038>>>>>        Forward Send Construct_Object
36040>>>>>        
36040>>>>>        Set psHost      to "geocoder.ls.hereapi.com"
36041>>>>>        Set psPath      to "6.2/geocode.json"
36042>>>>>        Set psKey       to (Config("tokens.hereKey"))
36043>>>>>        Set psName      to "Here Geocoding"
36044>>>>>        Set psID        to "HERE"
36045>>>>>        Set psWebSite   to "https://www.here.com/"
36046>>>>>        
36046>>>>>        Property Number[] panBoundingBox
36047>>>>>    End_Procedure
36048>>>>>    
36048>>>>>    Function FreeQuery String sQuery Returns Handle
36050>>>>>        Handle  hoJson
36050>>>>>        Boolean bOK
36050>>>>>        
36050>>>>>        Move (Replaces(" ", sQuery, "%20")) to sQuery
36051>>>>>        Move ("searchtext=" + sQuery)       to sQuery
36052>>>>>        Get DoGeoQuery sQuery               to hoJson
36053>>>>>        
36053>>>>>        Function_Return hoJson
36054>>>>>    End_Function
36055>>>>>    
36055>>>>>    Function StructuredQuery String[] asParams Returns Handle
36057>>>>>        String   sQuery
36057>>>>>        String[] asQuery
36058>>>>>        Handle   hoJson
36058>>>>>        
36058>>>>>        If (asParams[6] <> "") ;            Move ("housenumber=" + asParams[6]) to asQuery[SizeOfArray(asQuery)]
36061>>>>>        If (asParams[5] <> "") ;            Move ("street="      + asParams[5]) to asQuery[SizeOfArray(asQuery)]
36064>>>>>        If (asParams[4] <> "") ;            Move ("city="        + asParams[4]) to asQuery[SizeOfArray(asQuery)]
36067>>>>>        If (asParams[0] <> "") ;            Move ("country="     + asParams[0]) to asQuery[SizeOfArray(asQuery)]
36070>>>>>
36070>>>>>        Move (StrJoinFromArray(asQuery, "&"))   to sQuery
36071>>>>>        Move (Replaces(" ", sQuery, "%20"))     to sQuery
36072>>>>>        Get DoGeoQuery sQuery                   to hoJson
36073>>>>>        
36073>>>>>        Function_Return hoJson
36074>>>>>    End_Function
36075>>>>>    
36075>>>>>    Procedure ExtractData Handle hoJson
36077>>>>>        Number[] anBox
36078>>>>>        
36078>>>>>        Set pnLat to (ValueAtPath(oJPath(Self), hoJson, "Response.View[0].Result[0].Location.DisplayPosition.Latitude"))
36079>>>>>        Set pnLng to (ValueAtPath(oJPath(Self), hoJson, "Response.View[0].Result.[0]Location.DisplayPosition.Longitude"))
36080>>>>>        Set psDisplayName to (ValueAtPath(oJPath(Self), hoJson, "Response.View[0].Result[0].Location.Address.Label"))
36081>>>>>        
36081>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "Response.View[0].Result[0].Location.MapView.TopLeft.Latitude"))         to anBox[0]
36082>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "Response.View[0].Result[0].Location.MapView.TopLeft.Longitude"))        to anBox[1]
36083>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "Response.View[0].Result[0].Location.MapView.BottomRight.Latitude"))     to anBox[2]
36084>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "Response.View[0].Result[0].Location.MapView.BottomRight.Longitude"))    to anBox[3]
36085>>>>>        
36085>>>>>        Set panBoundingBox to anBox
36086>>>>>    End_Procedure
36087>>>>>    
36087>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
36089>>>>>        Number[]  anBox
36090>>>>>        stPolygon tBox
36090>>>>>        stPolygon tBox
36090>>>>>        String    sName
36090>>>>>        
36090>>>>>        If not hoMap ;            Procedure_Return
36093>>>>>        If (pnLat(Self) = 100) ;            Procedure_Return
36096>>>>>
36096>>>>>        // ToDo: work out correct zoom from bounding box maybe?
36096>>>>>        Forward Send DrawMap hoJson hoMap
36098>>>>>
36098>>>>>        Send DrawMap of hoMap (pnLat(Self)) (pnLng(Self)) (piZoom(Self)) (piMaxZoom(Self))
36099>>>>>        
36099>>>>>        Get panBoundingBox to anBox
36100>>>>>        
36100>>>>>        If (SizeOfArray(anBox) = 4) Begin
36102>>>>>            Move anBox[0]   to tBox.aPoints[0][0]
36103>>>>>            Move anBox[1]   to tBox.aPoints[0][1]
36104>>>>>            
36104>>>>>            Move anBox[2]   to tBox.aPoints[1][0]
36105>>>>>            Move anBox[1]   to tBox.aPoints[1][1]
36106>>>>>            
36106>>>>>            Move anBox[2]   to tBox.aPoints[2][0]
36107>>>>>            Move anBox[3]   to tBox.aPoints[2][1]
36108>>>>>            
36108>>>>>            Move anBox[0]   to tBox.aPoints[3][0]
36109>>>>>            Move anBox[3]   to tBox.aPoints[3][1]
36110>>>>>            
36110>>>>>            Move (Config("defaults.polygon.lineColor"))     to tBox.sLineColor
36111>>>>>            Move (Config("defaults.polygon.lineWeight"))    to tBox.iLineWeight
36112>>>>>            Move (Config("defaults.polygon.lineOpacity"))   to tBox.nLineOpacity
36113>>>>>            Move (Config("defaults.polygon.fillColor"))     to tBox.sFillColor
36114>>>>>            Move (Config("defaults.polygon.fillOpacity"))   to tBox.nFillOpacity
36115>>>>>            
36115>>>>>            Move True to tBox.bStroke
36116>>>>>            Move (pbFitMap(Self)) to tBox.bFitMap
36117>>>>>
36117>>>>>            Send DrawPolygon of hoMap tBox
36118>>>>>        End
36118>>>>>>
36118>>>>>        
36118>>>>>    End_Procedure
36119>>>>>    
36119>>>>>End_Class
36120>>>Use GeoConnectors\cPositionStackConnector.pkg
Including file: GeoConnectors\cPositionStackConnector.pkg    (C:\Projects\LeafletTest\AppSrc\GeoConnectors\cPositionStackConnector.pkg)
36120>>>>>Use cGeocodeConnector.pkg
36120>>>>>
36120>>>>>Class cPositionStackConnector is a cGeocodeConnector
36121>>>>>    
36121>>>>>    Procedure Construct_Object
36123>>>>>        Forward Send Construct_Object
36125>>>>>
36125>>>>>        Set psHost      to "api.positionstack.com"
36126>>>>>        Set psPath      to "v1/forward"
36127>>>>>        Set psKey       to (Config("tokens.positionStackKey"))
36128>>>>>        Set psName      to "Position Stack"
36129>>>>>        Set psID        to "POSSTK"
36130>>>>>        Set psWebSite   to "https://positionstack.com/"
36131>>>>>        
36131>>>>>        Property Number[] panBoundingBox
36132>>>>>        
36132>>>>>        // Position Stack free plan doesn't use HTTPS, so:
36132>>>>>        Set piRemotePort    of oHttp to rpHttp
36133>>>>>        Set peTransferFlags of oHttp to 0
36134>>>>>    End_Procedure
36135>>>>>    
36135>>>>>    Function FreeQuery String sQuery Returns Handle
36137>>>>>        Handle  hoJson
36137>>>>>        Boolean bOK
36137>>>>>        
36137>>>>>        Move (Replaces(" ", sQuery, "%20")) to sQuery
36138>>>>>        Move ("query=" + sQuery)            to sQuery
36139>>>>>        Get DoGeoQuery sQuery               to hoJson
36140>>>>>        
36140>>>>>        Function_Return hoJson
36141>>>>>    End_Function
36142>>>>>    
36142>>>>>    Function StructuredQuery String[] asParams Returns Handle
36144>>>>>        String[] asQuery
36145>>>>>        String   sQuery
36145>>>>>        Handle   hoJson
36145>>>>>        
36145>>>>>        If (asParams[6] <> "") ;            Move (asParams[6] * asParams[5])    to asParams[5]
36148>>>>>        If (asParams[5] <> "") ;                   Move asParams[5]                    to asQuery[SizeOfArray(asQuery)]
36151>>>>>        If (asParams[4] <> "") ;            Move asParams[4]                    to asQuery[SizeOfArray(asQuery)]
36154>>>>>        If (asParams[3] <> "") ;            Move asParams[3]                    to asQuery[SizeOfArray(asQuery)]
36157>>>>>        If (asParams[2] <> "") ;            Move asParams[2]                    to asQuery[SizeOfArray(asQuery)]
36160>>>>>        If (asParams[1] <> "") ;            Move asParams[1]                    to asQuery[SizeOfArray(asQuery)]
36163>>>>>        If (asParams[0] <> "") ;            Move asParams[0]                    to asQuery[SizeOfArray(asQuery)]
36166>>>>>        
36166>>>>>        Move (StrJoinFromArray(asQuery, ", "))  to sQuery
36167>>>>>        Move (Replaces(" ", sQuery, "%20"))     to sQuery
36168>>>>>        Get DoGeoQuery ("query=" + sQuery)      to hoJson
36169>>>>>        
36169>>>>>        Function_Return hoJson
36170>>>>>    End_Function
36171>>>>>    
36171>>>>>    Function PostcodeQuery String sCountry String sPostcode Returns Handle
36173>>>>>        String  sQuery
36173>>>>>        Handle  hoJson
36173>>>>>        
36173>>>>>        Move ("query=" + sPostcode + ", " + sCountry)   to sQuery
36174>>>>>        Move (Replaces(" ", sQuery, "%20"))     to sQuery
36175>>>>>        Get DoGeoQuery sQuery                           to hoJson
36176>>>>>        
36176>>>>>        Function_Return hoJson
36177>>>>>    End_Function
36178>>>>>    
36178>>>>>    Procedure ExtractData Handle hoJson
36180>>>>>        Number nLat nLng
36180>>>>>        Handle hoBox
36180>>>>>        Number[] anBox
36181>>>>>        
36181>>>>>        Set pnLat to (ValueAtPath(oJPath(Self), hoJson, "data.[0].latitude"))
36182>>>>>        Set pnLng to (ValueAtPath(oJPath(Self), hoJson, "data.[0].longitude"))
36183>>>>>
36183>>>>>        Set psDisplayName to (ValueAtPath(oJPath(Self), hoJson, "data.[0].label"))
36184>>>>>    End_Procedure
36185>>>>>    
36185>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
36187>>>>>        Number[]  anBox
36188>>>>>        stPolygon tBox
36188>>>>>        stPolygon tBox
36188>>>>>        String    sName
36188>>>>>        
36188>>>>>        If not hoMap ;            Procedure_Return
36191>>>>>        If (pnLat(Self) = 100) ;            Procedure_Return
36194>>>>>
36194>>>>>        Forward Send DrawMap hoJson hoMap
36196>>>>>
36196>>>>>        Send DrawMap of hoMap (pnLat(Self)) (pnLng(Self)) (piZoom(Self)) (piMaxZoom(Self))
36197>>>>>    End_Procedure
36198>>>>>    
36198>>>>>End_Class
36199>>>Use GeoConnectors\cGeocodeIOConnector.pkg
Including file: GeoConnectors\cGeocodeIOConnector.pkg    (C:\Projects\LeafletTest\AppSrc\GeoConnectors\cGeocodeIOConnector.pkg)
36199>>>>>Use cGeocodeConnector.pkg
36199>>>>>
36199>>>>>Class cGeocodeIOConnector is a cGeocodeConnector
36200>>>>>    
36200>>>>>    Procedure Construct_Object
36202>>>>>        Forward Send Construct_Object
36204>>>>>        Set psHost      to "api.geocod.io"
36205>>>>>        Set psPath      to "v1.6/geocode"
36206>>>>>        Set psKey       to (Config("tokens.geocodeIOKey"))
36207>>>>>        Set psName      to "Geocode IO"
36208>>>>>        Set psID        to "GEOCODEIO"
36209>>>>>        Set psWebSite   to "https://www.geocod.io/"
36210>>>>>        
36210>>>>>        Property Number[] panBoundingBox
36211>>>>>        
36211>>>>>        // Position Stack free plan doesn't use HTTPS, so:
36211>>>>>        Set piRemotePort    of oHttp to rpHttp
36212>>>>>        Set peTransferFlags of oHttp to 0
36213>>>>>    End_Procedure
36214>>>>>    
36214>>>>>    Function FreeQuery String sQuery Returns Handle
36216>>>>>        Handle  hoJson
36216>>>>>        Boolean bOK
36216>>>>>        
36216>>>>>        Move (Replaces(" ", sQuery, "%20")) to sQuery
36217>>>>>        Move ("q=" + sQuery)                to sQuery
36218>>>>>        Get DoGeoQuery sQuery               to hoJson
36219>>>>>        
36219>>>>>        Function_Return hoJson
36220>>>>>    End_Function
36221>>>>>    
36221>>>>>    Function StructuredQuery String[] asParams Returns Handle
36223>>>>>        String[] asQuery
36224>>>>>        String   sQuery
36224>>>>>        Handle   hoJson
36224>>>>>        
36224>>>>>        If (asParams[6] <> "") ;        Move (asParams[6] * asParams[5])        to  asParams[5]
36227>>>>>        If (asParams[5] <> "") ;            Move ("street=" + asParams[5])      to asQuery[SizeOfArray(asQuery)]
36230>>>>>        If (asParams[4] <> "") ;            Move ("city=" + asParams[4])        to asQuery[SizeOfArray(asQuery)]
36233>>>>>        If (asParams[2] <> "") ;            Move ("state=" + asParams[2])       to asQuery[SizeOfArray(asQuery)]
36236>>>>>        If (asParams[1] <> "") ;            Move ("postal_code=" + asParams[1]) to asQuery[SizeOfArray(asQuery)]
36239>>>>>        If (asParams[0] <> "") ;            Move ("country=" + asParams[0])     to asQuery[SizeOfArray(asQuery)]
36242>>>>>        
36242>>>>>        Move (StrJoinFromArray(asQuery, "&"))   to sQuery
36243>>>>>        Move (Replaces(" ", sQuery, "%20"))     to sQuery
36244>>>>>        Get DoGeoQuery sQuery                   to hoJson
36245>>>>>        
36245>>>>>        Function_Return hoJson
36246>>>>>    End_Function
36247>>>>>    
36247>>>>>    Function PostcodeQuery String sCountry String sPostcode Returns Handle
36249>>>>>        String  sQuery
36249>>>>>        Handle  hoJson
36249>>>>>        
36249>>>>>        Move ("postal_code=" + sPostcode + "&country=" + sCountry)  to sQuery
36250>>>>>        Move (Replaces(" ", sQuery, "%20"))     to sQuery
36251>>>>>        Get DoGeoQuery sQuery                                       to hoJson
36252>>>>>        
36252>>>>>        Function_Return hoJson
36253>>>>>    End_Function
36254>>>>>    
36254>>>>>    Procedure ExtractData Handle hoJson
36256>>>>>        Number nLat nLng
36256>>>>>        Handle hoBox
36256>>>>>        Number[] anBox
36257>>>>>        
36257>>>>>        Set pnLat to (ValueAtPath(oJPath(Self), hoJson, "results.[0].location.lat"))
36258>>>>>        Set pnLng to (ValueAtPath(oJPath(Self), hoJson, "results.[0].location.lng"))
36259>>>>>
36259>>>>>        Set psDisplayName to (ValueAtPath(oJPath(Self), hoJson, "results.[0].formatted_address"))
36260>>>>>    End_Procedure
36261>>>>>    
36261>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
36263>>>>>        Number[]  anBox
36264>>>>>        stPolygon tBox
36264>>>>>        stPolygon tBox
36264>>>>>        String    sName
36264>>>>>        
36264>>>>>        If not hoMap ;            Procedure_Return
36267>>>>>        If (pnLat(Self) = 100) ;            Procedure_Return
36270>>>>>
36270>>>>>        Forward Send DrawMap hoJson hoMap
36272>>>>>
36272>>>>>        Send DrawMap of hoMap (pnLat(Self)) (pnLng(Self)) (piZoom(Self)) (piMaxZoom(Self))
36273>>>>>    End_Procedure
36274>>>>>    
36274>>>>>End_Class
36275>>>Use GeoConnectors\cOpenCageConnector.pkg
Including file: GeoConnectors\cOpenCageConnector.pkg    (C:\Projects\LeafletTest\AppSrc\GeoConnectors\cOpenCageConnector.pkg)
36275>>>>>Use cGeocodeConnector.pkg
36275>>>>>
36275>>>>>Class cOpenCageConnector is a cGeocodeConnector
36276>>>>>    
36276>>>>>    Procedure Construct_Object
36278>>>>>        Forward Send Construct_Object
36280>>>>>        Set psHost      to "api.opencagedata.com"
36281>>>>>        Set psPath      to "geocode/v1/json"
36282>>>>>        Set psKey       to (Config("tokens.openCageKey"))
36283>>>>>        Set psName      to "OpenCage"
36284>>>>>        Set psID        to "OPENCAGE"
36285>>>>>        Set psWebSite   to "https://opencagedata.com/"
36286>>>>>        
36286>>>>>        Property Number[] panBoundingBox
36287>>>>>    End_Procedure
36288>>>>>    
36288>>>>>    Function FreeQuery String sQuery Returns Handle
36290>>>>>        Handle  hoJson
36290>>>>>        Boolean bOK
36290>>>>>        
36290>>>>>        Move (Replaces(" ", sQuery, "%20")) to sQuery
36291>>>>>        Move (Replaces(",", sQuery, "%2C")) to sQuery
36292>>>>>        
36292>>>>>        Move ("q=" + sQuery)    to sQuery
36293>>>>>        Get DoGeoQuery sQuery   to hoJson
36294>>>>>        
36294>>>>>        Function_Return hoJson
36295>>>>>    End_Function
36296>>>>>    
36296>>>>>    Function PostcodeQuery String sCountry String sPostcode Returns Handle
36298>>>>>        String  sQuery
36298>>>>>        Handle  hoJson
36298>>>>>        
36298>>>>>        Move ("q=" + sPostcode + "&countrycode=" + sCountry)  to sQuery
36299>>>>>        Move (Replaces(" ", sQuery, "%20"))                   to sQuery
36300>>>>>        Get DoGeoQuery sQuery                                 to hoJson
36301>>>>>        
36301>>>>>        Function_Return hoJson
36302>>>>>    End_Function
36303>>>>>    
36303>>>>>    Procedure ExtractData Handle hoJson
36305>>>>>        Number nLat nLng
36305>>>>>        Handle hoBox
36305>>>>>        Number[] anBox
36306>>>>>        
36306>>>>>        Set pnLat to (ValueAtPath(oJPath(Self), hoJson, "results.[0].geometry.lat"))
36307>>>>>        Set pnLng to (ValueAtPath(oJPath(Self), hoJson, "results.[0].geometry.lng"))
36308>>>>>
36308>>>>>        Set psDisplayName to (ValueAtPath(oJPath(Self), hoJson, "results.[0].formatted_address"))
36309>>>>>    End_Procedure
36310>>>>>    
36310>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
36312>>>>>        Number[]  anBox
36313>>>>>        stPolygon tBox
36313>>>>>        stPolygon tBox
36313>>>>>        String    sName
36313>>>>>        
36313>>>>>        If not hoMap ;            Procedure_Return
36316>>>>>        If (pnLat(Self) = 100) ;            Procedure_Return
36319>>>>>        
36319>>>>>        Forward Send DrawMap hoJson hoMap
36321>>>>>
36321>>>>>        Send DrawMap of hoMap (pnLat(Self)) (pnLng(Self)) (piZoom(Self)) (piMaxZoom(Self))
36322>>>>>    End_Procedure
36323>>>>>    
36323>>>>>End_Class
36324>>>Use GeoConnectors\cTrimbleConnector.pkg
Including file: GeoConnectors\cTrimbleConnector.pkg    (C:\Projects\LeafletTest\AppSrc\GeoConnectors\cTrimbleConnector.pkg)
36324>>>>>Use cGeocodeConnector.pkg
36324>>>>>
36324>>>>>Class cTrimbleConnector is a cGeocodeConnector
36325>>>>>    
36325>>>>>    Procedure Construct_Object
36327>>>>>        Forward Send Construct_Object
36329>>>>>
36329>>>>>        Set psHost      to "api.positionstack.com"
36330>>>>>        Set psPath      to "v1/forward"
36331>>>>>        Set psKey       to (Config("tokens.trimbleKey"))
36332>>>>>        Set psName      to "Trimble"
36333>>>>>        Set psID        to "TRIMBLE"
36334>>>>>        Set psWebSite   to "https://developer.trimblemaps.com/"
36335>>>>>        
36335>>>>>        Property Number[] panBoundingBox
36336>>>>>        
36336>>>>>        // Position Stack free plan doesn't use HTTPS, so:
36336>>>>>        Set piRemotePort    of oHttp to rpHttp
36337>>>>>        Set peTransferFlags of oHttp to 0
36338>>>>>    End_Procedure
36339>>>>>    
36339>>>>>    Function FreeQuery String sQuery Returns Handle
36341>>>>>        Handle  hoJson
36341>>>>>        Boolean bOK
36341>>>>>        
36341>>>>>        Move ("query=" + sQuery)            to sQuery
36342>>>>>        Move (Replaces(" ", sQuery, "%20")) to sQuery
36343>>>>>        Get DoGeoQuery sQuery               to hoJson
36344>>>>>        
36344>>>>>        Function_Return hoJson
36345>>>>>    End_Function    
36346>>>>>    
36346>>>>>    Procedure ExtractData Handle hoJson
36348>>>>>        Number nLat nLng
36348>>>>>        Handle hoBox
36348>>>>>        Number[] anBox
36349>>>>>        
36349>>>>>        Set pnLat to (ValueAtPath(oJPath(Self), hoJson, "data.[0].latitude"))
36350>>>>>        Set pnLng to (ValueAtPath(oJPath(Self), hoJson, "data.[0].longitude"))
36351>>>>>
36351>>>>>        Set psDisplayName to (ValueAtPath(oJPath(Self), hoJson, "data.[0].label"))
36352>>>>>    End_Procedure
36353>>>>>    
36353>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
36355>>>>>        Number[]  anBox
36356>>>>>        stPolygon tBox
36356>>>>>        stPolygon tBox
36356>>>>>        String    sName
36356>>>>>        
36356>>>>>        If not hoMap ;            Procedure_Return
36359>>>>>        If (pnLat(Self) = 100) ;            Procedure_Return
36362>>>>>
36362>>>>>        Forward Send DrawMap hoJson hoMap
36364>>>>>
36364>>>>>        Send DrawMap of hoMap (pnLat(Self)) (pnLng(Self)) (piZoom(Self)) (piMaxZoom(Self))
36365>>>>>    End_Procedure
36366>>>>>    
36366>>>>>End_Class
36367>>>Use GeoConnectors\cWhat3WordsConnector.pkg
Including file: GeoConnectors\cWhat3WordsConnector.pkg    (C:\Projects\LeafletTest\AppSrc\GeoConnectors\cWhat3WordsConnector.pkg)
36367>>>>>Use cGeocodeConnector.pkg
36367>>>>>
36367>>>>>Class cWhat3WordsConnector is a cGeocodeConnector
36368>>>>>    
36368>>>>>    Procedure Construct_Object
36370>>>>>        Forward Send Construct_Object
36372>>>>>        
36372>>>>>        Set psHost      to "api.what3words.com"
36373>>>>>        Set psPath      to "v3/convert-to-coordinates"
36374>>>>>        Set psKey       to (Config("tokens.whatThreeWordsKey"))
36375>>>>>        Set psName      to "What 3 Words"
36376>>>>>        Set psID        to "WHT3WDS"
36377>>>>>        Set psWebSite   to "https://www.what3words.com"
36378>>>>>        
36378>>>>>        Property Number[] panBoundingBox
36379>>>>>    End_Procedure
36380>>>>>    
36380>>>>>    Function FreeQuery String sQuery Returns Handle
36382>>>>>        Handle hoJson
36382>>>>>        
36382>>>>>        Move (Replaces(" ", sQuery, ".")) to sQuery
36383>>>>>        Move ("words=" + sQuery)            to sQuery
36384>>>>>        Get DoGeoQuery sQuery               to hoJson
36385>>>>>        
36385>>>>>        Function_Return hoJson
36386>>>>>    End_Function
36387>>>>>        
36387>>>>>    Procedure ExtractData Handle hoJson
36389>>>>>        Number nLat nLng
36389>>>>>        String sCountry
36389>>>>>        Number[] anBox
36390>>>>>        
36390>>>>>        Set pnLat to (ValueAtPath(oJPath(Self), hoJson, "coordinates.lat"))
36391>>>>>        Set pnLng to (ValueAtPath(oJPath(Self), hoJson, "coordinates.lng"))
36392>>>>>        
36392>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "square.southwest.lat")) to anBox[0]
36393>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "square.southwest.lng")) to anBox[2]
36394>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "square.northeast.lat")) to anBox[1]
36395>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "square.northeast.lng")) to anBox[3]
36396>>>>>        Set panBoundingBox to anBox
36397>>>>>
36397>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "country")) to sCountry
36398>>>>>        Set psDisplayName to (ValueAtPath(oJPath(Self), hoJson, "nearestPlace") + "," * sCountry)
36399>>>>>    End_Procedure
36400>>>>>    
36400>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
36402>>>>>        Number[]  anBox
36403>>>>>        stPolygon tBox
36403>>>>>        stPolygon tBox
36403>>>>>        String    sName
36403>>>>>        
36403>>>>>        If not hoMap ;            Procedure_Return
36406>>>>>        If (pnLat(Self) = 100) ;            Procedure_Return
36409>>>>>
36409>>>>>        Forward Send DrawMap hoJson hoMap
36411>>>>>
36411>>>>>        Get panBoundingBox to anBox
36412>>>>>        
36412>>>>>        If (SizeOfArray(anBox) = 4) Begin
36414>>>>>            Move anBox[0]   to tBox.aPoints[0][0]
36415>>>>>            Move anBox[2]   to tBox.aPoints[0][1]
36416>>>>>            
36416>>>>>            Move anBox[1]   to tBox.aPoints[1][0]
36417>>>>>            Move anBox[2]   to tBox.aPoints[1][1]
36418>>>>>            
36418>>>>>            Move anBox[1]   to tBox.aPoints[2][0]
36419>>>>>            Move anBox[3]   to tBox.aPoints[2][1]
36420>>>>>            
36420>>>>>            Move anBox[0]   to tBox.aPoints[3][0]
36421>>>>>            Move anBox[3]   to tBox.aPoints[3][1]
36422>>>>>            
36422>>>>>            Move (Config("defaults.polygon.lineColor"))     to tBox.sLineColor
36423>>>>>            Move (Config("defaults.polygon.lineWeight"))    to tBox.iLineWeight
36424>>>>>            Move (Config("defaults.polygon.lineOpacity"))   to tBox.nLineOpacity
36425>>>>>            Move (Config("defaults.polygon.fillColor"))     to tBox.sFillColor
36426>>>>>            Move (Config("defaults.polygon.fillOpacity"))   to tBox.nFillOpacity
36427>>>>>            
36427>>>>>            Move True to tBox.bStroke
36428>>>>>            Move (pbFitMap(Self)) to tBox.bFitMap
36429>>>>>            
36429>>>>>            Send DrawPolygon of hoMap tBox
36430>>>>>        End
36430>>>>>>
36430>>>>>        
36430>>>>>    End_Procedure
36431>>>>>    
36431>>>>>End_Class
36432>>>Use GeoConnectors\cGoogleMapsConnector.pkg
Including file: GeoConnectors\cGoogleMapsConnector.pkg    (C:\Projects\LeafletTest\AppSrc\GeoConnectors\cGoogleMapsConnector.pkg)
36432>>>>>Use cGeocodeConnector.pkg
36432>>>>>
36432>>>>>Class cGoogleMapsConnector is a cGeocodeConnector
36433>>>>>    
36433>>>>>    Procedure Construct_Object
36435>>>>>        Forward Send Construct_Object
36437>>>>>        
36437>>>>>        Set psHost      to "maps.googleapis.com"
36438>>>>>        Set psPath      to "maps/api/geocode/json"
36439>>>>>        Set psKey       to (Config("tokens.googleMapsKey"))
36440>>>>>        Set psName      to "Google Maps"
36441>>>>>        Set psID        to "GOOGLEMAPS"
36442>>>>>        Set psWebSite   to "https://developers.google.com/maps"
36443>>>>>        
36443>>>>>        Property Number[] panBoundingBox
36444>>>>>    End_Procedure
36445>>>>>    
36445>>>>>    Function FreeQuery String sQuery Returns Handle
36447>>>>>        Handle hoJson
36447>>>>>        
36447>>>>>        Move (Replaces(" ", sQuery, "%20"))   to sQuery
36448>>>>>        Move ("address=" + sQuery)          to sQuery
36449>>>>>        Get DoGeoQuery sQuery               to hoJson
36450>>>>>        
36450>>>>>        Function_Return hoJson
36451>>>>>    End_Function
36452>>>>>    
36452>>>>>    Function StructuredQuery String[] asParams Returns Handle
36454>>>>>        String   sQuery
36454>>>>>        String[] asQuery
36455>>>>>        Handle   hoJson
36455>>>>>        
36455>>>>>        Move (ReverseArray(asParams))           to asParams
36456>>>>>        Move (StrJoinFromArray(asParams, "%20"))  to sQuery
36457>>>>>        Move ("address=" + sQuery)              to sQuery
36458>>>>>        Get DoGeoQuery sQuery                   to hoJson
36459>>>>>        
36459>>>>>        Function_Return hoJson
36460>>>>>    End_Function
36461>>>>>    
36461>>>>>    Function PostcodeQuery String sCountry String sPostcode Returns Handle
36463>>>>>        String  sQuery sHouse
36463>>>>>        Integer iArg
36463>>>>>        Handle  hoJson
36463>>>>>        
36463>>>>>        If (num_arguments > 2) Begin
36465>>>>>            Move 3 to iArg
36466>>>>>            Move iArg& to sHouse
36467>>>>>        End
36467>>>>>>
36467>>>>>        
36467>>>>>        Move ("address=" + ;                If((sHouse = ""), "", (sHouse + " ")) + ;                sPostcode + " " + sCountry) to sQuery
36468>>>>>        Move (Replaces(" ", sQuery, "%20"))   to sQuery
36469>>>>>        Get DoGeoQuery sQuery               to hoJson
36470>>>>>        
36470>>>>>        Function_Return hoJson
36471>>>>>    End_Function
36472>>>>>    
36472>>>>>    Procedure ExtractData Handle hoJson
36474>>>>>        Number nLat nLng
36474>>>>>        Handle hoBox
36474>>>>>        Number[] anBox
36475>>>>>        
36475>>>>>        Set pnLat to (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.location.lat"))
36476>>>>>        Set pnLng to (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.location.lng"))
36477>>>>>        
36477>>>>>        If (JsonAtPath(oJPath(Self), hoJson, "results[0].geometry.bounds")) Begin
36479>>>>>            Move (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.bounds.northeast.lat")) to anBox[0]
36480>>>>>            Move (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.bounds.northeast.lng")) to anBox[1]
36481>>>>>            Move (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.bounds.southwest.lat")) to anBox[2]
36482>>>>>            Move (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.bounds.southwest.lng")) to anBox[3]
36483>>>>>        End
36483>>>>>>
36483>>>>>        Else If (JsonAtPath(oJPath(Self), hoJson, "results[0].geometry.viewport")) Begin
36486>>>>>            Move (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.viewport.northeast.lat")) to anBox[0]
36487>>>>>            Move (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.viewport.northeast.lng")) to anBox[1]
36488>>>>>            Move (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.viewport.southwest.lat")) to anBox[2]
36489>>>>>            Move (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.viewport.southwest.lng")) to anBox[3]
36490>>>>>        End
36490>>>>>>
36490>>>>>        
36490>>>>>        Set panBoundingBox to anBox
36491>>>>>
36491>>>>>        Set psDisplayName to (ValueAtPath(oJPath(Self), hoJson, "results[0].formatted_address"))
36492>>>>>    End_Procedure
36493>>>>>    
36493>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
36495>>>>>        Number[]  anBox
36496>>>>>        stPolygon tBox
36496>>>>>        stPolygon tBox
36496>>>>>        String    sName
36496>>>>>        
36496>>>>>        If not hoMap ;            Procedure_Return
36499>>>>>        If (pnLat(Self) = 100) ;            Procedure_Return
36502>>>>>
36502>>>>>        Forward Send DrawMap hoJson hoMap
36504>>>>>
36504>>>>>        Get panBoundingBox to anBox
36505>>>>>        
36505>>>>>        If (SizeOfArray(anBox) = 4) Begin
36507>>>>>            Move anBox[0]   to tBox.aPoints[0][0]
36508>>>>>            Move anBox[1]   to tBox.aPoints[0][1]
36509>>>>>            
36509>>>>>            Move anBox[0]   to tBox.aPoints[1][0]
36510>>>>>            Move anBox[3]   to tBox.aPoints[1][1]
36511>>>>>            
36511>>>>>            Move anBox[2]   to tBox.aPoints[2][0]
36512>>>>>            Move anBox[3]   to tBox.aPoints[2][1]
36513>>>>>            
36513>>>>>            Move anBox[2]   to tBox.aPoints[3][0]
36514>>>>>            Move anBox[1]   to tBox.aPoints[3][1]
36515>>>>>            
36515>>>>>            Move (Config("defaults.polygon.lineColor"))     to tBox.sLineColor
36516>>>>>            Move (Config("defaults.polygon.lineWeight"))    to tBox.iLineWeight
36517>>>>>            Move (Config("defaults.polygon.lineOpacity"))   to tBox.nLineOpacity
36518>>>>>            Move (Config("defaults.polygon.fillColor"))     to tBox.sFillColor
36519>>>>>            Move (Config("defaults.polygon.fillOpacity"))   to tBox.nFillOpacity
36520>>>>>            
36520>>>>>            Move True to tBox.bStroke
36521>>>>>            Move (pbFitMap(Self)) to tBox.bFitMap
36522>>>>>            
36522>>>>>            Send DrawPolygon of hoMap tBox
36523>>>>>        End
36523>>>>>>
36523>>>>>        
36523>>>>>    End_Procedure
36524>>>>>    
36524>>>>>End_Class
36525>>>
36525>>>Object oTestGeoMap is a cWebView
36527>>>    Set psCaption to "GeoMapping Test"
36528>>>    
36528>>>//    Property String psScanducMarker "Images/Scanduc-marker-icon.png"
36528>>>    Property String psScanducMarker "Images/Scanduc-pointer-icon.png"
36530>>>    
36530>>>    Object oGeocodeHost is a cGeocodeHost
36532>>>        
36532>>>        Object oLocIQ is a cLocationIQConnector
36534>>>            Set pbFitMap to False
36535>>>        End_Object
36536>>>        
36536>>>        Object oOMapQ is a cMapQuestOpenConnector
36538>>>        End_Object
36539>>>        
36539>>>        Object oPosStk is a cPositionStackConnector
36541>>>        End_Object
36542>>>        
36542>>>        Object oGeoIO is a cGeocodeIOConnector
36544>>>        End_Object
36545>>>        
36545>>>        Object oOpenCage is a cOpenCageConnector
36547>>>        End_Object
36548>>>        
36548>>>        Object oHere is a cHereConnector
36550>>>        End_Object
36551>>>        
36551>>>        Object oTrimble is a cTrimbleConnector
36553>>>        End_Object
36554>>>        
36554>>>        Object oWhat3Words is a cWhat3WordsConnector
36556>>>        End_Object
36557>>>        
36557>>>        Object oGoogleMaps is a cGoogleMapsConnector
36559>>>        End_Object
36560>>>        
36560>>>    End_Object
36561>>>    
36561>>>    Procedure ProcessReturn Handle hoService Handle hoJson
36564>>>        Set peWhiteSpace of hoJson to jpWhitespace_Pretty
36565>>>        Set pbEscapeForwardSlash of hoJson to False
36566>>>        WebSet psValue of oResult to (Stringify(hoJson))
36567>>>        Send DrawMap of hoService hoJson (oMap(Self)) 
36568>>>        Send Destroy of hoJson
36569>>>        WebSet psValue of oQuery to (psQuery(hoService))
36570>>>    End_Procedure
36571>>>    
36571>>>    Object oWebMainPanel is a cWebPanel
36573>>>        Set piColumnCount to 12
36574>>>        
36574>>>        Object oMainGroup is a cWebGroup
36576>>>            Set piColumnSpan to 5
36577>>>            Set piColumnIndex to 0
36578>>>            Set piColumnCount to 12
36579>>>            Set pbFillHeight to True
36580>>>            Set pbShowBorder to False
36581>>>            Set pbShowCaption to False
36582>>>            
36582>>>            Object oMapMyLocBtn is a cWebButton
36584>>>                Set piColumnSpan to 3
36585>>>                Set piColumnIndex to 8
36586>>>                Set psCaption to "Current Location"
36587>>>                
36587>>>                Procedure OnClick
36590>>>                    WebSet psValue of oQuery    to ""
36591>>>                    WebSet psValue of oResult   to ""
36592>>>                    Send GetMyLocation of oMap
36593>>>                End_Procedure
36594>>>
36594>>>            End_Object
36595>>>    
36595>>>            Object oLatitude is a cWebForm
36597>>>                Set piColumnSpan to 4
36598>>>                Set psLabel to "Lat:"
36599>>>                Set peLabelAlign to alignRight
36600>>>                Set piLabelOffset to 50
36601>>>                Set peDataType to typeNumber
36602>>>                Set piPrecision to 8
36603>>>                Set psValue to "45.43401193"
36604>>>            End_Object
36605>>>            
36605>>>            Object oLongitude is a cWebForm
36607>>>                Set piColumnSpan to 4
36608>>>                Set piColumnIndex to 4
36609>>>                Set psLabel to "Lng:"
36610>>>                Set peLabelAlign to alignRight
36611>>>                Set piLabelOffset to 50
36612>>>                Set peDataType to typeNumber
36613>>>                Set piPrecision to 8
36614>>>                Set psValue to "12.33826586"
36615>>>            End_Object
36616>>>            
36616>>>            Object oSendLL is a cWebButton
36618>>>                Set piColumnSpan to 3
36619>>>                Set piColumnIndex to 8
36620>>>                Set psCaption to "Send Lat/Lng"
36621>>>                
36621>>>                Procedure OnClick
36624>>>                    Integer iInitZoom
36624>>>                    Number  nLat nLng
36624>>>                    
36624>>>                    WebSet psValue of oQuery                        to ""
36625>>>                    WebSet psValue of oResult                       to ""
36626>>>                    WebGet psValue of oInitialZoom to iInitZoom
36629>>>                    WebGet psValue of oLatitude    to nLat
36632>>>                    WebGet psValue of oLongitude   to nLng
36635>>>                    
36635>>>                    Send DrawMap of oMap nLat nLng iInitZoom 22
36636>>>                    Send DrawMarker of oMap nLat nLng ("Ah! Venice! (" + String(nLat) + " N/" + String(nLng) + " E)") "" False
36637>>>                End_Procedure
36638>>>                
36638>>>            End_Object
36639>>>
36639>>>            Object oWebHorizontalLine1 is a cWebHorizontalLine
36641>>>                Set piHeight to 25
36642>>>            End_Object            
36643>>>            
36643>>>            Object oGeoService is a cWebCombo
36645>>>                Set piColumnSpan to 7
36646>>>                Set psLabel to "Service Provider:"
36647>>>                Set peLabelAlign to alignRight
36648>>>                Set piLabelOffset to 110
36649>>>                Set pbAddEmptyItem to True
36650>>>                
36650>>>                Procedure OnFill
36653>>>                    String[] asIDs asNames
36655>>>                    Integer  i iMax
36655>>>                    
36655>>>                    Get pasConnectorIDs   of oGeocodeHost   to asIDs
36656>>>                    Get pasConnectorNames of oGeocodeHost   to asNames
36657>>>                    Move (SizeOfArray(asIDs) - 1)           to iMax
36658>>>                    
36658>>>                    For i from 0 to iMax
36664>>>>
36664>>>                        Send AddComboItem asIDs[i] asNames[i]
36665>>>                    Loop
36666>>>>
36666>>>                    
36666>>>                End_Procedure
36667>>>    
36667>>>            End_Object
36668>>>    
36668>>>            Object oWebSpacer1 is a cWebSpacer
36670>>>                Set piColumnSpan to 12
36671>>>                Set piHeight to 20
36672>>>            End_Object
36673>>>                    
36673>>>            Object oFreeQuery is a cWebForm
36675>>>                Set piColumnSpan to 12
36676>>>                Set psLabel to "Free Text Query:"
36677>>>                Set peLabelAlign to alignRight
36678>>>                Set piLabelOffset to 110
36679>>>                Set psValue to "CPH Conference, Tietgensgade 65, 1704 Copenhagen, Denmark"
36680>>>            End_Object
36681>>>            
36681>>>            Object oSendFreeQryBtn is a cWebButton
36683>>>                Set piColumnSpan to 4
36684>>>                Set piColumnIndex to 8
36685>>>                Set psCaption to "Send Free Text"
36686>>>            
36686>>>                Procedure OnClick
36689>>>                    String  sServ sQuery
36689>>>                    Handle  hoServ hoJson
36689>>>                    Integer iInitZoom
36689>>>                    
36689>>>                    WebSet psValue of oQuery                        to ""
36690>>>                    WebSet psValue of oResult                       to ""
36691>>>                    WebGet psValue of oGeoService                   to sServ
36694>>>                    Get ConnectorObjectFromID of oGeocodeHost sServ to hoServ
36695>>>                    
36695>>>                    If not hoServ Begin
36697>>>                        Send ShowInfoBox "Please select a Service Provider first" "User Error"
36698>>>                        Procedure_Return
36699>>>                    End
36699>>>>
36699>>>                    
36699>>>                    WebGet psValue of oInitialZoom to iInitZoom
36702>>>                    Set piZoom of hoServ to iInitZoom
36703>>>                    WebGet psValue of oFreeQuery  to sQuery
36706>>>                    Get FreeQuery of hoServ sQuery to hoJson
36707>>>                    
36707>>>                    If hoJson Begin
36709>>>                        Send ProcessReturn hoServ hoJson
36710>>>                        If (GetChecked(oShowMarker(Self))) ;                            Send PlaceMarker of hoServ (oMap(Self)) ;                                (If((GetChecked(oCustomMarker(Self))), psScanducMarker(Self), ""))
36713>>>                    End
36713>>>>
36713>>>                    Else ;                        Send ShowInfoBox (psError(hoServ)) "Request Failed"
36715>>>                    
36715>>>                End_Procedure
36716>>>                
36716>>>            End_Object
36717>>>    
36717>>>            Object oCountry is a cWebForm
36719>>>                Set piColumnSpan to 9
36720>>>                Set psLabel to "Country:"
36721>>>                Set peLabelAlign to alignRight
36722>>>                Set piLabelOffset to 110
36723>>>                Set psValue to "GB"
36724>>>            End_Object
36725>>>    
36725>>>            Object oPostcode is a cWebForm
36727>>>                Set piColumnSpan to 9
36728>>>                Set psLabel to "Postal Code:"
36729>>>                Set peLabelAlign to alignRight
36730>>>                Set piLabelOffset to 110
36731>>>                Set psValue to "GU26 6EX"
36732>>>            End_Object
36733>>>    
36733>>>            Object oState is a cWebForm
36735>>>                Set piColumnSpan to 9
36736>>>                Set psLabel to "State:"
36737>>>                Set peLabelAlign to alignRight
36738>>>                Set piLabelOffset to 110
36739>>>                Set psValue to "England"
36740>>>            End_Object
36741>>>    
36741>>>            Object oCounty is a cWebForm
36743>>>                Set piColumnSpan to 9
36744>>>                Set psLabel to "County:"
36745>>>                Set peLabelAlign to alignRight
36746>>>                Set piLabelOffset to 110
36747>>>                Set psValue to "Surrey"
36748>>>            End_Object
36749>>>    
36749>>>            Object oCity is a cWebForm
36751>>>                Set piColumnSpan to 9
36752>>>                Set psLabel to "City:"
36753>>>                Set peLabelAlign to alignRight
36754>>>                Set piLabelOffset to 110
36755>>>                Set psValue to "Hindhead"
36756>>>            End_Object
36757>>>    
36757>>>            Object oStreet is a cWebForm
36759>>>                Set piColumnSpan to 9
36760>>>                Set psLabel to "Street:"
36761>>>                Set peLabelAlign to alignRight
36762>>>                Set piLabelOffset to 110
36763>>>                Set psValue to "Kingswood Firs"
36764>>>            End_Object
36765>>>    
36765>>>            Object oHouse is a cWebForm
36767>>>                Set piColumnSpan to 4
36768>>>                Set psLabel to "House Number:"
36769>>>                Set peLabelAlign to alignRight
36770>>>                Set piLabelOffset to 110
36771>>>                Set psValue to "8"
36772>>>            End_Object
36773>>>    
36773>>>            Object oSendStructAddrBtn is a cWebButton
36775>>>                Set piColumnSpan to 4
36776>>>                Set piColumnIndex to 4
36777>>>                Set psCaption to "Send Structured"
36778>>>            
36778>>>                Procedure OnClick
36781>>>                    Handle   hoServ
36781>>>                    String   sServ
36781>>>                    String[] asParams
36782>>>                    Handle   hoJson
36782>>>                    Integer  iInitZoom        
36782>>>                    
36782>>>                    WebSet psValue of oQuery                        to ""
36783>>>                    WebSet psValue of oResult                       to ""
36784>>>                    WebGet psValue of oGeoService                   to sServ
36787>>>                    Get ConnectorObjectFromID of oGeocodeHost sServ to hoServ
36788>>>                    
36788>>>                    If not hoServ Begin
36790>>>                        Send ShowInfoBox "Please select a Service Provider first" "User Error"
36791>>>                        Procedure_Return
36792>>>                    End
36792>>>>
36792>>>                                            
36792>>>                    WebGet psValue of oInitialZoom to iInitZoom
36795>>>                    Set piZoom of hoServ to iInitZoom
36796>>>                    
36796>>>                    WebGet psValue of oCountry  to asParams[0]
36799>>>                    WebGet psValue of oPostcode to asParams[1]
36802>>>                    WebGet psValue of oState    to asParams[2]
36805>>>                    WebGet psValue of oCounty   to asParams[3]
36808>>>                    WebGet psValue of oCity     to asParams[4]
36811>>>                    WebGet psValue of oStreet   to asParams[5]
36814>>>                    WebGet psValue of oHouse    to asParams[6]
36817>>>                    Get StructuredQuery of hoServ asParams to hoJson
36818>>>                    
36818>>>                    If hoJson Begin
36820>>>                        Send ProcessReturn hoServ hoJson
36821>>>                        If (GetChecked(oShowMarker(Self))) ;                            Send PlaceMarker of hoServ (oMap(Self)) ;                                (If((GetChecked(oCustomMarker(Self))), psScanducMarker(Self), ""))
36824>>>                    End
36824>>>>
36824>>>                    Else ;                        Send ShowInfoBox (psError(hoServ)) "Request Failed"
36826>>>                    
36826>>>                End_Procedure
36827>>>                
36827>>>            End_Object
36828>>>    
36828>>>            Object oSendPostcodeQuery is a cWebButton
36830>>>                Set piColumnSpan to 4
36831>>>                Set piColumnIndex to 8
36832>>>                Set psCaption to "Send Postcode"
36833>>>            
36833>>>                Procedure OnClick
36836>>>                    String  sService sCountry sPostcode sHouse
36836>>>                    Handle  hoServ hoJson
36836>>>                    Integer iInitZoom
36836>>>                    
36836>>>                    WebSet psValue of oQuery                            to ""
36837>>>                    WebSet psValue of oResult                           to ""
36838>>>                    WebGet psValue of oGeoService                       to sService
36841>>>                    Get ConnectorObjectFromID of oGeocodeHost sService to hoServ
36842>>>
36842>>>                    If not hoServ Begin
36844>>>                        Send ShowInfoBox "Please select a Service Provider first" "User Error"
36845>>>                        Procedure_Return
36846>>>                    End
36846>>>>
36846>>>                                            
36846>>>                    WebGet psValue of oInitialZoom to iInitZoom
36849>>>                    Set piZoom of hoServ to iInitZoom
36850>>>    
36850>>>                    WebGet psValue of oCountry  to sCountry
36853>>>                    WebGet psValue of oPostcode to sPostcode
36856>>>                    WebGet psValue of oHouse    to sHouse
36859>>>                    Get PostcodeQuery of hoServ sCountry sPostcode sHouse to hoJson
36860>>>                    
36860>>>                    If hoJson Begin
36862>>>                        Send ProcessReturn hoServ hoJson
36863>>>                        If (GetChecked(oShowMarker(Self))) ;                            Send PlaceMarker of hoServ (oMap(Self)) ;                                (If((GetChecked(oCustomMarker(Self))), psScanducMarker(Self), ""))
36866>>>                    End
36866>>>>
36866>>>                    Else ;                        Send ShowInfoBox (psError(hoServ)) "Request Failed"
36868>>>                    
36868>>>                End_Procedure
36869>>>                
36869>>>            End_Object
36870>>>            
36870>>>            Object oQuery is a cWebEdit
36872>>>                Set piColumnSpan to 0
36873>>>                Set psLabel to "Query:"
36874>>>                Set peLabelPosition to lpTop
36875>>>                Set piHeight to 100
36876>>>            End_Object
36877>>>        
36877>>>            Object oResult is a cWebEdit
36879>>>                Set piColumnSpan to 0
36880>>>                Set psLabel to "Result:"
36881>>>                Set pbFillHeight to True
36882>>>                Set peLabelPosition to lpTop
36883>>>            End_Object
36884>>>            
36884>>>        End_Object
36885>>>        
36885>>>        Object oMapGroup is a cWebGroup
36887>>>            Set piColumnSpan to 7
36888>>>            Set piColumnIndex to 5
36889>>>            Set piColumnCount to 20
36890>>>            Set pbFillHeight to True
36891>>>            Set pbShowBorder to False
36892>>>            Set pbShowCaption to False
36893>>>
36893>>>            Object oShowMarker is a cWebCheckbox
36895>>>                Set piColumnSpan to 3
36896>>>                Set piColumnIndex to 0
36897>>>                Set psCaption to "Show marker"
36898>>>                Set psValue to True
36899>>>            End_Object
36900>>>
36900>>>            Object oCustomMarker is a cWebCheckbox
36902>>>                Set piColumnSpan to 3
36903>>>                Set piColumnIndex to 3
36904>>>                Set psCaption to "Scanduc Icon"
36905>>>                Set Value to False
36906>>>            End_Object
36907>>>    
36907>>>            Object oInitialZoom is a cWebCombo
36909>>>                Set piColumnIndex to 6
36910>>>                Set piColumnSpan to 5
36911>>>                Set psLabel to "Initial Zoom:"
36912>>>                Set peLabelAlign to alignRight
36913>>>                Set peAlign to alignRight
36914>>>                Set piLabelOffset to 120
36915>>>                Set psValue to 12
36916>>>                
36916>>>                Procedure OnFill
36919>>>                    Integer i
36919>>>                    
36919>>>                    For i from 1 to 22
36925>>>>
36925>>>                        Send AddComboItem i i
36926>>>                    Loop
36927>>>>
36927>>>                    
36927>>>                End_Procedure
36928>>>                
36928>>>            End_Object
36929>>>            
36929>>>            Object oResolution is a cWebCombo
36931>>>                Set piColumnIndex to 11
36932>>>                Set piColumnSpan to 3
36933>>>                Set psLabel to "Res:"
36934>>>                Set peLabelAlign to alignRight
36935>>>                Set piLabelOffset to 60
36936>>>                Set psValue to "256"
36937>>>                
36937>>>                Procedure OnFill
36940>>>                    Send AddComboItem "256"  "256"
36941>>>                    Send AddComboItem "512"  "512"
36942>>>                    Send AddComboItem "1024" "1024"
36943>>>                End_Procedure
36944>>>                
36944>>>                Set pbServerOnChange to True
36945>>>                Procedure OnChange String sNewValue String sOldValue
36948>>>                    WebSet psTileSize     of oMap to sNewValue
36949>>>                    Send ChangeResolution of oMap    sNewValue
36950>>>                End_Procedure
36951>>>
36951>>>            End_Object
36952>>>    
36952>>>            Object oMapLayer is a cWebCombo
36954>>>                Set piColumnIndex to 14
36955>>>                Set piColumnSpan to 6
36956>>>                Set psLabel to "View:"
36957>>>                Set peLabelAlign to alignRight
36958>>>                Set piLabelOffset to 60
36959>>>                Set psValue to "Map view"
36960>>>                
36960>>>                Procedure OnFill
36963>>>                    Send AddComboItem "mapbox/streets-v11"              "Streets view"
36964>>>                    Send AddComboItem "mapbox/outdoors-v11"             "Outdoors view"
36965>>>                    Send AddComboItem "mapbox/light-v10"                "Light view"
36966>>>                    Send AddComboItem "mapbox/dark-v10"                 "Dark view"
36967>>>                    Send AddComboItem "mapbox/satellite-v9"             "Satellite view"
36968>>>                    Send AddComboItem "mapbox/satellite-streets-v11"    "Satellite Streets view"
36969>>>                    Send AddComboItem "mapbox/navigation-day-v1"        "Navigation view (day)"
36970>>>                    Send AddComboItem "mapbox/navigation-night-v1"      "Navigation view (night)"
36971>>>                End_Procedure
36972>>>                
36972>>>                Set pbServerOnChange to True
36973>>>                Procedure OnChange String sNewValue String sOldValue
36976>>>                    WebSet psLayerID of oMap to sNewValue
36977>>>                    Send ChangeLayer of oMap    sNewValue
36978>>>                End_Procedure
36979>>>                
36979>>>            End_Object
36980>>>        
36980>>>            Object oMap is a cLeafletMappingControl
36982>>>                Set piColumnSpan to 0
36983>>>                Set piColumnIndex to 0
36984>>>                Set psLabel to "Map:"
36985>>>                Set pbFillHeight to True
36986>>>                Set peLabelPosition to lpTop
36987>>>                Set pbShowLabel to True
36988>>>                
36988>>>                Property Integer piMark# 0
36992>>>                
36992>>>                // Just augmented to reset piMark# to zero on each map draw
36992>>>                Procedure DrawMap Number nNorth Number nEast Integer iInitZoom Integer iMaxZoom
36995>>>                    WebSet piMark# to 0
36996>>>                    
36996>>>                    Forward Send DrawMap nNorth nEast iInitZoom iMaxZoom
36998>>>                End_Procedure
36999>>>                
36999>>>                Procedure MyLocation Number nLat Number nLng
37002>>>                    Integer iInitZoom
37002>>>                    Boolean bMark bCustom
37002>>>                    
37002>>>                    WebGet psValue of oInitialZoom  to iInitZoom
37005>>>                    WebGet psValue of oShowMarker   to bMark
37008>>>                    WebGet psValue of oCustomMarker to bCustom
37011>>>                    Send DrawMap nLat nLng iInitZoom 22
37012>>>                    If bMark ;                        Send DrawMarker nLat nLng "" (If(bCustom, "Images/Scanduc-pointer-icon.png", "")) False
37015>>>                    WebSet psValue of oResult to ("Lat:" * String(nLat) + "," * "Lng:" * String(nLng))
37016>>>                End_Procedure
37017>>>                
37017>>>                Set pbServerOnMapClick to True
37018>>>                Procedure OnMapClick String sLat String sLng
37021>>>                    Integer i
37021>>>                    
37021>>>                    WebGet piMark# to i
37024>>>                    Increment i
37025>>>                    WebSet piMark# to i
37026>>>                    
37026>>>                    Send DrawMarker sLat sLng ("Marker" * "#" + String(i) * ;                                               "at" * sLat + "/" + sLng) "" False
37027>>>                End_Procedure
37028>>>                
37028>>>            End_Object
37029>>>
37029>>>        End_Object
37030>>>
37030>>>    End_Object
37031>>>        
37031>>>End_Object
37032>    Use PathTrace.wo
Including file: PathTrace.wo    (C:\Projects\LeafletTest\AppSrc\PathTrace.wo)
37032>>>Use cWebView.pkg
37032>>>Use cWebPanel.pkg
37032>>>Use cWebForm.pkg 
37032>>>Use cLeafletMappingControl.pkg
37032>>>Use Flexml.pkg
37032>>>Use seq_chnl.pkg
37032>>>Use cWebCombo.pkg
37032>>>Use cWebButton.pkg
37032>>>Use cWebCheckBox.pkg
37032>>>Use cWebSpacer.pkg
37032>>>Use cWebEdit.pkg
37032>>>
37032>>>Object oPathTrace is a cWebView
37034>>>    Set psCaption to "Path Trace Example"
37035>>>    
37035>>>    Object oWebMainPanel is a cWebPanel
37037>>>        Set piColumnCount to 12
37038>>>
37038>>>        Object oTraces is a cWebCombo
37040>>>            Set piColumnSpan to 5
37041>>>            Set psLabel to "Select a trace:"
37042>>>            Set peLabelAlign to alignRight
37043>>>            
37043>>>            
37043>>>// JUST PUTTING THIS WHERE IT WON'T CONFUSE ME!            
37043>>>//                    Get FindNode of hoDoc "METADATA" to hoElem1
37043>>>//                    Get FindNode of hoXML "METADATA" to hoElem2
37043>>>//                    
37043>>>//                    Get FindNode of hoDoc "gpx" to hoElem1
37043>>>//                    Get FindNode of hoXML "gpx" to hoElem2
37043>>>//                    
37043>>>//                    Get FindNode of hoDoc "/gpx" to hoElem1
37043>>>//                    Get FindNode of hoXML "/gpx" to hoElem2
37043>>>//                    
37043>>>//                    Get FindNode of hoXml "//metadata" to hoElem1
37043>>>//                    Get FindNode of hoDoc "//metadata" to hoElem2
37043>>>//                    
37043>>>//                    Get FindNode of hoXml "/metadata" to hoElem3
37043>>>//                    Get FindNode of hoDoc "/metadata" to hoElem4
37043>>>//                    
37043>>>//                    Get FindNode of hoXml "metadata" to hoElem1
37043>>>//                    Get FindNode of hoDoc "metadata" to hoElem2
37043>>>//                    
37043>>>//                    
37043>>>//                    Get FindNode of hoDoc "trk/name" to hoElem1
37043>>>//                    Get FindNode of hoDoc "/trk/name" to hoElem2
37043>>>//                    Get FindNode of hoXml "trk/name" to hoElem3
37043>>>//                    Get FindNode of hoXml "/trk/name" to hoElem4
37043>>>//                    
37043>>>//                    Get FindNode of hoXml "descendant::author" to hoElem1
37043>>>//                    Get FindNode of hoDoc "descendant::author" to hoElem2
37043>>>//                    
37043>>>//                    Get FindNodeList of hoXml "/gpx" to hoElems
37043>>>//                    
37043>>>//                    If hoElems Begin
37043>>>//                        Integer j iMax2
37043>>>//                        
37043>>>//                        Get NodeListLength of hoElems to iMax2
37043>>>//                        
37043>>>//                        For j from 0 to iMax2
37043>>>//                            Get CollectionNode of hoElems j to hoElem1
37043>>>//                        Loop
37043>>>//                    End
37043>>>//                    
37043>>>//                    If hoElem1 Begin
37043>>>//                        
37043>>>//                        
37043>>>//                        
37043>>>//                        Send AddComboItem asPaths[i] (psText(hoElem1))
37043>>>//                        Send Destroy of hoElem1
37043>>>//                    End
37043>>>//                    
37043>>>//                    Send Destroy of hoDoc
37043>>>//                    Send Destroy of hoXML
37043>>>//                Loop
37043>>>//                    
37043>>>            
37043>>>            Procedure ProcessFile Handle hoXml String sFile
37046>>>                Integer  iOK i iMax
37046>>>                String   sHome sAuthor sTrackName
37046>>>                Handle   hoDoc hoElem1 hoElem2 hoElem3 hoElem4
37046>>>                
37046>>>                Get DocumentElement of hoXml to hoDoc
37047>>>                If not hoDoc ;                    Procedure_Return
37050>>>                
37050>>>                Move "" to sAuthor
37051>>>                
37051>>>                Get FirstChild of hoDoc to hoElem1
37052>>>                
37052>>>                // ToDo: Need to destroy any hoXML elements when breaking out!!!
37052>>>                While hoElem1
37056>>>                    
37056>>>                    If (sAuthor = "") Begin
37058>>>                    
37058>>>                        If (psNodeName(hoElem1) = "metadata") Begin
37060>>>                            Get FirstChild of hoElem1 to hoElem2
37061>>>                            
37061>>>                            While hoElem2
37065>>>                                    
37065>>>                                If (psNodeName(hoElem2) = "author") Begin
37067>>>                                    Get FirstChild of hoElem2 to hoElem3
37068>>>                                    
37068>>>                                    While hoElem3
37072>>>                                        
37072>>>                                        If (psNodeName(hoElem3) = "name") ;                                            Move (psText(hoElem3)) to sAuthor
37075>>>                                        
37075>>>                                        If (sAuthor <> "") ;                                            Send Destroy of hoElem3
37078>>>                                        If (sAuthor <> "") ;                                            Break
37081>>>                                            
37081>>>                                        If (psNodeName(hoElem3) = "link") Begin
37083>>>                                            Get FirstChild of hoElem3 to hoElem4
37084>>>                                            
37084>>>                                            While hoElem4
37088>>>                                                If (psNodeName(hoElem4) = "text") ;                                                    Move (psText(hoElem4)) to sAuthor
37091>>>                                                
37091>>>                                                If (sAuthor <> "") ;                                                    Send Destroy of hoElem4
37094>>>                                                If (sAuthor <> "") ;                                                    Break
37097>>>                                                    
37097>>>                                                Get NextNode of hoElem4 to hoElem4
37098>>>                                            Loop
37099>>>>
37099>>>                                            
37099>>>                                        End
37099>>>>
37099>>>                                        
37099>>>                                        If (sAuthor <> "") ;                                            Send Destroy of hoElem3
37102>>>                                        If (sAuthor <> "") ;                                            Break
37105>>>                                        
37105>>>                                        Get NextNode of hoElem3 to hoElem3
37106>>>                                    Loop
37107>>>>
37107>>>                                    
37107>>>                                End
37107>>>>
37107>>>                                
37107>>>                                If (sAuthor <> "") ;                                    Send Destroy of hoElem2
37110>>>                                If (sAuthor <> "") ;                                    Break 
37113>>>                                
37113>>>                                Get NextNode of hoElem2 to hoElem2
37114>>>                            Loop
37115>>>>
37115>>>                            
37115>>>                        End
37115>>>>
37115>>>                    
37115>>>                        If (psNodeName(hoElem1) = "wpt") Begin
37117>>>                            Get FirstChild of hoElem1 to hoElem2
37118>>>                            
37118>>>                            While hoElem2
37122>>>                                
37122>>>                                If (psNodeName(hoElem2) = "sym") Begin
37124>>>                                    Move (psText(hoElem2)) to sAuthor
37125>>>                                End
37125>>>>
37125>>>                                
37125>>>                                If (sAuthor <> "") ;                                    Send Destroy of hoElem2
37128>>>                                If (sAuthor <> "") ;                                    Break 
37131>>>                                
37131>>>                                Get NextNode of hoElem2 to hoElem2
37132>>>                            Loop
37133>>>>
37133>>>                            
37133>>>                        End
37133>>>>
37133>>>                        
37133>>>                    End
37133>>>>
37133>>>                    
37133>>>                    // Fallback option
37133>>>                    If (sAuthor = "") ;                        Get AttributeValue of hoDoc "creator" to sAuthor
37136>>>
37136>>>                    If (psNodeName(hoElem1) = "trk") Begin
37138>>>                        Get FirstChild of hoElem1 to hoElem2
37139>>>                        
37139>>>                        While hoElem2
37143>>>                            
37143>>>                            // Add the track If it has a name:
37143>>>                            If (psNodeName(hoElem2) = "name") Begin
37145>>>                                Send AddComboItem ;                                    sFile ;                                    (psText(hoElem2) * If((sAuthor = ""), "", "(" + sAuthor + ")") * - "-" * sFile)
37146>>>                                Send Destroy of hoElem2
37147>>>                                Send Destroy of hoElem1
37148>>>                                Send Destroy of hoDoc
37149>>>                                Procedure_Return
37150>>>                            End
37150>>>>
37150>>>                            
37150>>>                            Get NextNode of hoElem2 to hoElem2
37151>>>                        Loop
37152>>>>
37152>>>                        
37152>>>                        // Add the track If it has no name:
37152>>>                        Send AddComboItem ;                            sFile ;                            (sFile * If((sAuthor = ""), "", "(" + sAuthor + ")") * - "-" * sFile)
37153>>>                        Send Destroy of hoElem1
37154>>>                        Send Destroy of hoDoc
37155>>>                        Procedure_Return
37156>>>                    End                        
37156>>>>
37156>>>                    
37156>>>                    Get NextNode of hoElem1 to hoElem1
37157>>>                Loop
37158>>>>
37158>>>                
37158>>>                Send Destroy of hoDoc
37159>>>            End_Procedure
37160>>>            
37160>>>            Procedure OnFill
37163>>>                Integer  iChn i iMax iOK
37163>>>                String   sHome                
37163>>>                String[] asPaths
37164>>>                Handle   hoXml
37164>>>                
37164>>>                // Find all .gpx files in Paths dir:
37164>>>                Get Seq_New_Channel to iChn
37165>>>                Move (psHome(phoWorkspace(ghoApplication))) to sHome
37166>>>                
37166>>>                Direct_Input channel iChn ("dir:" * sHome + "Paths\*.gpx")
37168>>>                
37168>>>                While not (SeqEof)
37172>>>                    Readln asPaths[i]
37173>>>                    Increment i
37174>>>                Loop
37175>>>>
37175>>>                
37175>>>                Close_Input channel iChn
37177>>>                Send Seq_Release_Channel iChn
37178>>>                
37178>>>                // For each file, try to find the name of the path and the author
37178>>>                Move (SizeOfArray(asPaths) - 1) to iMax
37179>>>                
37179>>>                For i from 0 to iMax
37185>>>>
37185>>>                    Get Create (RefClass(cXMLDOMDocument)) to hoXml
37186>>>                    Set psDocumentName of hoXml to (sHome + "Paths\" + asPaths[i])
37187>>>                    Get LoadXMLDocument of hoXml to iOK
37188>>>                    If iOK ;                        Send ProcessFile hoXml asPaths[i]
37191>>>                    Send Destroy of hoXml
37192>>>                Loop
37193>>>>
37193>>>                
37193>>>            End_Procedure
37194>>>
37194>>>        End_Object
37195>>>
37195>>>        Object oLoadTrace is a cWebButton
37197>>>            Set piColumnSpan to 1
37198>>>            Set piColumnIndex to 5
37199>>>            Set psCaption to "Map trace"
37200>>>        
37200>>>            Procedure OnClick
37203>>>                String  sFile sBase sContrib sText
37203>>>                Handle  hoXML hoDoc hoTrack hoSeg hoPoint
37203>>>                Boolean bOK bMark
37203>>>                Integer i iPos
37203>>>                stPolyline tLine
37203>>>                stPolyline tLine
37203>>>                stPolylines tEmpty
37203>>>                stPolylines tEmpty
37203>>>                
37203>>>                WebSet ptPolylines of oMap to tEmpty
37204>>>                
37204>>>                Move (psHome(phoWorkspace(ghoApplication)) + "Paths\") to sBase
37205>>>                
37205>>>                WebGet psValue of oTraces to sFile
37208>>>                
37208>>>                Move (sBase + sFile) to sFile
37209>>>                Move 0 to i
37210>>>                
37210>>>                Get Create (RefClass(cXMLDOMDocument)) to hoXML
37211>>>                Set psDocumentName of hoXML to sFile
37212>>>                Get LoadXMLDocument of hoXML to bOK
37213>>>                
37213>>>                If not bOK Begin
37215>>>                    Send ShowInfoBox "Could not load path XML" "Load error"
37216>>>                    Procedure_Return
37217>>>                End
37217>>>>
37217>>>                
37217>>>                Get DocumentElement of hoXML to hoDoc
37218>>>                
37218>>>                If not hoDoc ;                    Procedure_Return
37221>>>                    
37221>>>                Get FirstChild of hoDoc to hoTrack
37222>>>                
37222>>>                If not hoTrack ;                    Procedure_Return
37225>>>                    
37225>>>                While hoTrack
37229>>>                    If (psNodeName(hoTrack) = "trk") ;                        Break
37232>>>                    Get NextSibling of hoTrack to hoTrack
37233>>>                Loop
37234>>>>
37234>>>                
37234>>>                Get FirstChild of hoTrack to hoSeg
37235>>>                
37235>>>                If not hoSeg ;                    Procedure_Return
37238>>>                    
37238>>>                While hoSeg
37242>>>                    
37242>>>                    If (psNodeName(hoSeg) = "name") ;                        Move (psText(hoSeg)) to sText
37245>>>                    
37245>>>                    If (psNodeName(hoSeg) = "trkseg") Begin
37247>>>                        Get FirstChild of hoSeg to hoPoint
37248>>>                        
37248>>>                        While hoPoint
37252>>>                            
37252>>>                            If (psNodeName(hoPoint) = "trkpt") Begin
37254>>>                                Get AttributeValue of hoPoint "lat" to tLine.aPoints[i][0]
37255>>>                                Get AttributeValue of hoPoint "lon" to tLine.aPoints[i][1]
37256>>>                                Increment i
37257>>>                            End
37257>>>>
37257>>>                            
37257>>>                            Get NextSibling of hoPoint to hoPoint
37258>>>                        Loop
37259>>>>
37259>>>
37259>>>                    End
37259>>>>
37259>>>
37259>>>                    Get NextSibling of hoSeg to hoSeg
37260>>>                Loop
37261>>>>
37261>>>                
37261>>>                Send Destroy of hoTrack
37262>>>                Send Destroy of hoDoc
37263>>>                Send Destroy of hoXml
37264>>>                
37264>>>                If (sText = "") ;                    Move sFile to sText
37267>>>                
37267>>>                Move (Config("defaults.polyline.lineColor"))    to tLine.sLineColor
37268>>>                Move (Config("defaults.polyline.lineWeight"))   to tLine.iLineWeight
37269>>>                Move (Config("defaults.polyline.lineOpacity"))  to tLine.nOpacity
37270>>>                Move True                                       to tLine.bFitMap
37271>>>                Move sText                                      to tLine.sText
37272>>>                Move True                                       to tLine.bStroke
37273>>>
37273>>>                Send GeoContributor of oMap sContrib "" (If((sContrib <> ""), "Path", "")) False
37274>>>                Send DrawMap of oMap tLine.aPoints[0][0] tLine.aPoints[0][1] 12 22
37275>>>                
37275>>>                If (GetChecked(oMarkStart(Self))) ;                    Send DrawMarker of oMap tLine.aPoints[0][0] tLine.aPoints[0][1] (Trim(sText * "Start")) "" False
37278>>>    
37278>>>                Send DrawPolyLine of oMap tLine
37279>>>            End_Procedure
37280>>>            
37280>>>        End_Object
37281>>>
37281>>>        Object oMarkStart is a cWebCheckbox
37283>>>            Set piColumnSpan to 2
37284>>>            Set piColumnIndex to 6
37285>>>            Set psCaption to "Show marker at start"
37286>>>        End_Object
37287>>>
37287>>>        Object oResolution is a cWebCombo
37289>>>            Set piColumnIndex to 8
37290>>>            Set piColumnSpan to 2
37291>>>            Set psLabel to "Res:"
37292>>>            Set peLabelAlign to alignRight
37293>>>            Set piLabelOffset to 60
37294>>>            Set psValue to "256"
37295>>>            
37295>>>            Procedure OnFill
37298>>>                Send AddComboItem "256"  "256"
37299>>>                Send AddComboItem "512"  "512"
37300>>>                Send AddComboItem "1024" "1024"
37301>>>            End_Procedure
37302>>>            
37302>>>            Set pbServerOnChange to True
37303>>>            Procedure OnChange String sNewValue String sOldValue
37306>>>                WebSet psTileSize     of oMap to sNewValue
37307>>>                Send ChangeResolution of oMap    sNewValue
37308>>>            End_Procedure
37309>>>
37309>>>        End_Object
37310>>>    
37310>>>        Object oMapLayer is a cWebCombo
37312>>>            Set piColumnIndex to 10
37313>>>            Set piColumnSpan to 2
37314>>>            Set psLabel to "View:"
37315>>>            Set peLabelAlign to alignRight
37316>>>            Set piLabelOffset to 60
37317>>>            Set psValue to "Map view"
37318>>>            
37318>>>            Procedure OnFill
37321>>>                    Send AddComboItem "mapbox/streets-v11"              "Streets view"
37322>>>                    Send AddComboItem "mapbox/outdoors-v11"             "Outdoors view"
37323>>>                    Send AddComboItem "mapbox/light-v10"                "Light view"
37324>>>                    Send AddComboItem "mapbox/dark-v10"                 "Dark view"
37325>>>                    Send AddComboItem "mapbox/satellite-v9"             "Satellite view"
37326>>>                    Send AddComboItem "mapbox/satellite-streets-v11"    "Satellite Streets view"
37327>>>                    Send AddComboItem "mapbox/navigation-day-v1"        "Navigation view (day)"
37328>>>                    Send AddComboItem "mapbox/navigation-night-v1"      "Navigation view (night)"
37329>>>            End_Procedure
37330>>>            
37330>>>            Set pbServerOnChange to True
37331>>>            Procedure OnChange String sNewValue String sOldValue
37334>>>                WebSet psLayerID of oMap to sNewValue
37335>>>                Send ChangeLayer of oMap    sNewValue
37336>>>            End_Procedure
37337>>>            
37337>>>        End_Object
37338>>>
37338>>>        Object oWebSpacer1 is a cWebSpacer
37340>>>        End_Object
37341>>>        
37341>>>        Object oMap is a cLeafletMappingControl
37343>>>        End_Object
37344>>>
37344>>>    End_Object 
37345>>>
37345>>>End_Object
37346>    Use Countries.wo
Including file: Countries.wo    (C:\Projects\LeafletTest\AppSrc\Countries.wo)
37346>>>Use cWebView.pkg
37346>>>Use cWebPanel.pkg
37346>>>Use cWebForm.pkg
37346>>>Use seq_chnl.pkg
37346>>>Use cJsonPath.pkg
37346>>>
37346>>>Use cLeafletMappingControl.pkg
37346>>>Use cWebCombo.pkg
37346>>>Use cWebButton.pkg
37346>>>Use cWebSpacer.pkg
37346>>>
37346>>>Object oCountries is a cWebView
37348>>>    Set psCaption to "Countries Sample"
37349>>>    
37349>>>    Property Handle     phoCountriesData
37351>>>    Property String[]   pasCountryNames
37353>>>    Property Integer[]  paiCountryIndexes
37355>>>    
37355>>>    Object oJPath is a cJsonPath
37357>>>    End_Object
37358>>>
37358>>>    Procedure LoadData
37361>>>        UChar[]  ucaData
37362>>>        Integer  iChn iMax i
37362>>>        String   sHome sName sISO_A3
37362>>>        String[] asNames
37363>>>        Handle   hoJson hoFeatures hoFeature
37363>>>        Boolean  bOK
37363>>>        
37363>>>        Move (psHome(phoWorkspace(ghoApplication))) to sHome
37364>>>        Get Seq_New_Channel to iChn
37365>>>        Direct_Input channel iChn (sHome + "countries.geojson")
37367>>>        
37367>>>        If (SeqEof) Begin
37369>>>            Close_Input channel iChn
37371>>>            Send Seq_Release_Channel iChn
37372>>>            Procedure_Return
37373>>>        End
37373>>>>
37373>>>
37373>>>        // Read in file
37373>>>        Read_Block channel iChn ucaData -1
37375>>>        Close_Input channel iChn
37377>>>        Send Seq_Release_Channel iChn
37378>>>        
37378>>>        Get Create (RefClass(cJsonObject)) to hoJson
37379>>>        Get ParseUtf8 of hoJson ucaData to bOK
37380>>>
37380>>>        If bOK ;            Set phoCountriesData to hoJson
37383>>>        Else Begin
37384>>>            Send Destroy of hoJson
37385>>>            Procedure_Return
37386>>>        End
37386>>>>
37386>>>
37386>>>        Move (JsonAtPath(oJPath, hoJson, "features")) to hoFeatures
37387>>>        Move (MemberCount(hoFeatures)) to iMax
37388>>>        Decrement iMax
37389>>>        
37389>>>        For i from 0 to iMax
37395>>>>
37395>>>            Get MemberByIndex of hoFeatures i to hoFeature
37396>>>            Move (ValueAtPath(oJPath, hoFeature, "properties.ADMIN"))   to sName
37397>>>            Move (ValueAtPath(oJPath, hoFeature, "properties.ISO_A3"))  to sISO_A3
37398>>>            Move (sName * "(" + sISO_A3 + ")") to asNames[i]
37399>>>            Send Destroy of hoFeature
37400>>>        Loop
37401>>>>
37401>>>        
37401>>>        Set pasCountryNames to asNames
37402>>>        Send Destroy of hoFeatures
37403>>>    End_Procedure
37404>>>    
37404>>>    Procedure End_Construct_Object
37407>>>        Send LoadData
37408>>>        
37408>>>        Forward Send End_Construct_Object
37410>>>    End_Procedure
37411>>>    
37411>>>    Function PolygonFromData Handle hoJson Returns stPolygon
37414>>>        stPolygon tPoly
37414>>>        stPolygon tPoly
37414>>>        Integer   i iMax
37414>>>        
37414>>>        Get JsonToDataType of hoJson to tPoly.aPoints
37415>>>        Move (SizeOfArray(tPoly.aPoints) - 1) to iMax
37416>>>        
37416>>>        // Lat/Lng are reveresed in this data, so...
37416>>>        For i from 0 to iMax
37422>>>>
37422>>>            Move (ReverseArray(tPoly.aPoints[i])) to tPoly.aPoints[i]
37423>>>        Loop
37424>>>>
37424>>>
37424>>>        Move (Config("defaults.polygon.lineColor"))     to tPoly.sLineColor
37425>>>        Move (Config("defaults.polygon.lineWeight"))    to tPoly.iLineWeight
37426>>>        Move (Config("defaults.polygon.lineOpacity"))   to tPoly.nLineOpacity
37427>>>        Move (Config("defaults.polygon.fillColor"))     to tPoly.sFillColor
37428>>>        Move (Config("defaults.polygon.fillOpacity"))   to tPoly.nFillOpacity
37429>>>        Move True                                       to tPoly.bStroke                    
37430>>>        
37430>>>        Send Destroy of hoJson
37431>>>        Function_Return tPoly
37432>>>    End_Function
37433>>>    
37433>>>    Procedure PlotMap
37436>>>        Integer     iIdx iMaxSet iPoly iSubSets i j iMaxPoint
37436>>>        Handle      hoData hoCoords hoSet hoPoint hoSubPt hoSubSet
37436>>>        stPolygon[] atPolys
37436>>>        stPolygon[] atPolys
37437>>>        stPolygon   tPoly
37437>>>        stPolygon   tPoly
37437>>>        stPolygons  tEmptyPolys
37437>>>        stPolygons  tEmptyPolys
37437>>>        Boolean     bFitBounds
37437>>>        Number      nMinN nMinE nMaxN nMaxE
37437>>>        
37437>>>        Move  100 to nMinN
37438>>>        Move  200 to nMinE
37439>>>        Move -100 to nMaxN
37440>>>        Move -200 to nMaxE
37441>>>        
37441>>>        WebSet ptPolygons of oMap to tEmptyPolys  // Clear the polygons
37442>>>        
37442>>>        // Get the appropriate country data from the JSON:
37442>>>        WebGet psValue of oCountrySel to iIdx
37445>>>        Get phoCountriesData of oCountries to hoData
37446>>>        Move (JsonAtPath(oJPath, hoData, "features.[" + String(iIdx) + "].geometry.coordinates")) to hoCoords
37447>>>        
37447>>>        If not hoCoords ;            Procedure_Return
37450>>>        
37450>>>        Get MemberCount of hoCoords to iMaxSet
37451>>>        Decrement iMaxSet
37452>>>        Move 0 to iPoly
37453>>>        
37453>>>        // Iterate through sets of points
37453>>>        For i from 0 to iMaxSet
37459>>>>
37459>>>            Get MemberByIndex of hoCoords i to hoSet
37460>>>            
37460>>>            Get MemberCount of hoSet to iSubSets
37461>>>            
37461>>>            // If no contents, quit:
37461>>>            If not iSubSets ;                Procedure_Return
37464>>>            
37464>>>            // Now check to see if hoSet is actually a set of points
37464>>>            Get MemberByIndex of hoSet 0 to hoPoint
37465>>>            
37465>>>            // Ensure it is an array:
37465>>>            If (JsonType(hoPoint) <> jsonTypeArray) ;                Procedure_Return
37468>>>            
37468>>>            Get MemberByIndex of hoPoint 0 to hoSubPt
37469>>>            
37469>>>            If (JsonType(hoSubPt) = jsonTypeDouble) Begin  // hoSet *is* a set of points
37471>>>                Send Destroy of hoSubPt  // Lose this
37472>>>                Send Destroy of hoPoint  // and this
37473>>>                
37473>>>                Get PolygonFromData hoSet to tPoly
37474>>>                
37474>>>                If (iPoly = 0) ;                    Move True to tPoly.bFitMap
37477>>>                    
37477>>>                Move tPoly to atPolys[iPoly]
37478>>>                Increment iPoly
37479>>>            End
37479>>>>
37479>>>            Else Begin  // hoSet is *not* just a set of points
37480>>>                Send Destroy of hoSubPt  // Lose this
37481>>>                Send Destroy of hoPoint  // and this
37482>>>
37482>>>                Decrement iSubSets  // MemberCount of hoSets
37483>>>                Move True to bFitBounds
37484>>>                
37484>>>                For j from 0 to iSubSets
37490>>>>
37490>>>                    Get MemberByIndex of hoSet j to hoSubSet
37491>>>                    
37491>>>                    Get PolygonFromData hoSubSet to tPoly
37492>>>                    
37492>>>                    Move tPoly to atPolys[iPoly]
37493>>>                    Increment iPoly
37494>>>                Loop
37495>>>>
37495>>>                
37495>>>            End
37495>>>>
37495>>>            
37495>>>        Loop
37496>>>>
37496>>>        
37496>>>        Send GeoContributor of oMap "DataHub" "https://datahub.io/" "Countries GeoJson" False
37497>>>        Send DrawMap of oMap atPolys[0].aPoints[0][0] atPolys[0].aPoints[0][1] 8 22
37498>>>
37498>>>        Move (SizeOfArray(atPolys) - 1) to iMaxSet
37499>>>        
37499>>>        For iPoly from 0 to iMaxSet
37505>>>>
37505>>>            
37505>>>            If bFitBounds Begin
37507>>>                Move (SizeOfArray(atPolys[iPoly].aPoints) - 1) to iMaxPoint
37508>>>            
37508>>>                For i from 0 to iMaxPoint
37514>>>>
37514>>>                    Move (nMinN min atPolys[iPoly].aPoints[i][0]) to nMinN
37515>>>                    Move (nMinE min atPolys[iPoly].aPoints[i][1]) to nMinE
37516>>>                    Move (nMaxN max atPolys[iPoly].aPoints[i][0]) to nMaxN
37517>>>                    Move (nMaxE max atPolys[iPoly].aPoints[i][1]) to nMaxE
37518>>>                Loop
37519>>>>
37519>>>            
37519>>>            End
37519>>>>
37519>>>            
37519>>>            Send DrawPolygon of oMap atPolys[iPoly]
37520>>>        Loop
37521>>>>
37521>>>        
37521>>>        If bFitBounds ;            Send FitBounds of oMap nMinN nMinE nMaxN nMaxE
37524>>>    End_Procedure
37525>>>
37525>>>    Object oWebMainPanel is a cWebPanel
37527>>>        Set piColumnCount to 12
37528>>>
37528>>>        Object oCountrySel is a cWebCombo
37530>>>            Set piColumnSpan to 4
37531>>>            Set psLabel to "Select Country"
37532>>>            Set peLabelAlign to alignRight
37533>>>            
37533>>>            Procedure OnFill
37536>>>                String[] asNames
37537>>>                Integer  i iMax
37537>>>                
37537>>>                Get pasCountryNames of oCountries to asNames
37538>>>                Move (SizeOfArray(asNames) - 1) to iMax
37539>>>                
37539>>>                For i from 0 to iMax
37545>>>>
37545>>>                    Send AddComboItem i asNames[i]
37546>>>                Loop                
37547>>>>
37547>>>                
37547>>>            End_Procedure
37548>>>            
37548>>>            Set pbServerOnShow to True
37549>>>            Procedure OnShow
37552>>>                String[] asNames
37553>>>                
37553>>>                Get pasCountryNames to asNames
37554>>>                WebSet psValue to asNames[0]
37555>>>            End_Procedure
37556>>>            
37556>>>        End_Object
37557>>>
37557>>>        Object oDoMap is a cWebButton
37559>>>            Set piColumnSpan to 1
37560>>>            Set piColumnIndex to 4
37561>>>            Set psCaption to "Draw Map"
37562>>>        
37562>>>            Procedure OnClick
37565>>>                Send PlotMap
37566>>>            End_Procedure
37567>>>            
37567>>>        End_Object
37568>>>        
37568>>>        Object oResolution is a cWebCombo
37570>>>            Set piColumnIndex to 8
37571>>>            Set piColumnSpan to 2
37572>>>            Set psLabel to "Res:"
37573>>>            Set peLabelAlign to alignRight
37574>>>            Set piLabelOffset to 60
37575>>>            Set psValue to "256"
37576>>>            
37576>>>            Procedure OnFill
37579>>>                Send AddComboItem "256"  "256"
37580>>>                Send AddComboItem "512"  "512"
37581>>>                Send AddComboItem "1024" "1024"
37582>>>            End_Procedure
37583>>>            
37583>>>            Set pbServerOnChange to True
37584>>>            Procedure OnChange String sNewValue String sOldValue
37587>>>                WebSet psTileSize     of oMap to sNewValue
37588>>>                Send ChangeResolution of oMap    sNewValue
37589>>>            End_Procedure
37590>>>
37590>>>        End_Object
37591>>>    
37591>>>        Object oMapLayer is a cWebCombo
37593>>>            Set piColumnIndex to 10
37594>>>            Set piColumnSpan to 2
37595>>>            Set psLabel to "View:"
37596>>>            Set peLabelAlign to alignRight
37597>>>            Set piLabelOffset to 60
37598>>>            Set psValue to "Map view"
37599>>>            
37599>>>            Procedure OnFill
37602>>>                    Send AddComboItem "mapbox/streets-v11"              "Streets view"
37603>>>                    Send AddComboItem "mapbox/outdoors-v11"             "Outdoors view"
37604>>>                    Send AddComboItem "mapbox/light-v10"                "Light view"
37605>>>                    Send AddComboItem "mapbox/dark-v10"                 "Dark view"
37606>>>                    Send AddComboItem "mapbox/satellite-v9"             "Satellite view"
37607>>>                    Send AddComboItem "mapbox/satellite-streets-v11"    "Satellite Streets view"
37608>>>                    Send AddComboItem "mapbox/navigation-day-v1"        "Navigation view (day)"
37609>>>                    Send AddComboItem "mapbox/navigation-night-v1"      "Navigation view (night)"
37610>>>            End_Procedure
37611>>>            
37611>>>            Set pbServerOnChange to True
37612>>>            Procedure OnChange String sNewValue String sOldValue
37615>>>                WebSet psLayerID of oMap to sNewValue
37616>>>                Send ChangeLayer of oMap    sNewValue
37617>>>            End_Procedure
37618>>>            
37618>>>        End_Object
37619>>>
37619>>>        Object oWebSpacer1 is a cWebSpacer
37621>>>        End_Object
37622>>>        
37622>>>        Object oMap is a cLeafletMappingControl
37624>>>        End_Object
37625>>>        
37625>>>    End_Object
37626>>>    
37626>>>End_Object
37627>    
37627>End_Object
37628>
37628>Send StartWebApp of oWebApp
37629>
Summary
Memory Available: 11368308736
Total Warnings : 0
Total Errors   : 0
Total Symbols  : 24022
Total Resources: 0
Total Commands : 37628
Total Windows  : 0
Total Pages    : 0
Static Data    : 498781
Message area   : 261785
Total Blocks   : 16906
