Compiling Program: C:\Projects\LeafletTest\AppSrc\WebApp.src
Memory Available: 18673696768
1>Use AllWebAppClasses.pkg
Using pre-compiled package ALLWEBAPPCLASSES.PKG
Including file: AllWebAppClasses.x64.pkd    (C:\Program Files\DataFlex 20.1\Pkg\AllWebAppClasses.x64.pkd)
34659>Use cConnection.pkg
34659>Use cWebMenuItemLoadView.pkg
34659>
34659>Object oApplication is a cApplication
34661>    Object oConnection is a cConnection
34663>        Use LoginEncryption.pkg
Including file: LoginEncryption.pkg    (C:\Program Files\DataFlex 20.1\Pkg\LoginEncryption.pkg)
34663>>>Use cLoginEncryption.pkg
Including file: cLoginEncryption.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cLoginEncryption.pkg)
34663>>>>>Use cCryptographerEx.pkg
34663>>>>>
34663>>>>>Class cLoginEncryption is a cObject
34664>>>>>    
34664>>>>>    Procedure Construct_Object
34666>>>>>        Forward Send Construct_Object
34668>>>>>        // this must be set to a multi (40ish) character random key
34668>>>>>        Property String psEncryptPassword ""
34669>>>>>        
34669>>>>>        Object oDataCrypter is a cCryptographerEx
34671>>>>>            Set piHash to CALG_SHA_256
34672>>>>>            Set piCipher to CALG_AES_256
34673>>>>>            Set psProvider to "" //  Not providing a specific provider gives the default provider for the provider type
34674>>>>>            Set piProvider to PROV_RSA_AES
34675>>>>>        End_Object
34676>>>>>    End_Procedure
34677>>>>>    
34677>>>>>    // This can be augmented to return a password encryption key using any
34677>>>>>    // hidden mechanism desired.
34677>>>>>    Function GetEncryptionPassword Returns String
34679>>>>>        String sPassword
34679>>>>>        Get psEncryptPassword to sPassword
34680>>>>>        Function_Return sPassword
34681>>>>>    End_Function
34682>>>>>    
34682>>>>>    // Encrypts a string into an unreadable hash that can later be decrypted using DecryptKey.
34682>>>>>    //
34682>>>>>    // Params:
34682>>>>>    //   sPlainText     String to encrypt.
34682>>>>>    // Returns:
34682>>>>>    //   Base64 encoded hash.
34682>>>>>    Function EncryptPassword String sPlainText Returns String
34684>>>>>        String sEncryptPassword sBase64
34684>>>>>        UChar[] ucBinary
34685>>>>>        Pointer pBase64
34685>>>>>        Integer iVoid
34685>>>>>        
34685>>>>>        //  Encrypt Key
34685>>>>>        Get GetEncryptionPassword to sEncryptPassword
34686>>>>>        If (sEncryptPassword = "") Begin
34688>>>>>            Error DFERR_PROGRAM "No encryption password set"
34689>>>>>>
34689>>>>>        End
34689>>>>>>
34689>>>>>        
34689>>>>>        Get Encrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) (StringToUCharArray(sPlainText)) to ucBinary
34690>>>>>        
34690>>>>>        If (SizeOfArray(ucBinary) = 0) Begin
34692>>>>>            Error DFERR_PROGRAM "Unable to encrypt database login password"
34693>>>>>>
34693>>>>>            Function_Return ""
34694>>>>>        End
34694>>>>>>
34694>>>>>        
34694>>>>>        //  Encode binary hash to Base64
34694>>>>>        Move (Base64Encode(AddressOf(ucBinary), SizeOfArray(ucBinary))) to pBase64
34695>>>>>        Move (PointerToString(pBase64)) to sBase64
34696>>>>>        Move (Free(pBase64)) to iVoid
34697>>>>>        
34697>>>>>        Function_Return sBase64
34698>>>>>    End_Function
34699>>>>>    
34699>>>>>    
34699>>>>>    // Decrypts the unreadable hash generated by EncryptKey into a readable string.
34699>>>>>    //
34699>>>>>    // Params:
34699>>>>>    //   sBase64EncryptedPassword       Base64 Encrypted password
34699>>>>>    // Returns:
34699>>>>>    //   Readable plain text password
34699>>>>>    Function DecryptPassword String sBase64EncryptedPassword Returns String
34701>>>>>        String sEncryptPassword
34701>>>>>        UChar[] ucBinary ucPlain
34703>>>>>        Boolean bIsHex
34703>>>>>        Integer iLen iVoid
34703>>>>>        Pointer pBinary
34703>>>>>        
34703>>>>>        If (sBase64EncryptedPassword <> "") Begin
34705>>>>>            //  Decode from Base64
34705>>>>>            Move (Base64Decode(AddressOf(sBase64EncryptedPassword), &iLen)) to pBinary
34706>>>>>            
34706>>>>>            Move (ResizeArray(ucBinary, iLen, 0)) to ucBinary
34707>>>>>            Move (MemCopy(AddressOf(ucBinary), pBinary, iLen)) to iVoid
34708>>>>>                        
34708>>>>>            Move (Free(pBinary)) to iVoid
34709>>>>>            
34709>>>>>            //  Encrypted binary hash to string
34709>>>>>            Get GetEncryptionPassword to sEncryptPassword
34710>>>>>            Get Decrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) ucBinary to ucPlain
34711>>>>>        End
34711>>>>>>
34711>>>>>        
34711>>>>>        Function_Return (UCharArrayToString(ucPlain))
34712>>>>>    End_Function
34713>>>>>End_Class
34714>>>
34714>>>Object oLoginEncryption is a cLoginEncryption
34716>>>
34716>>>    // this must be created in your appsrc directory and must contain an encryption
34716>>>    // key that is set to psEncryptPassword. It will look something like this
34716>>>    //
34716>>>    // Set psEncryptPassword to "JchUAo7W@r.b{<Yk~OONi0nq=sMi[*Rn[A-`Vo)q"
34716>>>    //  
Including file: LoginEncryptionKey.inc    (C:\Projects\LeafletTest\AppSrc\LoginEncryptionKey.inc)
34716>>>>// Studio generated login encryption key
34716>>>>Set psEncryptPassword to "(zeWgswe@|Fpp$QO|<~VYv$44:([sNwe{MtV()?x"
34717>>>>
34717>>>    
34717>>>    // use this to register this object to your cConnection Object. This object
34717>>>    // must be created after the cConnection object
34717>>>    Move Self to ghoLoginEncryption
34718>>>End_Object
34719>    End_Object
34720>End_Object
34721>
34721>Object oWebApp is a cWebApp
34723>    Set psTheme to "DF_Material"
34724>    Set peApplicationStateMode to asmHistoryOnly
34725>    Set peLoginMode to lmLoginNone
34726>    Set psEncryptPassword to "Q7>}w~hmwPZ9#6g^wTyq[zAo>(k.Pvm#ndfiDO34"
34727>    
34727>    Use JsonConfig.pkg
Including file: JsonConfig.pkg    (C:\Projects\LeafletTest\AppSrc\JsonConfig.pkg)
34727>>>//==============================================================================
34727>>>// JsonConfig.pkg
34727>>>//
34727>>>// A singleton object which can read in a JSON configuration file, store it as a
34727>>>// DataFlex Json object, then supply values from it as required.
34727>>>// 
34727>>>// It has a global handle: ghoJsonConfig and then a terse global method for 
34727>>>// getting back the settings: (Config({setting-path})).
34727>>>//
34727>>>// Author:  Mike Peat
34727>>>// Date:    04/02/2020
34727>>>//
34727>>>// Usage:
34727>>>// 
34727>>>//   Load the config file:
34727>>>//     Get LoadConfig of ghoJsonConfig {optional-filename} {optional-path} to bOK
34727>>>//
34727>>>//   If not supplied the default filename is "config.json" and the path is the
34727>>>//   programs directory of your current workspace.  If you pass an empty
34727>>>//   filename then "config.json:" will be used.  There is no requirement for
34727>>>//   filename extension to be ".json" (although that _would_ seem sensible).
34727>>>//
34727>>>//   Reading a setting:
34727>>>//     Move (Config("foo.bar.baz[3].bob")) to nVar  // nVar is now 42
34727>>>//   Or:
34727>>>//     Get Config "foo.bar.baz[3].bob"     to sVar  // sVar is now "42"
34727>>>//
34727>>>//   Which would return the setting in the file from:
34727>>>//      {
34727>>>//          "foo" : {
34727>>>//              "bar" : {
34727>>>//                  "baz" : [
34727>>>//                      66,
34727>>>//                      {
34727>>>//                          "jim" : "jack"
34727>>>//                      },
34727>>>//                      false,
34727>>>//                      {
34727>>>//                          "bob" : 42     <--- This one!
34727>>>//                      },
34727>>>//                      {
34727>>>//                          "kim" : "possible"
34727>>>//                      }
34727>>>//                  ]
34727>>>//              }
34727>>>//          }
34727>>>//      }
34727>>>//
34727>>>// (If "Config" conflicts with anything in your environment you can simply
34727>>>//  change the name of the global function at the bottom of the package.)
34727>>>//
34727>>>// It should handle multi-dimentional arrays (i.e. foo[3][22][6]) and JSON of
34727>>>// arbitrary depth and length.
34727>>>//
34727>>>// Attempts to get settings which are not in the JSON will return empty strings.
34727>>>//
34727>>>// NOTE: JSON is case-sensitive, so your search-strings must exactly match the
34727>>>//       object names ("foo" is *not* "Foo") in the JSON file.
34727>>>//
34727>>>//==============================================================================
34727>>>    Use UI
34727>>>Use seq_chnl.pkg
34727>>>Use cJsonObject.pkg
34727>>>
34727>>>Global_Variable Handle ghoJsonConfig
34727>>>Register_Function ReadSetting String sDefs Handle hoDefs Returns String
34727>>>
34727>>>Define C_jsonConfigDefaultFile for "config.json"
34727>>>
34727>>>Object oJsonConfig is a cObject
34729>>>    Property Handle phoConfig
34731>>>    
34731>>>    Move Self to ghoJsonConfig
34732>>>    
34732>>>    Procedure UserMessage String sMsg String sTitle
34735>>>            Send ShowInfoBox sMsg sTitle
34736>>>    End_Procedure
34737>>>    
34737>>>    Function LoadConfig Returns Boolean
34740>>>        String  sFile sDir sPath sErr
34740>>>        Handle  hoConfig
34740>>>        Integer iArg iChn
34740>>>        UChar[] ucaConfig
34741>>>        Boolean bOK bExists
34741>>>        
34741>>>        // If phoConfig exists, destroy it
34741>>>        Get phoConfig to hoConfig
34742>>>        
34742>>>        If hoConfig Begin
34744>>>            Send Destroy of hoConfig
34745>>>            Set phoConfig to 0
34746>>>        End
34746>>>>
34746>>>        
34746>>>        // The default filename & path
34746>>>        Move C_jsonConfigDefaultFile to sFile
34747>>>        Move (psProgramPath(phoWorkspace(ghoApplication))) to sDir
34748>>>
34748>>>        // Deal with optional filename and path:
34748>>>        If (num_arguments > 0) Begin
34750>>>            Move 1                              to iArg
34751>>>            Move iArg&                          to sFile
34752>>>            If (sFile = "") ;  // use default                Move C_jsonConfigDefaultFile    to sFile
34755>>>            
34755>>>            If (num_arguments > 1) Begin
34757>>>                Move 2                          to iArg
34758>>>                Move iArg&                      to sDir
34759>>>            End
34759>>>>
34759>>>
34759>>>        End
34759>>>>
34759>>>        
34759>>>        // Read the config file
34759>>>        Move (sDir + SysConf(SYSCONF_DIR_SEPARATOR) + sFile) to sPath
34760>>>        
34760>>>        File_Exist sPath bExists
34761>>>        
34761>>>        If not bExists Begin
34763>>>            Send UserMessage ('Config file "' + sPath + '" does not exist') 'File Error'
34764>>>            Function_Return False
34765>>>        End
34765>>>>
34765>>>        
34765>>>        Get Seq_New_Channel   to iChn
34766>>>        Direct_Input     channel iChn sPath
34768>>>        Read_Block       channel iChn ucaConfig -1
34770>>>        Close_Input      channel iChn
34772>>>        Send Seq_Release_Channel iChn
34773>>>        
34773>>>        If (SizeOfArray(ucaConfig) < 7) Begin  // About the minimum: {"x":y}
34775>>>            Send UserMessage ('Configuration file "' + sPath * '" was missing or did not contain data') 'Config Error'
34776>>>            Function_Return False
34777>>>        End
34777>>>>
34777>>>        
34777>>>        // Turn that into JSON
34777>>>        Get Create (RefClass(cJsonObject))  to hoConfig
34778>>>        Get ParseUtf8 of hoConfig ucaConfig to bOK
34779>>>        
34779>>>        If not bOK Begin
34781>>>            Get psParseError of hoConfig to sErr
34782>>>            Send Destroy of hoConfig
34783>>>            Send UserMessage ('Configuration file "' + sPath + '" was not valid JSON -' * sErr) 'Config Error'
34784>>>            Function_Return False
34785>>>        End
34785>>>>
34785>>>        
34785>>>        Set phoConfig to hoConfig
34786>>>        Function_Return True
34787>>>    End_Function
34788>>>    
34788>>>    Function ReadArray String sDefs Handle hoDefs Returns String
34791>>>        Integer iLSBPos iRSBPos iIndex
34791>>>        Handle  hoMemb
34791>>>        String  sVal
34791>>>        
34791>>>        If ((not(hoDefs) or ;            (sDefs = ""))) ;            Function_Return ""
34794>>>        
34794>>>        Move (Pos("[", sDefs)) to iLSBPos
34795>>>        Move (Pos("]", sDefs)) to iRSBPos
34796>>>        
34796>>>        If (not(iLSBPos) or ;            not(iRSBPos) or ;            (iLSBPos > iRSBPos) or ;            (iLSBPos <> 1)) ;            Function_Return ""
34799>>>        
34799>>>        Move (Mid(sDefs, (iRSBPos - iLSBPos - 1), (iLSBPos + 1))) to iIndex
34800>>>        
34800>>>        If (MemberCount(hoDefs) <= iIndex) ;            Function_Return ""
34803>>>        
34803>>>        Get MemberByIndex of hoDefs iIndex to hoMemb
34804>>>
34804>>>        If (Length(Trim(sDefs)) = iRSBPos) Begin // It ends here
34806>>>            Get JsonValue of hoMemb to sVal
34807>>>            Send Destroy of hoMemb
34808>>>            Function_Return sVal
34809>>>        End
34809>>>>
34809>>>
34809>>>        Move (Right(sDefs, (Length(sDefs) - iRSBPos))) to sDefs
34810>>>        If (Left(sDefs, 1) = ".") ;            Move (Replace(".", sDefs, "")) to sDefs
34813>>>        Get ReadSetting sDefs hoMemb to sVal
34814>>>        Send Destroy of hoMemb
34815>>>        Function_Return sVal
34816>>>    End_Function
34817>>>    
34817>>>    Function ReadSetting String sDefs Handle hoDefs Returns String
34820>>>        Integer iLSBPos iDotPos iPos
34820>>>        String  sMemb sVal
34820>>>        Handle  hoMemb
34820>>>
34820>>>        If ((not(hoDefs) or ;            (sDefs = ""))) ;            Function_Return ""
34823>>>            
34823>>>        If (Left(sDefs, 1) = "[") ;            Function_Return (ReadArray(Self, sDefs, hoDefs))
34826>>>        
34826>>>        Move (Pos(".", sDefs))      to iDotPos
34827>>>        Move (Pos("[", sDefs))      to iLSBPos
34828>>>        
34828>>>        If (iLSBPos and iDotPos) ;            Move (iDotPos min iLSBPos)  to iPos
34831>>>        Else If (iDotPos) ;            Move iDotPos                to iPos
34835>>>        Else ;            Move iLSBPos                to iPos
34837>>>        
34837>>>        If not iPos Begin  // We are there!
34839>>>            
34839>>>            If (HasMember(hoDefs, sDefs)) ;                Function_Return (MemberValue(hoDefs, sDefs))
34842>>>            Else ;                Function_Return ""
34844>>>        
34844>>>        End
34844>>>>
34844>>>        
34844>>>        Move (Left(sDefs, (iPos - 1)))    to sMemb
34845>>>        
34845>>>        If (HasMember(hoDefs, sMemb)) Begin
34847>>>            Get Member of hoDefs sMemb to hoMemb
34848>>>            Move (Right(sDefs, (Length(sDefs) - iPos + 1))) to sDefs
34849>>>            If (Left(sDefs, 1) = ".") ;                Move (Replace(".", sDefs, "")) to sDefs
34852>>>            Get ReadSetting sDefs hoMemb to sVal
34853>>>            Send Destroy of hoMemb
34854>>>        End
34854>>>>
34854>>>        
34854>>>        Function_Return sVal
34855>>>    End_Function
34856>>>    
34856>>>    Function Setting String sDefs Returns String
34859>>>        Handle hoConfig
34859>>>        
34859>>>        Get phoConfig to hoConfig
34860>>>        
34860>>>        If not hoConfig ;            Function_Return ""
34863>>>        
34863>>>        Function_Return (ReadSetting(Self, sDefs, hoConfig))
34864>>>    End_Function
34865>>>    
34865>>>End_Object
34866>>>
34866>>>// I wanted a terse global function name here, but if "Config" conflicts with
34866>>>// anything in your environment you can simply change it to whatever you want.
34866>>>Function Config Global String sDefs Returns String
34868>>>    Function_Return (Setting(ghoJsonConfig, sDefs))
34869>>>End_Function
34870>
34870>//    Get LoadConfig of ghoJsonConfig to WindowIndex  // Loads setting from Programs/config.json (the default)
34870>    Get LoadConfig of ghoJsonConfig "leafletConfig.json" to WindowIndex  // Loads setting from Programs/leafletConfig.json
34871>
34871>    Object oCommandbar is a cWebCommandBar
34873>        Object oMenuBar is a cWebMenuBar
34875>            Object oFileMenu is a cWebMenuItem
34877>                Set psCaption to C_$File
34878>                
34878>                Object oClearMenuItem is a cWebMenuClear
34880>                End_Object
34881>                             
34881>                Object oClearAllMenuItem is a cWebMenuClearAll
34883>                End_Object  
34884>                
34884>                Object oPromptMenuItem is a cWebMenuPrompt
34886>                    Set pbBeginGroup to True
34887>                End_Object  
34888>                               
34888>                Object oFindMenuItem is a cWebMenuFind
34890>                End_Object  
34891>
34891>                Object oNextMenuItem is a cWebMenuFindNext
34893>                End_Object  
34894>
34894>                Object oPreviousMenuItem is a cWebMenuFindPrevious
34896>                End_Object  
34897>                
34897>                Object oLastMenuItem is a cWebMenuFindLast
34899>                End_Object                
34900>                                
34900>                Object oFirstMenuItem is a cWebMenuFindFirst
34902>                End_Object  
34903>                
34903>                Object oSaveMenuItem is a cWebMenuSave
34905>                    Set pbBeginGroup to True
34906>                End_Object  
34907>                
34907>                Object oDeleteMenuItem is a cWebMenuDelete
34909>                End_Object  
34910>                
34910>                Object oLoginMenuItem is a cWebMenuItem
34912>                    Set psCaption to C_$LogIn
34913>                    Set pbBeginGroup to True
34914>                    Set psCSSClass to "WebLoginMenuItem"
34915>
34915>                    Procedure OnClick
34918>                        Send RequestLogin to ghoWebSessionManager
34919>                    End_Procedure
34920>                    
34920>                    Procedure OnLoad
34923>                        Integer eLoginMode
34923>                        Handle hoLogin
34923>                        Get GetLoginView to hoLogin
34924>                        Get peLoginMode to eLoginMode
34925>                        WebSet pbRender to  (hoLogin and eLoginMode<>lmLoginNone)
34926>                    End_Procedure  // OnLoad
34927>                    
34927>                End_Object  
34928>
34928>                Object oLogoutMenuItem is a cWebMenuItem
34930>                    Set psCaption to C_$LogOut
34931>                    Set psCSSClass to "WebLogoutMenuItem"
34932>
34932>                    Procedure OnClick
34935>                        Send RequestLogOut of ghoWebSessionManager
34936>                    End_Procedure
34937>
34937>                    Procedure OnLoad
34940>                        Integer eLoginMode
34940>                        Handle hoLogin
34940>                        Get GetLoginView to hoLogin
34941>                        Get peLoginMode to eLoginMode
34942>                        WebSet pbRender to  (hoLogin and eLoginMode<>lmLoginNone)
34943>                    End_Procedure
34944>                End_Object  
34945>            End_Object  
34946>    
34946>            Object oViewMenu is a cWebMenuItem
34948>                Set psCaption to C_$View
34949>
34949>                Object oSimpleMapTest1 is a cWebMenuItemLoadView
34951>                    Set psCaption to "Simple Map Test"
34952>                    Set psLoadViewOnClick to "oSimpleMapTest"
34953>                End_Object
34954>
34954>                Object oTestGeoMappingItem1 is a cWebMenuItemLoadView
34956>                    Set psCaption to "GeoMapping Test"
34957>                    Set psLoadViewOnClick to "oTestGeoMap"
34958>                End_Object
34959>
34959>                Object oPathTraceExampleItem1 is a cWebMenuItemLoadView
34961>                    Set psCaption to "Path Trace Example"
34962>                    Set psLoadViewOnClick to "oPathTrace"
34963>                End_Object
34964>
34964>                Object oCountriesItem1 is a cWebMenuItemLoadView
34966>                    Set psCaption to "Countries"
34967>                    Set psLoadViewOnClick to "oCountries"
34968>                End_Object
34969>            End_Object  
34970>        End_Object  
34971>        
34971>    End_Object
34972>
34972>    Use SessionManager.wo
Including file: SessionManager.wo    (C:\Projects\LeafletTest\AppSrc\SessionManager.wo)
34972>>>Use cWebSessionManagerStandard.pkg
Including file: cWebSessionManagerStandard.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cWebSessionManagerStandard.pkg)
34972>>>>>Use cWebSessionManager.pkg
34972>>>>>Use cWebAppSessionDataDictionary.dd
Including file: cWebAppSessionDataDictionary.dd    (C:\Program Files\DataFlex 20.1\Pkg\cWebAppSessionDataDictionary.dd)
34972>>>>>>>Use DataDict.pkg
34972>>>>>>>
34972>>>>>>>Open WebAppSession
Including file: WebAppSession.fd    (C:\Projects\LeafletTest\DDSrc\WebAppSession.fd)
34974>>>>>>>Open WebAppUser
Including file: WebAppUser.fd    (C:\Projects\LeafletTest\DDSrc\WebAppUser.fd)
34976>>>>>>>
34976>>>>>>>Class cWebAppSessionDataDictionary is a DataDictionary
34977>>>>>>>    
34977>>>>>>>    Procedure Construct_Object
34979>>>>>>>        Forward Send Construct_Object
34981>>>>>>>        Set Main_File to WebAppSession.File_Number
34982>>>>>>>
34982>>>>>>>        Set Add_Server_File to WebAppUser.File_Number
34983>>>>>>>
34983>>>>>>>        Set ParentNullAllowed WebAppUser.File_Number to True
34984>>>>>>>
34984>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
34985>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
34986>>>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
34987>>>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
34988>>>>>>>
34988>>>>>>>        Set Field_Option Field WebAppSession.Active DD_RETAIN to True
34989>>>>>>>        Set Field_Checkbox_Values Field WebAppSession.Active to "Y" "N"
34990>>>>>>>        Set Field_Error Field WebAppSession.Active to 500 "Invalid WebAppSession Active State"
34991>>>>>>>
34991>>>>>>>    End_Procedure
34992>>>>>>>
34992>>>>>>>    Procedure Creating
34994>>>>>>>        DateTime dtCurrentDateTime
34994>>>>>>>        
34994>>>>>>>        Forward Send Creating
34996>>>>>>>        
34996>>>>>>>        //  Init usecounter
34996>>>>>>>        Move 0 to WebAppSession.UseCount
34997>>>>>>>        
34997>>>>>>>        //  Set the creation and access time to the current time
34997>>>>>>>        Move (CurrentDateTime()) to dtCurrentDateTime
34998>>>>>>>    
34998>>>>>>>        Get TimeToString dtCurrentDateTime to WebAppSession.CreateTime
34999>>>>>>>        Get TimeToString dtCurrentDateTime to WebAppSession.LastAccessTime
35000>>>>>>>        
35000>>>>>>>        Move dtCurrentDateTime to WebAppSession.CreateDate
35001>>>>>>>        Move dtCurrentDateTime to WebAppSession.LastAccessDate
35002>>>>>>>    End_Procedure
35003>>>>>>>    
35003>>>>>>>    
35003>>>>>>>    
35003>>>>>>>    //
35003>>>>>>>    //  Converts the given time to an string that can be saved in the database.
35003>>>>>>>    //
35003>>>>>>>    //  Params:
35003>>>>>>>    //      dtTime  Time to convert
35003>>>>>>>    //  Returns:
35003>>>>>>>    //      String with "HH:MM:SS" format
35003>>>>>>>    //
35003>>>>>>>    Function TimeToString DateTime dtTime Returns String
35005>>>>>>>        String sHours sMinutes sSeconds
35005>>>>>>>        
35005>>>>>>>        //  Extract parts
35005>>>>>>>        Move (String(DateGetHour(dtTime))) to sHours
35006>>>>>>>        Move (String(DateGetMinute(dtTime))) to sMinutes
35007>>>>>>>        Move (String(DateGetSecond(dtTime))) to sSeconds
35008>>>>>>>        
35008>>>>>>>        //  Fill out with 0
35008>>>>>>>        If (Length(sHours) = 1) ;            Move ("0" + sHours) to sHours
35011>>>>>>>        If (Length(sMinutes) = 1) ;            Move ("0" + sMinutes) to sMinutes
35014>>>>>>>        If (Length(sSeconds) = 1) ;            Move ("0" + sSeconds) to sSeconds
35017>>>>>>>        
35017>>>>>>>        Function_Return (sHours + ":" + sMinutes + ":" + sSeconds)
35018>>>>>>>    End_Function
35019>>>>>>>    
35019>>>>>>>    //
35019>>>>>>>    //  Sets the time of the datetime variable to the time in the string.
35019>>>>>>>    //
35019>>>>>>>    //  Params:
35019>>>>>>>    //      dtTime  Datetime variable to add time to
35019>>>>>>>    //      sTimeString String with time in the format "HH:MM:SS"
35019>>>>>>>    //  Returns:
35019>>>>>>>    //      dtDateTime with the loaded time
35019>>>>>>>    //
35019>>>>>>>    Function StringToTime DateTime dtTime String sTimeString Returns DateTime
35021>>>>>>>        String sHours sMinutes sSeconds
35021>>>>>>>        
35021>>>>>>>        //  Extract parts
35021>>>>>>>        Move (Mid(sTimeString, 2, 1)) to sHours
35022>>>>>>>        Move (Mid(sTimeString, 2, 4)) to sMinutes
35023>>>>>>>        Move (Mid(sTimeString, 2, 7)) to sSeconds
35024>>>>>>>        
35024>>>>>>>        //  Set to DateTime
35024>>>>>>>        Move (DateSetHour(dtTime, (Integer(sHours)))) to dtTime
35025>>>>>>>        Move (DateSetMinute(dtTime, (Integer(sMinutes)))) to dtTime
35026>>>>>>>        Move (DateSetSecond(dtTime, (Integer(sSeconds)))) to dtTime
35027>>>>>>>        
35027>>>>>>>        Function_Return dtTime
35028>>>>>>>    End_Function
35029>>>>>>>
35029>>>>>>>End_Class
35030>>>>>Use cWebAppUserDataDictionary.dd
Including file: cWebAppUserDataDictionary.dd    (C:\Program Files\DataFlex 20.1\Pkg\cWebAppUserDataDictionary.dd)
35030>>>>>>>Use DataDict.pkg
35030>>>>>>>Open WebAppUser
35032>>>>>>>Open WebAppSession
35034>>>>>>>
35034>>>>>>>Class cWebAppUserDataDictionary is a DataDictionary
35035>>>>>>>    
35035>>>>>>>    Procedure Construct_Object
35037>>>>>>>        Forward Send Construct_Object
35039>>>>>>>        Set Main_File to WebAppUser.File_Number
35040>>>>>>>
35040>>>>>>>        Set Add_Client_File to WebAppSession.File_Number
35041>>>>>>>
35041>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
35042>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
35043>>>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
35044>>>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
35045>>>>>>>    End_Procedure
35046>>>>>>>
35046>>>>>>>End_Class
35047>>>>>
35047>>>>>Class cWebSessionManagerStandard is a cWebSessionManager
35048>>>>>    
35048>>>>>    Procedure Construct_Object
35050>>>>>        Handle hoUserDD hoSessionDD
35050>>>>>        
35050>>>>>        Forward Send Construct_Object
35052>>>>>        
35052>>>>>        Property Handle phoUserDD 0      // Handle to the WebAppUser DDO
35053>>>>>        Property Handle phoSessionDD 0   // Handle to the WebAppSession DDO        
35054>>>>>        
35054>>>>>        Get Create (RefClass(cWebAppUserDataDictionary)) to hoUserDD
35055>>>>>        Get Create (RefClass(cWebAppSessionDataDictionary)) to hoSessionDD
35056>>>>>        Set DDO_Server of hoSessionDD to hoUserDD
35057>>>>>
35057>>>>>        Set phoUserDD to hoUserDD
35058>>>>>        Set phoSessionDD to hoSessionDD
35059>>>>>        Property Boolean pbCreatingNewSession False
35060>>>>>        Property String psLoginName
35061>>>>>        Property String psUserName ""
35062>>>>>        Property Integer piUserRights 0
35063>>>>>    End_Procedure
35064>>>>>    
35064>>>>>    Function CreateSession String sRemoteAddress Returns String
35066>>>>>        String sSessionKey
35066>>>>>        Integer iErr
35066>>>>>        Boolean bLogWebSession
35066>>>>>        Handle hoSessionDD       
35066>>>>>        Get phoSessionDD to hoSessionDD
35067>>>>>        
35067>>>>>        //  Get session key
35067>>>>>        Forward Get CreateSession sRemoteAddress to sSessionKey
35069>>>>>        
35069>>>>>        Get pbLogWebSession to bLogWebSession
35070>>>>>        If not bLogWebSession Begin
35072>>>>>            Function_Return sSessionKey        
35073>>>>>        End
35073>>>>>>
35073>>>>>
35073>>>>>        //  Store session
35073>>>>>        Send Clear of hoSessionDD
35074>>>>>        Set Field_Changed_Value of hoSessionDD Field WebAppSession.SessionKey to sSessionKey
35075>>>>>        Set Field_Changed_Value of hoSessionDD Field WebAppSession.RemoteAddress to sRemoteAddress
35076>>>>>        Set Field_Changed_Value of hoSessionDD Field WebAppSession.Active to "Y"
35077>>>>>        Get Request_Validate of hoSessionDD to iErr
35078>>>>>        If (iErr) Begin
35080>>>>>            // this should not happen. If it does its a programming error
35080>>>>>            Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
35081>>>>>>
35081>>>>>            Function_Return ""
35082>>>>>        End
35082>>>>>>
35082>>>>>        Send Request_Save of hoSessionDD
35083>>>>>        If (Err) Begin
35085>>>>>            // this shouldn't happen, if it does likely a duplicate session key issue, even through request_save already gave an error we give another one to make tracking down easier
35085>>>>>            Error DFERR_PROGRAM C_$WebAppSesionSaveFailed
35086>>>>>>
35086>>>>>            Function_Return ""
35087>>>>>        End
35087>>>>>>
35087>>>>>       
35087>>>>>        Function_Return sSessionKey        
35088>>>>>    End_Function
35089>>>>>    
35089>>>>>    
35089>>>>>    Function ValidateSession String sSessionKey Boolean bOptLoadWebApp Returns Boolean
35091>>>>>        DateTime dtLastAccess dtCurrent
35091>>>>>        TimeSpan tsDiff
35091>>>>>        Integer iErr iSessionTimeout iSpanMinutes
35091>>>>>        Boolean bResult bCreatingNewSession
35091>>>>>        Boolean bLogWebSession bLoadWebApp
35091>>>>>        Integer eLoginMode
35091>>>>>        String sTime
35091>>>>>        Handle hoSessionDD hoUserDD       
35091>>>>>        
35091>>>>>        Move False to bLoadWebApp
35092>>>>>        If (num_arguments >= 2) Begin
35094>>>>>            Move bOptLoadWebApp to bLoadWebApp
35095>>>>>        End
35095>>>>>>
35095>>>>>        
35095>>>>>        Get phoSessionDD to hoSessionDD
35096>>>>>        Get phoUserDD to hoUserDD
35097>>>>>        
35097>>>>>        Get pbLogWebSession to bLogWebSession
35098>>>>>        Get peLoginMode to eLoginMode
35099>>>>>        
35099>>>>>        // for this object, you can only disable logging if login completely is disabled
35099>>>>>        If (not(bLogWebSession) and (eLoginMode<>lmLoginNone)) Begin
35101>>>>>            Error DFERR_PROGRAM C_$WebSessionLoggingMustBeEnabled
35102>>>>>>
35102>>>>>            Function_Return False
35103>>>>>        End
35103>>>>>>
35103>>>>>
35103>>>>>        //  Clear session properties
35103>>>>>        Set psSessionKey to ""
35104>>>>>        Send UpdateSessionProperties True
35105>>>>>        
35105>>>>>        If not bLogWebSession Begin
35107>>>>>            Forward Get ValidateSession sSessionKey to bResult
35109>>>>>            Function_Return bResult
35110>>>>>        End        
35110>>>>>>
35110>>>>>        
35110>>>>>        Move False to bResult
35111>>>>>        Get piSessionTimeout to iSessionTimeout 
35112>>>>>        
35112>>>>>        //  Check if session exists
35112>>>>>        Send Clear of hoSessionDD
35113>>>>>        Move sSessionKey to WebAppSession.SessionKey
35114>>>>>        Send Find of hoSessionDD EQ Index.1
35115>>>>>            
35115>>>>>        If (Found) Begin
35117>>>>>            //  Calculate timespan between now and last access time
35117>>>>>            Move (CurrentDateTime()) to dtCurrent
35118>>>>>            Move WebAppSession.LastAccessDate to dtLastAccess
35119>>>>>            Get StringToTime of hoSessionDD dtLastAccess WebAppSession.LastAccessTime to dtLastAccess
35120>>>>>            Move (dtCurrent - dtLastAccess) to tsDiff
35121>>>>>            Move (SpanTotalMinutes(tsDiff)) to iSpanMinutes
35122>>>>>            
35122>>>>>            //  Check if session didn't time out
35122>>>>>            If (IsDateValid(dtLastAccess) and (iSessionTimeout <= 0 or (iSpanMinutes < iSessionTimeout)) and WebAppSession.Active = "Y") Begin
35124>>>>>                Forward Get ValidateSession sSessionKey to bResult
35126>>>>>                   
35126>>>>>                If (bResult) Begin
35128>>>>>                    //  Update session record
35128>>>>>                    Get TimeToString of hoSessionDD dtCurrent to sTime 
35129>>>>>                    Set Field_Changed_Value of hoSessionDD Field WebAppSession.LastAccessDate to dtCurrent
35130>>>>>                    Set Field_Changed_Value of hoSessionDD Field WebAppSession.LastAccessTime to sTime
35131>>>>>                    Set Field_Changed_Value of hoSessionDD Field WebAppSession.UseCount to (WebAppSession.UseCount + 1)
35132>>>>>                    Get Request_Validate of hoSessionDD to iErr
35133>>>>>                    If (iErr) Begin
35135>>>>>                        // this should not happen. If it does its a programming error
35135>>>>>                        Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
35136>>>>>>
35136>>>>>                        Function_Return False
35137>>>>>                    End
35137>>>>>>
35137>>>>>                    Send Request_Save of hoSessionDD
35138>>>>>                    
35138>>>>>                    //  Update user properties
35138>>>>>                    Send UpdateSessionProperties False
35139>>>>>                End
35139>>>>>>
35139>>>>>            End
35139>>>>>>
35139>>>>>            Else Begin
35140>>>>>                // Test the Creating New Session Flag to protect against infinite recursion....
35140>>>>>                Get pbCreatingNewSession to bCreatingNewSession
35141>>>>>                
35141>>>>>                If (not(bCreatingNewSession)) Begin
35143>>>>>                    Set pbCreatingNewSession to True                    
35144>>>>>                    Get RecreateSession of ghoWebApp to bResult
35145>>>>>                    Set pbCreatingNewSession to False
35146>>>>>                    
35146>>>>>                    If (not(bLoadWebApp)) Begin
35148>>>>>                        Move False to bResult   //  We can only continue immediately if we were loading the webapp, other operations are not allowed!
35149>>>>>                        Error DFERR_WEBAPP_SESSION_TIMEOUT "Your application session has timed out or is inactive, please login again."
35150>>>>>>
35150>>>>>                        Send NavigateRefresh of ghoWebApp          // refresh the WebApp at the client (triggers a login)
35151>>>>>                    End
35151>>>>>>
35151>>>>>                End
35151>>>>>>
35151>>>>>            End
35151>>>>>>
35151>>>>>        End
35151>>>>>>
35151>>>>>        Else Begin
35152>>>>>            Error DFERR_WEBAPP_BAD_SESSION_KEY "Session key not known (reload page to recreate session)"
35153>>>>>>
35153>>>>>        End
35153>>>>>>
35153>>>>>        
35153>>>>>        Function_Return bResult
35154>>>>>    End_Function
35155>>>>>    
35155>>>>>    Function UserLogin String sLoginName String sPassword Returns Boolean
35157>>>>>        String sSessionKey sUserPassword
35157>>>>>        Handle hoSessionDD hoUserDD
35157>>>>>        Boolean bMatch  
35157>>>>>        
35157>>>>>        Get phoSessionDD to hoSessionDD
35158>>>>>        Get phoUserDD to hoUserDD
35159>>>>>        Integer iErr eLoginMode
35159>>>>>        
35159>>>>>        // Refind session record
35159>>>>>        Get psSessionKey to sSessionKey
35160>>>>>        Send Clear of hoSessionDD
35161>>>>>        Move sSessionKey to WebAppSession.SessionKey
35162>>>>>        Send Find of hoSessionDD EQ Index.1
35163>>>>>        
35163>>>>>        If (Found and WebAppSession.SessionKey = sSessionKey) Begin
35165>>>>>            Get peLoginMode to eLoginMode
35166>>>>>            
35166>>>>>            //  Find the user
35166>>>>>            Move sLoginName to WebAppUser.LoginName
35167>>>>>            Send Find of hoUserDD EQ Index.1
35168>>>>>            
35168>>>>>            // Check username and password
35168>>>>>            If (Found and (Lowercase(sLoginName) = Lowercase(Trim(WebAppUser.LoginName)))) Begin
35170>>>>>                Get Field_Current_Value of hoUserDD Field WebAppUser.Password to sUserPassword
35171>>>>>                Get ComparePasswords (Trim(sUserPassword)) (Trim(sPassword)) to bMatch
35172>>>>>                
35172>>>>>                If (bMatch) Begin
35174>>>>>                    // Store the login
35174>>>>>                    Set Field_Changed_Value of hoUserDD Field WebAppUser.LastLogin to (CurrentDateTime())
35175>>>>>                    Get Request_Validate of hoSessionDD to iErr
35176>>>>>                    If (iErr) Begin
35178>>>>>                        // this should not happen. If it does its a programming error
35178>>>>>                        Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
35179>>>>>>
35179>>>>>                        Function_Return False
35180>>>>>                    End
35180>>>>>>
35180>>>>>                    
35180>>>>>                    Send Request_Save of hoSessionDD
35181>>>>>                    
35181>>>>>                    // Update session properties
35181>>>>>                    Send UpdateSessionProperties False
35182>>>>>                    Send NotifyChangeRights
35183>>>>>                    Function_Return True
35184>>>>>                End
35184>>>>>>
35184>>>>>                Else Begin
35185>>>>>                    //  We should rely directly on this buffer elsewhere but just be sure
35185>>>>>                    Send Clear of hoUserDD
35186>>>>>                End
35186>>>>>>
35186>>>>>            End
35186>>>>>>
35186>>>>>        End
35186>>>>>>
35186>>>>>          
35186>>>>>        Function_Return False
35187>>>>>    End_Function
35188>>>>>    
35188>>>>>    Function IsLoggedIn Returns Boolean
35190>>>>>        String sLoginName
35190>>>>>        Boolean bLogWebSession bLoggedIn
35190>>>>>        
35190>>>>>        Get pbLogWebSession to bLogWebSession
35191>>>>>        If not bLogWebSession Begin
35193>>>>>            Forward Get IsLoggedIn to bLoggedIn
35195>>>>>            Function_Return bLoggedIn
35196>>>>>        End
35196>>>>>>
35196>>>>>        
35196>>>>>        Get psLoginName to sLoginName
35197>>>>>        
35197>>>>>        Function_Return (sLoginName <> "")
35198>>>>>    End_Function
35199>>>>>    
35199>>>>>    
35199>>>>>    //
35199>>>>>    // This procedure is called when validating a session and after logging in. Its purpose is to 
35199>>>>>    // update properties based on the session and user data. Augment this function to update 
35199>>>>>    // properties based on the session / user table. Note that WebAppUser and WebAppSession contain
35199>>>>>    // the right records when this procedure is called.
35199>>>>>    //
35199>>>>>    // Params:
35199>>>>>    //      bClear   True if the procedure is called before session validation to clear properties.
35199>>>>>    //
35199>>>>>    Procedure UpdateSessionProperties Boolean bClear
35201>>>>>        Handle hoUserDD
35201>>>>>        
35201>>>>>        Get phoUserDD to hoUserDD
35202>>>>>        
35202>>>>>        //  Update user properties
35202>>>>>        If (not(bClear) and HasRecord(hoUserDD)) Begin
35204>>>>>            Set psUsername to (Trim(WebAppUser.FullName))
35205>>>>>            Set psLoginName to (Trim(WebAppUser.LoginName))
35206>>>>>            Set piUserRights to WebAppUser.Rights
35207>>>>>            
35207>>>>>            Send OnSessionPropertiesSet 
35208>>>>>        End
35208>>>>>>
35208>>>>>        Else Begin
35209>>>>>            Set psUsername to ""
35210>>>>>            Set psLoginName to ""
35211>>>>>            Set piUserRights to 0
35212>>>>>            
35212>>>>>            Send OnSessionPropertiesClear
35213>>>>>        End
35213>>>>>>
35213>>>>>    End_Procedure
35214>>>>>    
35214>>>>>    //
35214>>>>>    // This function is called to perform the password comparison. It gets the entered password and
35214>>>>>    // the password value of the user table as parameters. The WebAppUser buffer will contain the
35214>>>>>    // right record. This function can be augmented to implement security features like storing the
35214>>>>>    // password as a hashed value.
35214>>>>>    //
35214>>>>>    // Params:
35214>>>>>    //      sUserPassword       Value of the WebAppUser.Password field.
35214>>>>>    //      sEnteredPassword    Value entered on the login screen during login.
35214>>>>>    //
35214>>>>>    Function ComparePasswords String sUserPassword String sEnteredPassword Returns Boolean
35216>>>>>        Function_Return (sUserPassword = sEnteredPassword)
35217>>>>>    End_Function
35218>>>>>    
35218>>>>>    Procedure OnSessionPropertiesSet
35220>>>>>        //  Empty event stub
35220>>>>>    End_Procedure
35221>>>>>    
35221>>>>>    Procedure OnSessionPropertiesClear
35223>>>>>        //  Empty event stub
35223>>>>>    End_Procedure
35224>>>>>    
35224>>>>>    Procedure EndSession
35226>>>>>        Integer iErr
35226>>>>>        Boolean bLogWebSession
35226>>>>>        Handle hoSessionDD       
35226>>>>>        
35226>>>>>        Get phoSessionDD to hoSessionDD
35227>>>>>        Get pbLogWebSession to bLogWebSession
35228>>>>>        If not bLogWebSession Begin
35230>>>>>            Forward Send EndSession
35232>>>>>            Procedure_Return
35233>>>>>        End
35233>>>>>>
35233>>>>>            
35233>>>>>        //  Check if session exists
35233>>>>>        Send Clear of hoSessionDD
35234>>>>>        Get psSessionKey to WebAppSession.SessionKey
35235>>>>>        
35235>>>>>        Send Find of hoSessionDD EQ Index.1
35236>>>>>        If (Found) Begin
35238>>>>>            Set Field_Changed_Value of hoSessionDD Field WebAppSession.Active to "N"
35239>>>>>            Get Request_Validate of hoSessionDD to iErr
35240>>>>>            If (iErr) Begin
35242>>>>>                // this should not happen. If it does its a programming error
35242>>>>>                Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
35243>>>>>>
35243>>>>>                Procedure_Return
35244>>>>>            End
35244>>>>>>
35244>>>>>            Send Request_Save of hoSessionDD
35245>>>>>        End
35245>>>>>>
35245>>>>>    End_Procedure
35246>>>>>
35246>>>>>End_Class
35247>>>>>
35247>>>
35247>>>Object oSessionManager is a cWebSessionManagerStandard
35249>>>End_Object
35250>>>
35250>>>
35250>    Use LoginDialog.wo
Including file: LoginDialog.wo    (C:\Projects\LeafletTest\AppSrc\LoginDialog.wo)
35250>>>Use cWebModalDialog.pkg
35250>>>Use cWebForm.pkg
35250>>>Use cWebButton.pkg
35250>>>Use cWebPanel.pkg
35250>>>Use cWebLabel.pkg
35250>>>
35250>>>Object oLoginDialog is a cWebModalDialog
35252>>>    Set piMinWidth to 370
35253>>>    Set piMinHeight to 220
35254>>>    Set psCaption to "Login"
35255>>>    Set pbShowClose to (peLoginMode(oWebApp) <> lmLoginRequired)
35256>>>    Set pbLoginModeEnforced to False
35257>>>    
35257>>>    Delegate Set phoLoginView to Self
35259>>>    
35259>>>    Object oTopPanel is a cWebPanel
35261>>>        Set peRegion to prTop
35262>>>        Set piHeight to 55       
35263>>>        
35263>>>        Object oDescription is a cWebLabel
35265>>>            Set psCaption to "Please enter your username and password to login."
35266>>>            Set peAlign to alignCenter
35267>>>        End_Object
35268>>>    End_Object
35269>>>    
35269>>>    Object oRightPanel is a cWebPanel
35271>>>        Set peRegion to prRight
35272>>>        Set piWidth to 20       
35273>>>    End_Object
35274>>>    
35274>>>    Object oMainPanel is a cWebPanel
35276>>>        Set peRegion to prCenter
35277>>>        
35277>>>        Object oLoginName is a cWebForm
35279>>>            Set psLabel to "Login Name:"
35280>>>            Set peLabelPosition to C_WebDefault
35281>>>            Set peLabelAlign to alignRight
35282>>>            Set piMaxLength to 20
35283>>>            Set psAutoComplete to "username"
35284>>>        End_Object
35285>>>        
35285>>>        Object oPassword is a cWebForm
35287>>>            Set psLabel to "Password:"
35288>>>            Set pbPassword to True
35289>>>            Set peLabelAlign to alignRight
35290>>>            Set piMaxLength to 20
35291>>>            Set psAutoComplete to "current-password"
35292>>>        End_Object   
35293>>>        
35293>>>        Object oWarning is a cWebLabel
35295>>>            Set pbVisible to False
35296>>>            Set psCaption to "Invalid loginname or password."
35297>>>            Set psCSSClass to "Warning"
35298>>>            Set peAlign to alignCenter
35299>>>        End_Object
35300>>>    End_Object
35301>>>    
35301>>>    Object oButtonPanel is a cWebPanel
35303>>>        Set peRegion to prBottom
35304>>>        Set piColumnCount to 3
35305>>>        Set piMinHeight to 40
35306>>>
35306>>>        Object oLoginButton is a cWebButton
35308>>>            Set pbShowLabel to False
35309>>>            Set piColumnIndex to 2
35310>>>            Set psCaption to "Login"
35311>>>            Set pbServerOnClick to True
35312>>>                        
35312>>>            Procedure OnClick
35315>>>                Send DoLogin
35316>>>            End_Procedure
35317>>>            
35317>>>        End_Object
35318>>>        
35318>>>    End_Object
35319>>>    
35319>>>    Procedure DoLogin
35322>>>        String sLoginName sPassword
35322>>>        Boolean bResult
35322>>>        Handle hoDefaultView
35322>>>        
35322>>>        WebGet psValue of oLoginName to sLoginName
35325>>>        WebGet psValue of oPassword to sPassword
35328>>>        
35328>>>        Get UserLogin of ghoWebSessionManager sLoginName sPassword to bResult
35329>>>        
35329>>>        If (bResult) Begin
35331>>>            Send Hide of oLoginDialog
35332>>>            Get GetDefaultView to hoDefaultView
35333>>>            If (hoDefaultView > 0) Begin
35335>>>                Send Show of hoDefaultView
35336>>>            End
35336>>>>
35336>>>            
35336>>>            // clear the login values. we don't want to return the login id & password as synchronized properties....
35336>>>            WebSet psValue of oLoginName to ""
35337>>>            WebSet psValue of oPassword  to ""
35338>>>            WebSet pbVisible of oWarning to False
35339>>>        End
35339>>>>
35339>>>        Else Begin
35340>>>            WebSet pbVisible of oWarning to True
35341>>>        End
35341>>>>
35341>>>    End_Procedure
35342>>>    
35342>>>    
35342>>>    Set pbServerOnSubmit to True
35343>>>    Procedure OnSubmit
35346>>>         Send DoLogin
35347>>>    End_Procedure
35348>>>End_Object
35349>    Use WebResourceManager.wo
Including file: WebResourceManager.wo    (C:\Projects\LeafletTest\AppSrc\WebResourceManager.wo)
35349>>>Use cWebResourceManager.pkg
35349>>>
35349>>>Object oWebResourceManager is a cWebResourceManager
35351>>>End_Object
35352>    Use SimpleMapTest.wo
Including file: SimpleMapTest.wo    (C:\Projects\LeafletTest\AppSrc\SimpleMapTest.wo)
35352>>>Use cWebView.pkg
35352>>>Use cWebPanel.pkg
35352>>>Use cWebForm.pkg 
35352>>>Use cWebButton.pkg
35352>>>Use cWebSpacer.pkg
35352>>>Use cLeafletMappingControl.pkg
Including file: cLeafletMappingControl.pkg    (C:\Projects\LeafletLibrary\cLeafletMappingControl.pkg)
35352>>>>>Use cWebBaseControl.pkg
35352>>>>>Use cJsonObject.pkg
35352>>>>>
35352>>>>>// Geoserver structs
35352>>>>>
35352>>>>>Struct stGsGeom
35352>>>>>    String type
35352>>>>>    Number[][][] coordinates
35352>>>>>End_Struct
35352>>>>>
35352>>>>>Struct stGsFeature
35352>>>>>    String   type
35352>>>>>    String   id
35352>>>>>    stGsGeom geometry
35352>>>>>    stGsGeom geometry
35352>>>>>End_Struct
35352>>>>>
35352>>>>>Struct stGeoserverResp
35352>>>>>    String type
35352>>>>>    Integer totalFeatures
35352>>>>>    stGsFeature[] features
35352>>>>>    stGsFeature[] features
35352>>>>>End_Struct
35352>>>>>
35352>>>>>Struct stMapInfo
35352>>>>>    Number   lat
35352>>>>>    Number   lng
35352>>>>>    Number   zoom
35352>>>>>End_Struct
35352>>>>>
35352>>>>>Struct stMarker
35352>>>>>    Number[] aPoint
35352>>>>>    String   sText
35352>>>>>    Boolean  bRise
35352>>>>>    String   sIcon
35352>>>>>End_Struct
35352>>>>>
35352>>>>>Struct stMarkers
35352>>>>>    stMarker[] atMarkers
35352>>>>>    stMarker[] atMarkers
35352>>>>>End_Struct
35352>>>>>
35352>>>>>Struct stPolygon
35352>>>>>    Number[][] aPoints
35352>>>>>    Boolean    bStroke
35352>>>>>    String     sLineColor
35352>>>>>    Integer    iLineWeight
35352>>>>>    Number     nLineOpacity
35352>>>>>    String     sFillColor
35352>>>>>    Number     nFillOpacity
35352>>>>>    Boolean    bFitMap
35352>>>>>End_Struct
35352>>>>>
35352>>>>>Struct stPolygons
35352>>>>>    stPolygon[] atPolygons
35352>>>>>    stPolygon[] atPolygons
35352>>>>>End_Struct
35352>>>>>
35352>>>>>Struct stPolyline
35352>>>>>    Number[][] aPoints
35352>>>>>    Boolean    bStroke
35352>>>>>    Boolean    bFitMap
35352>>>>>    String     sLineColor
35352>>>>>    Integer    iLineWeight
35352>>>>>    Number     nOpacity
35352>>>>>    String     sText
35352>>>>>End_Struct
35352>>>>>
35352>>>>>Struct stPolylines
35352>>>>>    stPolyline[] atPolylines
35352>>>>>    stPolyline[] atPolylines
35352>>>>>End_Struct
35352>>>>>
35352>>>>>Struct stCircle
35352>>>>>    Number[] aCenter
35352>>>>>    // ToDo:  More
35352>>>>>End_Struct
35352>>>>>
35352>>>>>Struct stCircles
35352>>>>>    stCircle[] atCircles
35352>>>>>    stCircle[] atCircles
35352>>>>>End_Struct
35352>>>>>
35352>>>>>Class cLeafletMappingControl is a cWebBaseControl
35353>>>>>    
35353>>>>>    Procedure Construct_Object
35355>>>>>        Forward Send Construct_Object
35357>>>>>        
35357>>>>>        Property String psMapDataAttrib 'Map data &copy; <a href="https://www.openstreetmap.org/" target="_blank">OpenStreetMap</a>'
35358>>>>>        Property String psImageryAttrib 'Imagery &copy; <a href="https://www.mapbox.com/" target="_blank">Mapbox</a>'
35359>>>>>        
35359>>>>>        // Client properties
35359>>>>>        Property Number     pnNorth
35362>>>>>        Property Number     pnEast
35365>>>>>        Property Integer    piInitialZoom
35368>>>>>        Property String     psTileLayer
35371>>>>>        Property Integer    piMaxZoom
35374>>>>>        Property String     psAccessToken
35377>>>>>        Property String     psLayerID
35380>>>>>        Property String     psTileSize "256"
35383>>>>>        Property String     psAttribution
35386>>>>>        Property Boolean    pbAttribution
35389>>>>>        Property Boolean    pbZoomControl
35392>>>>>        Property Boolean    pbServerOnMapClick
35395>>>>>        Property Boolean    pbServerOnMapDblClick
35398>>>>>        
35398>>>>>        // These  are for passing JSON string representations of the 
35398>>>>>        // matching server properties below to the client / server
35398>>>>>        Property String     psMarkers
35401>>>>>        Property String     psPolygons
35404>>>>>        Property String     psPolylines
35407>>>>>        Property String     psCurrentMapInfo
35410>>>>>        
35410>>>>>        // Server properties
35410>>>>>        Property stMarkers  ptMarkers
35413>>>>>        Property stPolygons ptPolygons
35416>>>>>        Property stPolylines ptPolylines
35419>>>>>        
35419>>>>>        // Note: you will need to get your own access token and set it here:
35419>>>>>        Set psAccessToken   to (Config("tokens.leafletAccessToken"))
35420>>>>>        Set psTileLayer     to "https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}"
35421>>>>>        Set psLayerID       to "mapbox/streets-v11"        
35422>>>>>        Set psAttribution   to 'Map data &copy; <a href="https://www.openstreetmap.org/" target="_blank">OpenStreetMap</a> contributors: Imagery &copy; <a href="https://www.mapbox.com/">Mapbox</a>'
35423>>>>>
35423>>>>>        Set pbShowLabel     to False  // No label by default
35424>>>>>        Set piMinHeight     to 100
35425>>>>>        Set piColumnSpan    to 0
35426>>>>>        Set pbFillHeight    to True
35427>>>>>        
35427>>>>>        Set psJSClass to "dfcc.leafletMappingControl"
35428>>>>>    End_Procedure
35429>>>>>
35429>>>>>    Procedure RenderMap
35431>>>>>        Send ClientAction "drawMap"
35432>>>>>    End_Procedure
35433>>>>>    
35433>>>>>    Procedure DefineMap Number nNorth Number nEast Integer iInitZoom Integer iMaxZoom
35435>>>>>        WebSet pnNorth          to nNorth
35436>>>>>        WebSet pnEast           to nEast
35437>>>>>        WebSet piInitialZoom    to iInitZoom
35438>>>>>        WebSet piMaxZoom        to iMaxZoom
35439>>>>>    End_Procedure
35440>>>>>    
35440>>>>>    // This is just a shothhand for DefineMap plus RenderMap in one step
35440>>>>>    Procedure DrawMap Number nNorth Number nEast Integer iInitZoom Integer iMaxZoom
35442>>>>>        Send DefineMap nNorth nEast iInitZoom iMaxZoom
35443>>>>>        Send RenderMap
35444>>>>>    End_Procedure
35445>>>>>    
35445>>>>>    Procedure FitBounds Number nMinN Number nMinE Number nMaxN Number nMaxE
35447>>>>>        String[] asParams
35448>>>>>        
35448>>>>>        Move nMinN to asParams[0]
35449>>>>>        Move nMinE to asParams[1]
35450>>>>>        Move nMaxN to asParams[2]
35451>>>>>        Move nMaxE to asParams[3]
35452>>>>>        
35452>>>>>        Send ClientAction "fitBounds" asParams
35453>>>>>    End_Procedure
35454>>>>>    
35454>>>>>    Function AddPolygon stPolygon tPolygon Returns Integer
35456>>>>>        stPolygons tPolys
35456>>>>>        stPolygons tPolys
35456>>>>>        Integer iIndex
35456>>>>>        Handle  hoJson
35456>>>>>        String  sJson
35456>>>>>        
35456>>>>>        WebGet ptPolygons to tPolys
35459>>>>>        Move (SizeOfArray(tPolys.atPolygons)) to iIndex
35460>>>>>        Move tPolygon to tPolys.atPolygons[iIndex]
35461>>>>>        WebSet ptPolygons to tPolys
35462>>>>>        
35462>>>>>        Get Create (RefClass(cJsonObject)) to hoJson
35463>>>>>        Send DataTypeToJson of hoJson tPolys
35464>>>>>        Get Stringify of hoJson to sJson
35465>>>>>        Send Destroy of hoJson
35466>>>>>        WebSet psPolygons to sJson
35467>>>>>        
35467>>>>>        Function_Return iIndex
35468>>>>>    End_Function
35469>>>>>    
35469>>>>>    Procedure RemovePolygon Integer iIndex
35471>>>>>        stPolygons tPolys
35471>>>>>        stPolygons tPolys
35471>>>>>        String[]   asParams
35472>>>>>        Handle     hoJson
35472>>>>>        String     sJson
35472>>>>>        
35472>>>>>        WebGet ptPolygons to tPolys
35475>>>>>        
35475>>>>>        If (iIndex < SizeOfArray(tPolys.atPolygons)) Begin
35477>>>>>            // Remove it from the server side property
35477>>>>>            Move (RemoveFromArray(tPolys.atPolygons, iIndex)) to tPolys.atPolygons
35478>>>>>            WebSet ptPolygons to tPolys
35479>>>>>            
35479>>>>>            // Serialize that and web set it
35479>>>>>            Get Create (RefClass(cJsonObject)) to hoJson
35480>>>>>            Send DataTypeToJson of hoJson tPolys
35481>>>>>            Get Stringify of hoJson to sJson
35482>>>>>            Send Destroy of hoJson
35483>>>>>            WebSet psPolygons to sJson
35484>>>>>            
35484>>>>>            // Remove it from the client
35484>>>>>            Move iIndex to asParams[0]
35485>>>>>            Send ClientAction "removePolygon" asParams
35486>>>>>        End
35486>>>>>>
35486>>>>>        
35486>>>>>    End_Procedure
35487>>>>>        
35487>>>>>    Procedure RenderPolygon Integer iIndex
35489>>>>>        String[] asParams
35490>>>>>        
35490>>>>>        Move iIndex to asParams[0]
35491>>>>>        Send ClientAction "drawPolygon" asParams
35492>>>>>    End_Procedure
35493>>>>>    
35493>>>>>    Procedure UnrenderPolygon Integer iIndex
35495>>>>>        String[] asParams
35496>>>>>        
35496>>>>>        Move iIndex to asParams[0]
35497>>>>>        Send ClientAction "undrawPolygon" asParams
35498>>>>>    End_Procedure
35499>>>>>    
35499>>>>>    // Shortcut combining AddPolygon and RenderPolygon
35499>>>>>    Procedure DrawPolygon stPolygon tPoly
35501>>>>>        Integer i
35501>>>>>        
35501>>>>>        Get AddPolygon tPoly to i
35502>>>>>        Send RenderPolygon i
35503>>>>>    End_Procedure
35504>>>>>    
35504>>>>>    Function DefinePolyline stPolyline tLine Returns Integer
35506>>>>>        stPolylines tLines
35506>>>>>        stPolylines tLines
35506>>>>>        Integer iIndex
35506>>>>>        Handle  hoJson
35506>>>>>        String  sJson
35506>>>>>        
35506>>>>>        WebGet ptPolylines to tLines
35509>>>>>        Move (SizeOfArray(tLines.atPolylines)) to iIndex
35510>>>>>        Move tLine to tLines.atPolylines[iIndex]
35511>>>>>        WebSet ptPolylines to tLines
35512>>>>>        
35512>>>>>        Get Create (RefClass(cJsonObject)) to hoJson
35513>>>>>        Send DataTypeToJson of hoJson tLines
35514>>>>>        Get Stringify of hoJson to sJson
35515>>>>>        Send Destroy of hoJson
35516>>>>>        WebSet psPolylines to sJson
35517>>>>>        
35517>>>>>        Function_Return iIndex
35518>>>>>    End_Function
35519>>>>>    
35519>>>>>    Procedure RenderPolyline Integer iIndex
35521>>>>>        String[] asParams
35522>>>>>        
35522>>>>>        Move iIndex to asParams[0]
35523>>>>>        Send ClientAction "drawPolyline" asParams
35524>>>>>    End_Procedure
35525>>>>>    
35525>>>>>    Procedure DrawPolyLine stPolyline tLine
35527>>>>>        Integer iIndex
35527>>>>>        
35527>>>>>        Get DefinePolyline tLine to iIndex
35528>>>>>        Send RenderPolyline iIndex
35529>>>>>    End_Procedure
35530>>>>>    
35530>>>>>    Function DefineMarker Number nNorth Number nEast String sText String sIcon Boolean bRise Returns Integer
35532>>>>>        stMarkers tMarkers
35532>>>>>        stMarkers tMarkers
35532>>>>>        Integer   iIndex
35532>>>>>        Handle    hoJson
35532>>>>>        String    sJson
35532>>>>>        
35532>>>>>        WebGet ptMarkers to tMarkers
35535>>>>>        Move (SizeOfArray(tMarkers.atMarkers)) to iIndex
35536>>>>>        Move nNorth to tMarkers.atMarkers[iIndex].aPoint[0]
35537>>>>>        Move nEast  to tMarkers.atMarkers[iIndex].aPoint[1]
35538>>>>>        Move sText  to tMarkers.atMarkers[iIndex].sText
35539>>>>>        Move bRise  to tMarkers.atMarkers[iIndex].bRise
35540>>>>>        Move sIcon  to tMarkers.atMarkers[iIndex].sIcon
35541>>>>>        WebSet ptMarkers to tMarkers
35542>>>>>        
35542>>>>>        Get Create (RefClass(cJsonObject)) to hoJson
35543>>>>>        Send DataTypeToJson of hoJson tMarkers
35544>>>>>        Get Stringify of hoJson to sJson
35545>>>>>        Send Destroy of hoJson
35546>>>>>        WebSet psMarkers to sJson
35547>>>>>        
35547>>>>>        Function_Return iIndex
35548>>>>>    End_Function
35549>>>>>    
35549>>>>>    Procedure ShowMarker Integer iIndex
35551>>>>>        String[] asParams
35552>>>>>        
35552>>>>>        Move iIndex to asParams[0]
35553>>>>>        Send ClientAction "drawMarker" asParams
35554>>>>>    End_Procedure
35555>>>>>    
35555>>>>>    Procedure HideMarker  Integer iIndex
35557>>>>>        String[] asParams
35558>>>>>        
35558>>>>>        Move iIndex to asParams[0]
35559>>>>>        Send ClientAction "hideMarker" asParams
35560>>>>>    End_Procedure
35561>>>>>    
35561>>>>>    // Shortcut combining DefineMarker and ShowMarker
35561>>>>>    Procedure DrawMarker Number nNorth Number nEast String sText String sIcon Boolean bRise
35563>>>>>        Integer iMrk
35563>>>>>        
35563>>>>>        Get DefineMarker nNorth nEast sText sIcon bRise to iMrk
35564>>>>>        Send ShowMarker iMrk
35565>>>>>    End_Procedure
35566>>>>>    
35566>>>>>    Procedure OnMapClick String sLat String sLng
35568>>>>>    End_Procedure
35569>>>>>    
35569>>>>>    Procedure OnMapDblClick String sLat String sLng
35571>>>>>    End_Procedure
35572>>>>>    
35572>>>>>    Function CurrentMapInfo Returns stMapInfo
35574>>>>>        String    sInfo
35574>>>>>        stMapInfo tInfo
35574>>>>>        stMapInfo tInfo
35574>>>>>        Handle    hoJson
35574>>>>>        Boolean   bOK
35574>>>>>        
35574>>>>>        WebGet psCurrentMapInfo to sInfo
35577>>>>>        
35577>>>>>        If (sInfo <> "") Begin
35579>>>>>            Get Create (RefClass(cJsonObject)) to hoJson
35580>>>>>            Set pbRequireAllMembers of hoJson to False
35581>>>>>            Get ParseString of hoJson sInfo to bOK
35582>>>>>            
35582>>>>>            If bOK ;                Get JsonToDataType of hoJson to tInfo
35585>>>>>            Send Destroy of hoJson
35586>>>>>        End
35586>>>>>>
35586>>>>>        
35586>>>>>        Function_Return tInfo
35587>>>>>    End_Function
35588>>>>>    
35588>>>>>    Procedure ChangeLayer String sLayer
35590>>>>>        String[] asParams
35591>>>>>        
35591>>>>>        Move sLayer to asParams[0]
35592>>>>>        Send ClientAction "changeLayer" asParams
35593>>>>>    End_Procedure
35594>>>>>    
35594>>>>>    Procedure ChangeResolution String sRes
35596>>>>>        WebSet psTileSize to sRes
35597>>>>>
35597>>>>>        Send ClientAction "changeResolution"
35598>>>>>    End_Procedure
35599>>>>>    
35599>>>>>    Procedure GetMyLocation
35601>>>>>        Send ClientAction "getCurrentLoc"
35602>>>>>    End_Procedure
35603>>>>>        
35603>>>>>    Procedure MyLocation Number nLat Number nLng 
35605>>>>>    End_Procedure
35606>>>>>    
35606>>>>>    Procedure GeoContributor String sName String sURL String sRole Boolean bCopy
35608>>>>>        String sMapAtt sImageAtt sAttribution
35608>>>>>        
35608>>>>>        Get psMapDataAttrib to sMapAtt
35609>>>>>        Get psImageryAttrib to sImageAtt
35610>>>>>        
35610>>>>>        Move (sMapAtt + ", contributors:" * ;              sRole * If(bCopy, "&copy; ", "") + ;              If((sURL = ""), "", ("<a href='" + sURL + "' target='_blank'>")) + ;              sName + If((sURL = ""), "", "</a>") * sImageAtt) to sAttribution
35611>>>>>        
35611>>>>>        WebSet psAttribution to sAttribution
35612>>>>>    End_Procedure
35613>>>>>    
35613>>>>>    Procedure End_Construct_Object
35615>>>>>        WebPublishProcedure OnMapClick
35616>>>>>        WebPublishProcedure OnMapDblClick
35617>>>>>        WebPublishProcedure MyLocation
35618>>>>>        Forward Send End_Construct_Object
35620>>>>>    End_Procedure
35621>>>>>    
35621>>>>>End_Class
35622>>>Use GeoConnectors\cLocationIQConnector.pkg
Including file: GeoConnectors\cLocationIQConnector.pkg    (C:\Projects\LeafletTest\AppSrc\GeoConnectors\cLocationIQConnector.pkg)
35622>>>>>Use cGeocodeConnector.pkg
Including file: cGeocodeConnector.pkg    (C:\Projects\LeafletTest\AppSrc\cGeocodeConnector.pkg)
35622>>>>>>>Use UI
35622>>>>>>>Use cHttpTransfer.pkg
Including file: cHttpTransfer.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cHttpTransfer.pkg)
35622>>>>>>>>>Use VDFBase.pkg
35622>>>>>>>>>Use GlobalFunctionsProcedures.pkg
35622>>>>>>>>>
35622>>>>>>>>>External_Function WinAPI_HttpQueryInfo "HttpQueryInfoW" WinInet.dll ;    Handle hRequest ;    DWord dwInfoLevel ;    Pointer lpBuffer ;    Pointer lpdwBufferLength ;    Pointer lpdwIndex ;    Returns Integer
35623>>>>>>>>>
35623>>>>>>>>>//  Available options for dwInfoLevel of WinAPI_HttpQueryInfo
35623>>>>>>>>>Define HTTP_QUERY_MIME_VERSION                for 0
35623>>>>>>>>>Define HTTP_QUERY_CONTENT_TYPE                for 1
35623>>>>>>>>>Define HTTP_QUERY_CONTENT_TRANSFER_ENCODING   for 2
35623>>>>>>>>>Define HTTP_QUERY_CONTENT_ID                  for 3
35623>>>>>>>>>Define HTTP_QUERY_CONTENT_DESCRIPTION         for 4
35623>>>>>>>>>Define HTTP_QUERY_CONTENT_LENGTH              for 5
35623>>>>>>>>>Define HTTP_QUERY_CONTENT_LANGUAGE            for 6
35623>>>>>>>>>Define HTTP_QUERY_ALLOW                       for 7
35623>>>>>>>>>Define HTTP_QUERY_PUBLIC                      for 8
35623>>>>>>>>>Define HTTP_QUERY_DATE                        for 9
35623>>>>>>>>>Define HTTP_QUERY_EXPIRES                     for 10
35623>>>>>>>>>Define HTTP_QUERY_LAST_MODIFIED               for 11
35623>>>>>>>>>Define HTTP_QUERY_MESSAGE_ID                  for 12
35623>>>>>>>>>Define HTTP_QUERY_URI                         for 13
35623>>>>>>>>>Define HTTP_QUERY_DERIVED_FROM                for 14
35623>>>>>>>>>Define HTTP_QUERY_COST                        for 15
35623>>>>>>>>>Define HTTP_QUERY_LINK                        for 16
35623>>>>>>>>>Define HTTP_QUERY_PRAGMA                      for 17
35623>>>>>>>>>Define HTTP_QUERY_VERSION                     for 18  // special: part of status line
35623>>>>>>>>>Define HTTP_QUERY_STATUS_CODE                 for 19  // special: part of status line
35623>>>>>>>>>Define HTTP_QUERY_STATUS_TEXT                 for 20  // special: part of status line
35623>>>>>>>>>Define HTTP_QUERY_RAW_HEADERS                 for 21  // special: all headers as ASCIIZ
35623>>>>>>>>>Define HTTP_QUERY_RAW_HEADERS_CRLF            for 22  // special: all headers
35623>>>>>>>>>Define HTTP_QUERY_CONNECTION                  for 23
35623>>>>>>>>>Define HTTP_QUERY_ACCEPT                      for 24
35623>>>>>>>>>Define HTTP_QUERY_ACCEPT_CHARSET              for 25
35623>>>>>>>>>Define HTTP_QUERY_ACCEPT_ENCODING             for 26
35623>>>>>>>>>Define HTTP_QUERY_ACCEPT_LANGUAGE             for 27
35623>>>>>>>>>Define HTTP_QUERY_AUTHORIZATION               for 28
35623>>>>>>>>>Define HTTP_QUERY_CONTENT_ENCODING            for 29
35623>>>>>>>>>Define HTTP_QUERY_FORWARDED                   for 30
35623>>>>>>>>>Define HTTP_QUERY_FROM                        for 31
35623>>>>>>>>>Define HTTP_QUERY_IF_MODIFIED_SINCE           for 32
35623>>>>>>>>>Define HTTP_QUERY_LOCATION                    for 33
35623>>>>>>>>>Define HTTP_QUERY_ORIG_URI                    for 34
35623>>>>>>>>>Define HTTP_QUERY_REFERER                     for 35
35623>>>>>>>>>Define HTTP_QUERY_RETRY_AFTER                 for 36
35623>>>>>>>>>Define HTTP_QUERY_SERVER                      for 37
35623>>>>>>>>>Define HTTP_QUERY_TITLE                       for 38
35623>>>>>>>>>Define HTTP_QUERY_USER_AGENT                  for 39
35623>>>>>>>>>Define HTTP_QUERY_WWW_AUTHENTICATE            for 40
35623>>>>>>>>>Define HTTP_QUERY_PROXY_AUTHENTICATE          for 41
35623>>>>>>>>>Define HTTP_QUERY_ACCEPT_RANGES               for 42
35623>>>>>>>>>Define HTTP_QUERY_SET_COOKIE                  for 43
35623>>>>>>>>>Define HTTP_QUERY_COOKIE                      for 44
35623>>>>>>>>>Define HTTP_QUERY_REQUEST_METHOD              for 45  // special: GET/POST etc.
35623>>>>>>>>>Define HTTP_QUERY_REFRESH                     for 46
35623>>>>>>>>>Define HTTP_QUERY_CONTENT_DISPOSITION         for 47
35623>>>>>>>>>
35623>>>>>>>>>
35623>>>>>>>>>Class cHttpTransfer is a cBaseHttpTransfer
35624>>>>>>>>>    
35624>>>>>>>>>    Function HttpPostRequest String sFilePath String sData Integer bDataIsFile Returns Integer
35626>>>>>>>>>        Integer bStat
35626>>>>>>>>>        Get HttpPostAddrRequest sFilePath (AddressOf(sData)) (SizeOfString(sData)) bDataIsfile to bStat
35627>>>>>>>>>        Function_Return bStat
35628>>>>>>>>>    End_Function
35629>>>>>>>>>    
35629>>>>>>>>>    // This event is not triggered from the runtime. It now uses UChar arrays as the data might 
35629>>>>>>>>>    // not be a valid string (it can any binary data). It still calls the orriginal event for 
35629>>>>>>>>>    // backwards compatibility.
35629>>>>>>>>>    Procedure OnDataReceivedUC String sContentType UChar[] ucData
35631>>>>>>>>>        Send OnDataReceived sContentType (UCharArrayToString(ucData))
35632>>>>>>>>>    End_Procedure
35633>>>>>>>>>    
35633>>>>>>>>>    // Only use this event if you know for sure the data is a string and make sure piBufferSize is
35633>>>>>>>>>    // smaller than the argument size.
35633>>>>>>>>>    Procedure OnDataReceived String sContentType String sData
35635>>>>>>>>>        
35635>>>>>>>>>    End_Procedure
35636>>>>>>>>>    
35636>>>>>>>>>    Function HttpPutRequest String sFilePath String sData Integer bDataIsFile Returns Integer
35638>>>>>>>>>        Integer bStat
35638>>>>>>>>>        Get HttpPutAddrRequest sFilePath (AddressOf(sData)) (SizeOfString(sData)) bDataIsfile to bStat
35639>>>>>>>>>        Function_Return bStat
35640>>>>>>>>>    End_Function
35641>>>>>>>>>    
35641>>>>>>>>>    // Retrieve header information associated with the previous request.
35641>>>>>>>>>    Function QueryInfo DWord dwInfoLevel Returns String
35643>>>>>>>>>        Handle hRequestHandle
35643>>>>>>>>>        WString wResult
35643>>>>>>>>>        Integer iBufferSize iRes iVoid
35643>>>>>>>>>
35643>>>>>>>>>        Get RequestHandle to hRequestHandle
35644>>>>>>>>>        
35644>>>>>>>>>        If (hRequestHandle) Begin
35646>>>>>>>>>            Move 200 to iBufferSize
35647>>>>>>>>>            Move (Repeat(" ", iBufferSize)) to wResult
35648>>>>>>>>>            Move (WinAPI_HttpQueryInfo(hRequestHandle, dwInfoLevel, AddressOf(wResult), AddressOf(iBufferSize), 0)) to iRes
35649>>>>>>>>>            
35649>>>>>>>>>            If (not(iRes) and GetLastError() = 122) Begin //  Insufficient buffersize, retry with received iBufferSize value
35651>>>>>>>>>                Increment iBufferSize      
35652>>>>>>>>>                
35652>>>>>>>>>                Move (Repeat(" ", iBufferSize)) to wResult
35653>>>>>>>>>                Move (WinAPI_HttpQueryInfo(hRequestHandle, dwInfoLevel, AddressOf(wResult), AddressOf(iBufferSize), 0)) to iRes  
35654>>>>>>>>>            End
35654>>>>>>>>>>
35654>>>>>>>>>            
35654>>>>>>>>>            If (not(iRes)) Begin
35656>>>>>>>>>                Move (ShowLastError()) to iVoid
35657>>>>>>>>>            End
35657>>>>>>>>>>
35657>>>>>>>>>        End
35657>>>>>>>>>>
35657>>>>>>>>>        
35657>>>>>>>>>        Function_Return (CString(wResult))
35658>>>>>>>>>    End_Function
35659>>>>>>>>>    
35659>>>>>>>>>    // Returns the statustext returned by the previous request.
35659>>>>>>>>>    Function ResponseStatusText Returns String
35661>>>>>>>>>        String sStatus
35661>>>>>>>>>        
35661>>>>>>>>>        Get QueryInfo HTTP_QUERY_STATUS_TEXT to sStatus
35662>>>>>>>>>        
35662>>>>>>>>>        Function_Return sStatus
35663>>>>>>>>>    End_Function
35664>>>>>>>>>    
35664>>>>>>>>>End_Class
35665>>>>>>>Use cJsonObject.pkg
35665>>>>>>>Use cJsonPath.pkg
Including file: cJsonPath.pkg    (C:\Projects\LeafletTest\AppSrc\cJsonPath.pkg)
35665>>>>>>>>>//==============================================================================
35665>>>>>>>>>// cJsonPath.pkg
35665>>>>>>>>>//
35665>>>>>>>>>// A class which will allow you to get either object handles or values from JSON
35665>>>>>>>>>// objects using their path.
35665>>>>>>>>>// 
35665>>>>>>>>>// Author:  Mike Peat
35665>>>>>>>>>// Date:    06/02/2020
35665>>>>>>>>>//
35665>>>>>>>>>// Usage:
35665>>>>>>>>>//   To return a JSON object at a path:
35665>>>>>>>>>//       Get JsonAtPath of oJsonPathObject hoSourceJsonObject, path to hoVar
35665>>>>>>>>>//     or:
35665>>>>>>>>>//       Move (JsonAtPath(oJsonPathObject, hoSourceJsonObject, path)) to hoVar
35665>>>>>>>>>//
35665>>>>>>>>>//   To return a value at a path:
35665>>>>>>>>>//       Get ValueAtPath of oJsonPathObject hoSourceJsonObject path to sVar
35665>>>>>>>>>//     or
35665>>>>>>>>>//       Move (ValueAtPath(oJsonPathObject, hoSourceJson, path)) to sVar
35665>>>>>>>>>//
35665>>>>>>>>>// Path notation:
35665>>>>>>>>>//
35665>>>>>>>>>//    A string with JSON object names, separated by dots "." and array indices
35665>>>>>>>>>//    in square brackets: "foo.bar.baz[0].bill[1][0]"
35665>>>>>>>>>//
35665>>>>>>>>>// Sample JSON:
35665>>>>>>>>>//
35665>>>>>>>>>//    {
35665>>>>>>>>>//      "foo": {
35665>>>>>>>>>//              "bar": {
35665>>>>>>>>>//                      "baz": [
35665>>>>>>>>>//                              66.123,
35665>>>>>>>>>//                              {
35665>>>>>>>>>//                                      "jim": "jack"
35665>>>>>>>>>//                              },
35665>>>>>>>>>//                              false,
35665>>>>>>>>>//                              {
35665>>>>>>>>>//                                      "bob": 42
35665>>>>>>>>>//                              },
35665>>>>>>>>>//                              {
35665>>>>>>>>>//                                      "kim": "possible"
35665>>>>>>>>>//                              },
35665>>>>>>>>>//                              [55, 1, 19, {
35665>>>>>>>>>//                                      "Mork": [
35665>>>>>>>>>//                                              [35, 67, 88, 100, [21, 33, 45, "Tim"]]
35665>>>>>>>>>//                                      ]
35665>>>>>>>>>//                              }]
35665>>>>>>>>>//                      ]
35665>>>>>>>>>//              }
35665>>>>>>>>>//      }
35665>>>>>>>>>//    }
35665>>>>>>>>>//
35665>>>>>>>>>// Examples:
35665>>>>>>>>>//    Move (JsonAtPath(oJPath, hoJson, "foo.bar.baz[5][3].Mork[0][4][3]")) to hoObj
35665>>>>>>>>>//
35665>>>>>>>>>//    Get ValueAtPath of oJPath hJson "foo.bar.baz[5][3].Mork[0][4][3]" to sVal
35665>>>>>>>>>//      (sVal = "Tim")
35665>>>>>>>>>//
35665>>>>>>>>>// In the first example the JSON object would be returned; if you then performed
35665>>>>>>>>>// Move (JsonValue(hoObj)) to sVal you would get the same result as the second
35665>>>>>>>>>// example - i.e. "Tim".
35665>>>>>>>>>//
35665>>>>>>>>>// NOTE: JSON is case-sensitive, so your path-strings must exactly match the
35665>>>>>>>>>//       object names ("foo" is *not* "Foo") in the JSON file.
35665>>>>>>>>>//
35665>>>>>>>>>// Licence (MIT):
35665>>>>>>>>>//
35665>>>>>>>>>// Copyright 2020, Mike Peat, Unicorn InterGlobal Ltd.
35665>>>>>>>>>//
35665>>>>>>>>>// Permission is hereby granted, free of charge, to any person obtaining a copy
35665>>>>>>>>>// of this software and associated documentation files (the "Software"), to deal
35665>>>>>>>>>// in the Software without restriction, including without limitation the rights
35665>>>>>>>>>// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
35665>>>>>>>>>// copies of the Software, and to permit persons to whom the Software is
35665>>>>>>>>>// furnished to do so, subject to the following conditions:
35665>>>>>>>>>//
35665>>>>>>>>>// The above copyright notice and this permission notice shall be included in
35665>>>>>>>>>// all copies or substantial portions of the Software.
35665>>>>>>>>>//
35665>>>>>>>>>// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
35665>>>>>>>>>// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
35665>>>>>>>>>// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
35665>>>>>>>>>// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
35665>>>>>>>>>// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
35665>>>>>>>>>// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
35665>>>>>>>>>// SOFTWARE.
35665>>>>>>>>>//
35665>>>>>>>>>//==============================================================================
35665>>>>>>>>>// Added CountAtPath function to return the count of elements in an array at the
35665>>>>>>>>>// passed path.
35665>>>>>>>>>//==============================================================================
35665>>>>>>>>>//
35665>>>>>>>>>
35665>>>>>>>>>Use UI
35665>>>>>>>>>Use cJsonObject.pkg
35665>>>>>>>>>
35665>>>>>>>>>Class cJsonPath is a cObject
35666>>>>>>>>>    
35666>>>>>>>>>    Function ArrayHandle Handle hoJson String sPath Returns Handle
35668>>>>>>>>>        Integer iLSBPos iRSBPos iIndex
35668>>>>>>>>>        Handle  hoMemb hoObj
35668>>>>>>>>>        
35668>>>>>>>>>        If not hoJson ;            Function_Return 0
35671>>>>>>>>>            
35671>>>>>>>>>        If (sPath = "") Begin
35673>>>>>>>>>            Send Destroy of hoJson
35674>>>>>>>>>            Function_Return 0
35675>>>>>>>>>        End
35675>>>>>>>>>>
35675>>>>>>>>>        
35675>>>>>>>>>        Move (Pos("[", sPath)) to iLSBPos
35676>>>>>>>>>        Move (Pos("]", sPath)) to iRSBPos
35677>>>>>>>>>        
35677>>>>>>>>>        If (not(iLSBPos) or ;            not(iRSBPos) or ;            (iLSBPos > iRSBPos) or ;            (iLSBPos <> 1)) Begin
35679>>>>>>>>>            Send Destroy of hoJson
35680>>>>>>>>>            Function_Return 0
35681>>>>>>>>>        End
35681>>>>>>>>>>
35681>>>>>>>>>        
35681>>>>>>>>>        Move (Mid(sPath, (iRSBPos - iLSBPos - 1), (iLSBPos + 1))) to iIndex
35682>>>>>>>>>        
35682>>>>>>>>>        If (MemberCount(hoJson) <= iIndex) Begin
35684>>>>>>>>>            Send Destroy of hoJson
35685>>>>>>>>>            Function_Return 0
35686>>>>>>>>>        End
35686>>>>>>>>>>
35686>>>>>>>>>        
35686>>>>>>>>>        Get MemberByIndex of hoJson iIndex to hoMemb
35687>>>>>>>>>
35687>>>>>>>>>        If (Length(Trim(sPath)) = iRSBPos) Begin // It ends here
35689>>>>>>>>>            Send Destroy of hoJson
35690>>>>>>>>>            Function_Return hoMemb
35691>>>>>>>>>        End
35691>>>>>>>>>>
35691>>>>>>>>>
35691>>>>>>>>>        Move (Right(sPath, (Length(sPath) - iRSBPos))) to sPath
35692>>>>>>>>>        If (Left(sPath, 1) = ".") ;            Move (Replace(".", sPath, "")) to sPath
35695>>>>>>>>>        Get ObjectHandle hoMemb sPath to hoObj
35696>>>>>>>>>        Send Destroy of hoJson
35697>>>>>>>>>        Function_Return hoObj
35698>>>>>>>>>    End_Function
35699>>>>>>>>>    
35699>>>>>>>>>    Function ObjectHandle Handle hoJson String sPath Returns Handle
35701>>>>>>>>>        Integer iLSBPos iDotPos iPos
35701>>>>>>>>>        String  sMemb
35701>>>>>>>>>        Handle  hoMemb hoObj
35701>>>>>>>>>
35701>>>>>>>>>        If not hoJson ;            Function_Return 0
35704>>>>>>>>>        
35704>>>>>>>>>        If (sPath = "") Begin
35706>>>>>>>>>            Send Destroy of hoJson
35707>>>>>>>>>            Function_Return 0
35708>>>>>>>>>        End
35708>>>>>>>>>>
35708>>>>>>>>>            
35708>>>>>>>>>        If (Left(sPath, 1) = "[") ;            Function_Return (ArrayHandle(Self, hoJson, sPath))
35711>>>>>>>>>        
35711>>>>>>>>>        Move (Pos(".", sPath))      to iDotPos
35712>>>>>>>>>        Move (Pos("[", sPath))      to iLSBPos
35713>>>>>>>>>        
35713>>>>>>>>>        If (iLSBPos and iDotPos) ;            Move (iDotPos min iLSBPos)  to iPos
35716>>>>>>>>>        Else If (iDotPos) ;            Move iDotPos                to iPos
35720>>>>>>>>>        Else ;            Move iLSBPos                to iPos
35722>>>>>>>>>        
35722>>>>>>>>>        If not iPos Begin  // We are there!
35724>>>>>>>>>            
35724>>>>>>>>>            If (HasMember(hoJson, sPath)) Begin
35726>>>>>>>>>                Get Member of hoJson sPath to hoMemb
35727>>>>>>>>>                Send Destroy of hoJson
35728>>>>>>>>>                Function_Return hoMemb
35729>>>>>>>>>            End
35729>>>>>>>>>>
35729>>>>>>>>>            Else Begin
35730>>>>>>>>>                Send Destroy of hoJson
35731>>>>>>>>>                Function_Return 0
35732>>>>>>>>>            End
35732>>>>>>>>>>
35732>>>>>>>>>        
35732>>>>>>>>>        End
35732>>>>>>>>>>
35732>>>>>>>>>        
35732>>>>>>>>>        Move (Left(sPath, (iPos - 1)))    to sMemb
35733>>>>>>>>>        
35733>>>>>>>>>        If (HasMember(hoJson, sMemb)) Begin
35735>>>>>>>>>            Get Member of hoJson sMemb to hoMemb
35736>>>>>>>>>            Send Destroy of hoJson
35737>>>>>>>>>            Move (Right(sPath, (Length(sPath) - iPos + 1))) to sPath
35738>>>>>>>>>            If (Left(sPath, 1) = ".") ;                Move (Replace(".", sPath, "")) to sPath
35741>>>>>>>>>            Get ObjectHandle hoMemb sPath to hoObj
35742>>>>>>>>>            Function_Return hoObj
35743>>>>>>>>>        End
35743>>>>>>>>>>
35743>>>>>>>>>        
35743>>>>>>>>>        Send Destroy of hoJson
35744>>>>>>>>>        Function_Return 0
35745>>>>>>>>>    End_Function
35746>>>>>>>>>    
35746>>>>>>>>>    Function JsonAtPath Handle hoJson String sPath Returns Handle
35748>>>>>>>>>        Handle  hoObj
35748>>>>>>>>>        UChar[] ucaJson
35749>>>>>>>>>        Boolean bOK
35749>>>>>>>>>        
35749>>>>>>>>>        If (not(hoJson) or (sPath = "")) ;            Function_Return 0
35752>>>>>>>>>        
35752>>>>>>>>>        // Do this to "copy" hoJson to hoObj, so hoJson does not get destroyed
35752>>>>>>>>>        // in the process
35752>>>>>>>>>        Get StringifyUtf8 of hoJson to ucaJson
35753>>>>>>>>>        Get CreateNamed (RefClass(cJsonObject)) "CopyJson" to hoObj
35754>>>>>>>>>        Get ParseUtf8 of hoObj ucaJson to bOK
35755>>>>>>>>>        Function_Return (ObjectHandle(Self, hoObj, sPath))
35756>>>>>>>>>    End_Function
35757>>>>>>>>>    
35757>>>>>>>>>    Function ValueAtPath Handle hoJson String sPath Returns String
35759>>>>>>>>>        Handle  hoObj
35759>>>>>>>>>        String  sVal
35759>>>>>>>>>        Integer iType
35759>>>>>>>>>        
35759>>>>>>>>>        Get JsonAtPath hoJson sPath to hoObj
35760>>>>>>>>>
35760>>>>>>>>>        If hoObj Begin
35762>>>>>>>>>            Get JsonType of hoObj to iType
35763>>>>>>>>>            
35763>>>>>>>>>            If ((iType <> jsonTypeObject) and ;                (iType <> jsonTypeArray) and ;                (iType <> jsonTypeNull)) ;                Move (JsonValue(hoObj)) to sVal
35766>>>>>>>>>            
35766>>>>>>>>>            Send Destroy of hoObj
35767>>>>>>>>>        End
35767>>>>>>>>>>
35767>>>>>>>>>        
35767>>>>>>>>>        Function_Return sVal
35768>>>>>>>>>    End_Function
35769>>>>>>>>>    
35769>>>>>>>>>    Function CountAtPath Handle hoJson String sPath Returns Integer
35771>>>>>>>>>        Integer iCount
35771>>>>>>>>>        
35771>>>>>>>>>        Get JsonAtPath hoJson sPath to hoJson
35772>>>>>>>>>        
35772>>>>>>>>>        If not hoJson ;            Function_Return 0
35775>>>>>>>>>        
35775>>>>>>>>>        If (JsonType(hoJson) = jsonTypeArray) ;            Get MemberCount of hoJson to iCount
35778>>>>>>>>>            
35778>>>>>>>>>        Send Destroy of hoJson
35779>>>>>>>>>        Function_Return iCount
35780>>>>>>>>>    End_Function
35781>>>>>>>>>
35781>>>>>>>>>End_Class
35782>>>>>>>Use cGeoHttpTransfer.pkg
Including file: cGeoHttpTransfer.pkg    (C:\Projects\LeafletTest\AppSrc\cGeoHttpTransfer.pkg)
35782>>>>>>>>>Use cHttpTransfer.pkg
35782>>>>>>>>>
35782>>>>>>>>>Class cGeoHttpTransfer is a cHttpTransfer
35783>>>>>>>>>    
35783>>>>>>>>>    Procedure Construct_Object
35785>>>>>>>>>        Forward Send Construct_Object
35787>>>>>>>>>        
35787>>>>>>>>>        Property UChar[] pucaData
35788>>>>>>>>>        Property String  psContentType
35789>>>>>>>>>        
35789>>>>>>>>>        // Make these the defaults, override in object if different
35789>>>>>>>>>        Set piRemotePort    to 443
35790>>>>>>>>>        Set peTransferFlags to ifSecure        
35791>>>>>>>>>    End_Procedure
35792>>>>>>>>>    
35792>>>>>>>>>    Procedure OnDataReceived String sContentType String sData
35794>>>>>>>>>        UChar[] ucaData
35795>>>>>>>>>        
35795>>>>>>>>>        Get pucaData to ucaData
35796>>>>>>>>>        Move (AppendArray(ucaData, StringToUCharArray(sData))) to ucaData
35797>>>>>>>>>        Set pucaData to ucaData
35798>>>>>>>>>    End_Procedure
35799>>>>>>>>>    
35799>>>>>>>>>    Procedure Reset
35801>>>>>>>>>        UChar[] empty
35802>>>>>>>>>        
35802>>>>>>>>>        Set psContentType   to ""
35803>>>>>>>>>        Set pucaData        to empty
35804>>>>>>>>>        Send ClearHeaders
35805>>>>>>>>>    End_Procedure
35806>>>>>>>>>        
35806>>>>>>>>>End_Class
35807>>>>>>>Use cGeocodeHost.pkg
Including file: cGeocodeHost.pkg    (C:\Projects\LeafletTest\AppSrc\cGeocodeHost.pkg)
35807>>>>>>>>>Use UI
35807>>>>>>>>>
35807>>>>>>>>>Class cGeocodeHost is a cObject
35808>>>>>>>>>    
35808>>>>>>>>>    Procedure Construct_Object
35810>>>>>>>>>        Forward Send Construct_Object
35812>>>>>>>>>        
35812>>>>>>>>>        Property String[] pasConnectorIDs
35813>>>>>>>>>        Property String[] pasConnectorNames
35814>>>>>>>>>        Property Handle[] pahConnectorObjects
35815>>>>>>>>>    End_Procedure
35816>>>>>>>>>    
35816>>>>>>>>>    Procedure RegisterGeocodeConnector Handle hoObject String sID String sName
35818>>>>>>>>>        String[] asIDs asNames
35820>>>>>>>>>        Handle[] ahObjs
35821>>>>>>>>>        Integer  iIdx
35821>>>>>>>>>        
35821>>>>>>>>>        Get pahConnectorObjects     to ahObjs
35822>>>>>>>>>        
35822>>>>>>>>>        Move (SearchArray(hoObject, ahObjs)) to iIdx
35823>>>>>>>>>        
35823>>>>>>>>>        If (iIdx = -1) Begin  // Not already registered
35825>>>>>>>>>            Move (SizeOfArray(ahObjs)) to iIdx
35826>>>>>>>>>            Get pasConnectorIDs     to asIDs
35827>>>>>>>>>            Get pasConnectorNames   to asNames
35828>>>>>>>>>            
35828>>>>>>>>>            Move hoObject           to ahObjs[iIdx]
35829>>>>>>>>>            Move sID                to asIDs[iIdx]
35830>>>>>>>>>            Move sName              to asNames[iIdx]
35831>>>>>>>>>            
35831>>>>>>>>>            Set pasConnectorIDs     to asIDs
35832>>>>>>>>>            Set pasConnectorNames   to asNames
35833>>>>>>>>>            Set pahConnectorObjects to ahObjs
35834>>>>>>>>>        End
35834>>>>>>>>>>
35834>>>>>>>>>        
35834>>>>>>>>>    End_Procedure
35835>>>>>>>>>    
35835>>>>>>>>>    Function ConnectorObjectFromID String sID Returns Handle
35837>>>>>>>>>        String[] asIDs
35838>>>>>>>>>        Handle[] ahObjs
35839>>>>>>>>>        Integer  iIdx
35839>>>>>>>>>        
35839>>>>>>>>>        Get pasConnectorIDs to asIDs
35840>>>>>>>>>        
35840>>>>>>>>>        Move (SearchArray(sID, asIDs)) to iIDx
35841>>>>>>>>>        
35841>>>>>>>>>        If (iIdx = -1) ;            Function_Return 0
35844>>>>>>>>>
35844>>>>>>>>>        Get pahConnectorObjects to ahObjs        
35845>>>>>>>>>        Function_Return ahObjs[iIdx]
35846>>>>>>>>>    End_Function
35847>>>>>>>>>
35847>>>>>>>>>End_Class
35848>>>>>>>
35848>>>>>>>Class cGeocodeConnector is a cObject
35849>>>>>>>    
35849>>>>>>>    Procedure Construct_Object
35851>>>>>>>        Forward Send Construct_Object
35853>>>>>>>
35853>>>>>>>        Property String     psName
35854>>>>>>>        Property String     psID
35855>>>>>>>        Property String     psHost
35856>>>>>>>        Property String     psPath
35857>>>>>>>        Property String     psKey
35858>>>>>>>        Property String     psError
35859>>>>>>>        Property Number     pnLat
35860>>>>>>>        Property Number     pnLng
35861>>>>>>>        Property String     psMarker
35862>>>>>>>        Property Integer    piZoom          12
35863>>>>>>>        Property Integer    piMaxZoom       22
35864>>>>>>>        Property String     psDisplayName
35865>>>>>>>        Property String     psWebSite
35866>>>>>>>        Property Boolean    pbFitMap        True
35867>>>>>>>        Property Number[]   panBoundingBox
35868>>>>>>>        
35868>>>>>>>        Property String     psQuery
35869>>>>>>>        
35869>>>>>>>        Object oHttp is a cGeoHttpTransfer
35871>>>>>>>            Set piRemotePort    to rpHttpSSL
35872>>>>>>>            Set peTransferFlags to ifSecure
35873>>>>>>>        End_Object
35874>>>>>>>        
35874>>>>>>>        Object oJPath is a cJsonPath
35876>>>>>>>        End_Object
35877>>>>>>>        
35877>>>>>>>    End_Procedure
35878>>>>>>>    
35878>>>>>>>    Function CallPath String sPath String sKey String sQuery Returns String
35880>>>>>>>        Function_Return (sPath + "?" + sKey + "&" + sQuery)
35881>>>>>>>    End_Function
35882>>>>>>>    
35882>>>>>>>    Function DoGeoQuery String sQuery Returns Handle
35884>>>>>>>        Boolean bOK
35884>>>>>>>        Integer iStat
35884>>>>>>>        Handle  hoResp
35884>>>>>>>        String  sCall
35884>>>>>>>        
35884>>>>>>>        Set psQuery to sQuery
35885>>>>>>>        
35885>>>>>>>        Send Reset of oHttp
35886>>>>>>>        Set pnLat to 100 // Invalid latitude
35887>>>>>>>        Set psError to ""
35888>>>>>>>        
35888>>>>>>>        Move (CallPath(Self, psPath(Self), psKey(Self), sQuery)) to sCall
35889>>>>>>>        
35889>>>>>>>        Get HTTPGetRequest of oHttp sCall to bOK
35890>>>>>>>        
35890>>>>>>>        If bOK Begin
35892>>>>>>>            Get ResponseStatusCode of oHttp to iStat
35893>>>>>>>            
35893>>>>>>>            If ((iStat >=200) and (iStat < 300)) Begin
35895>>>>>>>                Get Create (RefClass(cJsonObject)) to hoResp
35896>>>>>>>                Set peWhiteSpace of hoResp to jpWhitespace_Pretty
35897>>>>>>>                Set pbEscapeForwardSlash of hoResp to False
35898>>>>>>>                Get ParseUtf8 of hoResp (pucaData(oHttp(Self))) to bOK
35899>>>>>>>                
35899>>>>>>>                If bOK Begin
35901>>>>>>>                    Send ExtractData hoResp
35902>>>>>>>                    Function_Return hoResp
35903>>>>>>>                End
35903>>>>>>>>
35903>>>>>>>                Else Begin
35904>>>>>>>                    Set psError to ("JSON Error -" * psParseError(hoResp))
35905>>>>>>>                    Send Destroy of hoResp
35906>>>>>>>                End
35906>>>>>>>>
35906>>>>>>>                
35906>>>>>>>            End
35906>>>>>>>>
35906>>>>>>>            Else ;                Set psError to ("HTTP Status" * String(iStat))
35908>>>>>>>        End
35908>>>>>>>>
35908>>>>>>>        Else ;            Set psError to "HTTP request failed"
35910>>>>>>>        
35910>>>>>>>        Function_Return 0
35911>>>>>>>    End_Function
35912>>>>>>>    
35912>>>>>>>    Function FreeQuery String sQuery Returns Handle
35914>>>>>>>        Set psError to "Not implemented"
35915>>>>>>>        Function_Return 0
35916>>>>>>>    End_Function
35917>>>>>>>    
35917>>>>>>>    Function StructuredQuery String[] asParams Returns Handle
35919>>>>>>>        Set psError to "Not implemented"
35920>>>>>>>        Function_Return 0
35921>>>>>>>    End_Function
35922>>>>>>>    
35922>>>>>>>    Function PostcodeQuery String sCountry String sPostcode Returns Handle
35924>>>>>>>        Set psError to "Not implemented"
35925>>>>>>>        Function_Return 0
35926>>>>>>>    End_Function
35927>>>>>>>    
35927>>>>>>>    Procedure ExtractData Handle hoJson
35929>>>>>>>    End_Procedure
35930>>>>>>>    
35930>>>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
35932>>>>>>>        Send GeoContributor of hoMap (psName(Self)) (psWebSite(Self)) "GeoLocation" True
35933>>>>>>>        Send DrawMap of hoMap (pnLat(Self)) (pnLng(Self)) (piZoom(Self)) (piMaxZoom(Self))        
35934>>>>>>>    End_Procedure
35935>>>>>>>    
35935>>>>>>>    Procedure PlaceMarker Handle hoMap String sMarker
35937>>>>>>>        Number nLat nLng
35937>>>>>>>        
35937>>>>>>>        If not hoMap ;            Procedure_Return
35940>>>>>>>            
35940>>>>>>>        Get pnLat to nLat
35941>>>>>>>        Get pnLng to nLng
35942>>>>>>>        
35942>>>>>>>        If (nLat = 100) ;  // Invalid latitude            Procedure_Return
35945>>>>>>>        
35945>>>>>>>        Send DrawMarker of hoMap nLat nLng (psDisplayName(Self)) sMarker False
35946>>>>>>>    End_Procedure
35947>>>>>>>    
35947>>>>>>>    Procedure End_Construct_Object
35949>>>>>>>        Forward Send End_Construct_Object
35951>>>>>>>        
35951>>>>>>>        Set psRemoteHost of oHttp to (psHost(Self))
35952>>>>>>>
35952>>>>>>>        If (ObjectClass(Parent(Self)) = RefClass(cGeocodeHost)) ;            Delegate Send RegisterGeocodeConnector Self (psID(Self)) (psName(Self))
35956>>>>>>>    End_Procedure
35957>>>>>>>
35957>>>>>>>End_Class
35958>>>>>
35958>>>>>Class cLocationIQConnector is a cGeocodeConnector
35959>>>>>    
35959>>>>>    Procedure Construct_Object
35961>>>>>        Forward Send Construct_Object
35963>>>>>        
35963>>>>>        Set psHost      to "eu1.locationiq.com"
35964>>>>>        Set psPath      to "v1/search.php"
35965>>>>>        Set psKey       to (Config("tokens.locationIQKey"))
35966>>>>>        Set psName      to "Location IQ"
35967>>>>>        Set psID        to "LOCIQ"
35968>>>>>        Set psWebSite   to "https://locationiq.com/"
35969>>>>>    End_Procedure
35970>>>>>    
35970>>>>>    Function FreeQuery String sQuery Returns Handle
35972>>>>>        Handle hoJson
35972>>>>>        
35972>>>>>        Move (Replaces(" ", sQuery, "%20")) to sQuery
35973>>>>>        Move ("q=" + sQuery)                to sQuery
35974>>>>>        Get DoGeoQuery sQuery               to hoJson
35975>>>>>        
35975>>>>>        Function_Return hoJson
35976>>>>>    End_Function
35977>>>>>    
35977>>>>>    Function StructuredQuery String[] asParams Returns Handle
35979>>>>>        String   sQuery
35979>>>>>        String[] asQuery
35980>>>>>        Handle   hoJson
35980>>>>>        
35980>>>>>        If (asParams[0] <> "") ;            Move ("country="    + asParams[0])              to asQuery[SizeOfArray(asQuery)]
35983>>>>>        If (asParams[1] <> "") ;            Move ("postalcode=" + asParams[1])              to asQuery[SizeOfArray(asQuery)]
35986>>>>>        If (asParams[2] <> "") ;            Move ("state="      + asParams[2])              to asQuery[SizeOfArray(asQuery)]
35989>>>>>        If (asParams[3] <> "") ;            Move ("county="     + asParams[3])              to asQuery[SizeOfArray(asQuery)]
35992>>>>>        If (asParams[4] <> "") ;            Move ("city="       + asParams[4])              to asQuery[SizeOfArray(asQuery)]
35995>>>>>        If (asParams[6] <> "") ;            Move (asParams[6] * asParams[5])                to asParams[5]
35998>>>>>        If (asParams[5] <> "") ;            Move ("street="     + asParams[5])              to asQuery[SizeOfArray(asQuery)]
36001>>>>>
36001>>>>>        Move (StrJoinFromArray(asQuery, "&"))   to sQuery
36002>>>>>        Move (Replaces(" ", sQuery, "%20"))     to sQuery
36003>>>>>        Get DoGeoQuery sQuery                   to hoJson
36004>>>>>        
36004>>>>>        Function_Return hoJson
36005>>>>>    End_Function
36006>>>>>    
36006>>>>>    Function PostcodeQuery String sCountry String sPostcode Returns Handle
36008>>>>>        String  sQuery
36008>>>>>        Handle  hoJson
36008>>>>>        
36008>>>>>        Move ("postalcode=" + sPostcode + "&countrycodes=" + sCountry)  to sQuery
36009>>>>>        Move (Replaces(" ", sQuery, "%20"))                             to sQuery
36010>>>>>        Get DoGeoQuery sQuery                                           to hoJson
36011>>>>>        
36011>>>>>        Function_Return hoJson
36012>>>>>    End_Function
36013>>>>>    
36013>>>>>    Function CallPath String sPath String sKey String sQuery Returns String
36015>>>>>        String sCallPath
36015>>>>>        
36015>>>>>        Forward Get CallPath sPath sKey sQuery to sCallPath
36017>>>>>        
36017>>>>>        Move (sCallPath + "&format=json") to sCallPath
36018>>>>>        Function_Return sCallPath
36019>>>>>    End_Function
36020>>>>>    
36020>>>>>    Procedure ExtractData Handle hoJson
36022>>>>>        Number nLat nLng
36022>>>>>        Handle hoBox
36022>>>>>        Number[] anBox
36023>>>>>        
36023>>>>>        Set pnLat to (ValueAtPath(oJPath(Self), hoJson, "[0].lat"))
36024>>>>>        Set pnLng to (ValueAtPath(oJPath(Self), hoJson, "[0].lon"))
36025>>>>>        
36025>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "[0].boundingbox[0]")) to anBox[0]
36026>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "[0].boundingbox[1]")) to anBox[1]
36027>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "[0].boundingbox[2]")) to anBox[2]
36028>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "[0].boundingbox[3]")) to anBox[3]
36029>>>>>        Set panBoundingBox to anBox
36030>>>>>
36030>>>>>        Set psDisplayName to (ValueAtPath(oJPath(Self), hoJson, "[0].display_name"))
36031>>>>>    End_Procedure
36032>>>>>    
36032>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
36034>>>>>        Number[]  anBox
36035>>>>>        stPolygon tBox
36035>>>>>        stPolygon tBox
36035>>>>>        String    sName
36035>>>>>        
36035>>>>>        If not hoMap ;            Procedure_Return
36038>>>>>        If (pnLat(Self) = 100) ;            Procedure_Return
36041>>>>>
36041>>>>>        Forward Send DrawMap hoJson hoMap
36043>>>>>
36043>>>>>        // ToDo: work out correct zoom from bounding box maybe?
36043>>>>>        Get panBoundingBox to anBox
36044>>>>>        
36044>>>>>        If (SizeOfArray(anBox) = 4) Begin
36046>>>>>            Move anBox[0]   to tBox.aPoints[0][0]
36047>>>>>            Move anBox[2]   to tBox.aPoints[0][1]
36048>>>>>            
36048>>>>>            Move anBox[1]   to tBox.aPoints[1][0]
36049>>>>>            Move anBox[2]   to tBox.aPoints[1][1]
36050>>>>>            
36050>>>>>            Move anBox[1]   to tBox.aPoints[2][0]
36051>>>>>            Move anBox[3]   to tBox.aPoints[2][1]
36052>>>>>            
36052>>>>>            Move anBox[0]   to tBox.aPoints[3][0]
36053>>>>>            Move anBox[3]   to tBox.aPoints[3][1]
36054>>>>>            
36054>>>>>            Move (Config("defaults.polygon.lineColor"))     to tBox.sLineColor
36055>>>>>            Move (Config("defaults.polygon.lineWeight"))    to tBox.iLineWeight
36056>>>>>            Move (Config("defaults.polygon.lineOpacity"))   to tBox.nLineOpacity
36057>>>>>            Move (Config("defaults.polygon.fillColor"))     to tBox.sFillColor
36058>>>>>            Move (Config("defaults.polygon.fillOpacity"))   to tBox.nFillOpacity
36059>>>>>            
36059>>>>>            Move True to tBox.bStroke
36060>>>>>            Move (pbFitMap(Self)) to tBox.bFitMap
36061>>>>>            
36061>>>>>            Send DrawPolygon of hoMap tBox
36062>>>>>        End
36062>>>>>>
36062>>>>>        
36062>>>>>    End_Procedure
36063>>>>>    
36063>>>>>End_Class
36064>>>
36064>>>Object oSimpleMapTest is a cWebView
36066>>>    Set psCaption to "Simple Map Test"
36067>>>    
36067>>>    Delegate Set phoDefaultView to Self
36069>>>
36069>>>    Object oLocIQ is a cLocationIQConnector
36071>>>        Set pbFitMap to False
36072>>>    End_Object
36073>>>
36073>>>    Object oWebMainPanel is a cWebPanel
36075>>>        Set piColumnCount to 12
36076>>>        
36076>>>        Object oLocation is a cWebForm
36078>>>            Set piColumnSpan to 11
36079>>>            Set psLabel to "Location:"
36080>>>            Set peLabelAlign to alignRight
36081>>>            Set piLabelOffset to 80
36082>>>            Set psValue to "CPH Conference, Tietgensgade 65, 1704 Copenhagen, Denmark"
36083>>>        End_Object
36084>>>
36084>>>        Object oSend is a cWebButton
36086>>>            Set piColumnSpan to 1
36087>>>            Set piColumnIndex to 11
36088>>>            Set psCaption to "Send"
36089>>>        
36089>>>            Procedure OnClick
36092>>>                String sLoc
36092>>>                Handle hoJson
36092>>>                
36092>>>                WebGet psValue of oLocation     to sLoc
36095>>>                Get FreeQuery of oLocIQ sLoc    to hoJson
36096>>>                
36096>>>                If hoJson Begin
36098>>>                    Send DrawMap of oLocIQ hoJson (oMap(Self))
36099>>>                    Send PlaceMarker of oLocIQ (oMap(Self)) ""
36100>>>                    Send Destroy of hoJson
36101>>>                End
36101>>>>
36101>>>                Else ;                    Send ShowInfoBox (psError(oLocIQ)) "Request Failed"
36103>>>                
36103>>>            End_Procedure
36104>>>            
36104>>>        End_Object
36105>>>
36105>>>        Object oWebSpacer1 is a cWebSpacer
36107>>>        End_Object
36108>>>        
36108>>>        Object oMap is a cLeafletMappingControl
36110>>>        End_Object
36111>>>        
36111>>>    End_Object 
36112>>>
36112>>>End_Object
36113>    Use TestGeoMap.wo
Including file: TestGeoMap.wo    (C:\Projects\LeafletTest\AppSrc\TestGeoMap.wo)
36113>>>Use cWebView.pkg
36113>>>Use cWebPanel.pkg
36113>>>Use cWebForm.pkg
36113>>>Use cWebCheckBox.pkg
36113>>>Use cWebCombo.pkg
36113>>>Use cWebSpacer.pkg
36113>>>Use cWebButton.pkg
36113>>>Use cWebHorizontalLine.pkg
36113>>>
36113>>>Use cLeafletMappingControl.pkg
36113>>>Use cGeocodeHost.pkg
36113>>>
36113>>>Use GeoConnectors\cLocationIQConnector.pkg
36113>>>Use GeoConnectors\cMapQuestOpenConnector.pkg
Including file: GeoConnectors\cMapQuestOpenConnector.pkg    (C:\Projects\LeafletTest\AppSrc\GeoConnectors\cMapQuestOpenConnector.pkg)
36113>>>>>Use cGeocodeConnector.pkg
36113>>>>>
36113>>>>>Class cMapQuestOpenConnector is a cGeocodeConnector
36114>>>>>    
36114>>>>>    Procedure Construct_Object
36116>>>>>        Forward Send Construct_Object
36118>>>>>
36118>>>>>        Set psHost      to "open.mapquestapi.com"
36119>>>>>        Set psPath      to "geocoding/v1/address"
36120>>>>>        Set psKey       to (Config("tokens.mapQuestOpenKey"))
36121>>>>>        Set psName      to "Open MapQuest"
36122>>>>>        Set psID        to "OMAPQ"
36123>>>>>        Set psWebSite   to "https://developer.mapquest.com/"
36124>>>>>    End_Procedure
36125>>>>>    
36125>>>>>    Function FreeQuery String sQuery Returns Handle
36127>>>>>        Handle hoJson
36127>>>>>        
36127>>>>>        Move (Replaces(" ", sQuery, "%20")) to sQuery
36128>>>>>        Move ("location=" + sQuery)         to sQuery
36129>>>>>        Get DoGeoQuery sQuery               to hoJson
36130>>>>>        
36130>>>>>        Function_Return hoJson
36131>>>>>    End_Function
36132>>>>>    
36132>>>>>    Function StructuredQuery String[] asParams Returns Handle
36134>>>>>        String[] asQuery
36135>>>>>        String   sQuery
36135>>>>>        Handle   hoJson
36135>>>>>        Integer  i iMax
36135>>>>>        
36135>>>>>        Move (SizeOfArray(asParams) - 1) to iMax
36136>>>>>        
36136>>>>>        For i from 0 to iMax
36142>>>>>>
36142>>>>>            Move (Replaces(" ", asParams[i], "+")) to asParams[i]
36143>>>>>        Loop        
36144>>>>>>
36144>>>>>
36144>>>>>        If (asParams[0] <> "") ;            Move ("country=" + asParams[0])                 to asQuery[SizeOfArray(asQuery)]
36147>>>>>        If (asParams[1] <> "") ;            Move ("postalCode=" + asParams[1])              to asQuery[SizeOfArray(asQuery)]
36150>>>>>        If (asParams[2] <> "") ;            Move ("state=" + asParams[2])                   to asQuery[SizeOfArray(asQuery)]
36153>>>>>        If (asParams[3] <> "") ;            Move ("county=" + asParams[3])                  to asQuery[SizeOfArray(asQuery)]
36156>>>>>        If (asParams[4] <> "") ;            Move ("city=" + asParams[4])                    to asQuery[SizeOfArray(asQuery)]
36159>>>>>        If (asParams[6] <> "") ;            Move (asParams[6] * asParams[5])                to asParams[5]
36162>>>>>        If (asParams[5] <> "") ;            Move ("street=" + asParams[5])                  to asQuery[SizeOfArray(asQuery)]
36165>>>>>        
36165>>>>>        Move (StrJoinFromArray(asQuery, "&"))   to sQuery
36166>>>>>        Move (Replaces(" ", sQuery, "%20"))     to sQuery
36167>>>>>        Get DoGeoQuery sQuery to hoJson
36168>>>>>        
36168>>>>>        Function_Return hoJson
36169>>>>>    End_Function
36170>>>>>    
36170>>>>>    Function PostcodeQuery String sCountry String sPostcode Returns Handle
36172>>>>>        String sQuery
36172>>>>>        Handle hoJson
36172>>>>>        
36172>>>>>        Move ("postalCode=" + sPostcode + "&" + "country=" + sCountry) to sQuery
36173>>>>>        Move (Replaces(" ", sQuery, "%20")) to sQuery
36174>>>>>        Get DoGeoQuery sQuery to hoJson
36175>>>>>        
36175>>>>>        Function_Return hoJson
36176>>>>>    End_Function
36177>>>>>    
36177>>>>>    Procedure ExtractData Handle hoJson
36179>>>>>        Number nLat nLng
36179>>>>>        Handle hoBox
36179>>>>>        Number[] anBox
36180>>>>>        String sVal sAddr
36180>>>>>        
36180>>>>>        Set pnLat to (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].latLng.lat"))
36181>>>>>        Set pnLng to (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].latLng.lng"))
36182>>>>>        
36182>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].street")) to sVal            
36183>>>>>        If (sVal <> "") ;            Move (sAddr + If((Length(sAddr)), ", ", "") + sVal) to sAddr
36186>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].adminArea6")) to sVal
36187>>>>>        If (sVal <> "") ;            Move (sAddr + If((Length(sAddr)), ", ", "") + sVal) to sAddr
36190>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].adminArea5")) to sVal
36191>>>>>        If (sVal <> "") ;            Move (sAddr + If((Length(sAddr)), ", ", "") + sVal) to sAddr
36194>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].adminArea4")) to sVal
36195>>>>>        If (sVal <> "") ;            Move (sAddr + If((Length(sAddr)), ", ", "") + sVal) to sAddr
36198>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].adminArea3")) to sVal
36199>>>>>        If (sVal <> "") ;            Move (sAddr + If((Length(sAddr)), ", ", "") + sVal) to sAddr
36202>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].adminArea2")) to sVal
36203>>>>>        If (sVal <> "") ;            Move (sAddr + If((Length(sAddr)), ", ", "") + sVal) to sAddr
36206>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].postalCode")) to sVal
36207>>>>>        If (sVal <> "") ;            Move (sAddr + If((Length(sAddr)), ", ", "") + sVal) to sAddr
36210>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "results[0].locations[0].adminArea1")) to sVal
36211>>>>>        If (sVal <> "") ;            Move (sAddr + If((Length(sAddr)), ", ", "") + sVal) to sAddr
36214>>>>>        
36214>>>>>        Set psDisplayName to sAddr
36215>>>>>    End_Procedure
36216>>>>>    
36216>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
36218>>>>>        Number[]  anBox
36219>>>>>        stPolygon tBox
36219>>>>>        stPolygon tBox
36219>>>>>        String    sName
36219>>>>>        
36219>>>>>        If not hoMap ;            Procedure_Return
36222>>>>>        If (pnLat(Self) = 100) ;            Procedure_Return
36225>>>>>        
36225>>>>>        Forward Send DrawMap hoJson hoMap
36227>>>>>
36227>>>>>        Send DrawMap of hoMap (pnLat(Self)) (pnLng(Self)) (piZoom(Self)) (piMaxZoom(Self))
36228>>>>>    End_Procedure
36229>>>>>
36229>>>>>End_Class
36230>>>Use GeoConnectors\cHereConnector.pkg
Including file: GeoConnectors\cHereConnector.pkg    (C:\Projects\LeafletTest\AppSrc\GeoConnectors\cHereConnector.pkg)
36230>>>>>Use cGeocodeConnector.pkg
36230>>>>>
36230>>>>>Class cHereConnector is a cGeocodeConnector
36231>>>>>    
36231>>>>>    Procedure Construct_Object
36233>>>>>        Forward Send Construct_Object
36235>>>>>        
36235>>>>>        Set psHost      to "geocoder.ls.hereapi.com"
36236>>>>>        Set psPath      to "6.2/geocode.json"
36237>>>>>        Set psKey       to (Config("tokens.hereKey"))
36238>>>>>        Set psName      to "Here Geocoding"
36239>>>>>        Set psID        to "HERE"
36240>>>>>        Set psWebSite   to "https://www.here.com/"
36241>>>>>    End_Procedure
36242>>>>>    
36242>>>>>    Function FreeQuery String sQuery Returns Handle
36244>>>>>        Handle  hoJson
36244>>>>>        Boolean bOK
36244>>>>>        
36244>>>>>        Move (Replaces(" ", sQuery, "%20")) to sQuery
36245>>>>>        Move ("searchtext=" + sQuery)       to sQuery
36246>>>>>        Get DoGeoQuery sQuery               to hoJson
36247>>>>>        
36247>>>>>        Function_Return hoJson
36248>>>>>    End_Function
36249>>>>>    
36249>>>>>    Function StructuredQuery String[] asParams Returns Handle
36251>>>>>        String   sQuery
36251>>>>>        String[] asQuery
36252>>>>>        Handle   hoJson
36252>>>>>        
36252>>>>>        If (asParams[6] <> "") ;            Move ("housenumber=" + asParams[6]) to asQuery[SizeOfArray(asQuery)]
36255>>>>>        If (asParams[5] <> "") ;            Move ("street="      + asParams[5]) to asQuery[SizeOfArray(asQuery)]
36258>>>>>        If (asParams[4] <> "") ;            Move ("city="        + asParams[4]) to asQuery[SizeOfArray(asQuery)]
36261>>>>>        If (asParams[0] <> "") ;            Move ("country="     + asParams[0]) to asQuery[SizeOfArray(asQuery)]
36264>>>>>
36264>>>>>        Move (StrJoinFromArray(asQuery, "&"))   to sQuery
36265>>>>>        Move (Replaces(" ", sQuery, "%20"))     to sQuery
36266>>>>>        Get DoGeoQuery sQuery                   to hoJson
36267>>>>>        
36267>>>>>        Function_Return hoJson
36268>>>>>    End_Function
36269>>>>>    
36269>>>>>    Procedure ExtractData Handle hoJson
36271>>>>>        Number[] anBox
36272>>>>>        
36272>>>>>        Set pnLat to (ValueAtPath(oJPath(Self), hoJson, "Response.View[0].Result[0].Location.DisplayPosition.Latitude"))
36273>>>>>        Set pnLng to (ValueAtPath(oJPath(Self), hoJson, "Response.View[0].Result.[0]Location.DisplayPosition.Longitude"))
36274>>>>>        Set psDisplayName to (ValueAtPath(oJPath(Self), hoJson, "Response.View[0].Result[0].Location.Address.Label"))
36275>>>>>        
36275>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "Response.View[0].Result[0].Location.MapView.TopLeft.Latitude"))         to anBox[0]
36276>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "Response.View[0].Result[0].Location.MapView.TopLeft.Longitude"))        to anBox[1]
36277>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "Response.View[0].Result[0].Location.MapView.BottomRight.Latitude"))     to anBox[2]
36278>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "Response.View[0].Result[0].Location.MapView.BottomRight.Longitude"))    to anBox[3]
36279>>>>>        
36279>>>>>        Set panBoundingBox to anBox
36280>>>>>    End_Procedure
36281>>>>>    
36281>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
36283>>>>>        Number[]  anBox
36284>>>>>        stPolygon tBox
36284>>>>>        stPolygon tBox
36284>>>>>        String    sName
36284>>>>>        
36284>>>>>        If not hoMap ;            Procedure_Return
36287>>>>>        If (pnLat(Self) = 100) ;            Procedure_Return
36290>>>>>
36290>>>>>        // ToDo: work out correct zoom from bounding box maybe?
36290>>>>>        Forward Send DrawMap hoJson hoMap
36292>>>>>
36292>>>>>        Send DrawMap of hoMap (pnLat(Self)) (pnLng(Self)) (piZoom(Self)) (piMaxZoom(Self))
36293>>>>>        
36293>>>>>        Get panBoundingBox to anBox
36294>>>>>        
36294>>>>>        If (SizeOfArray(anBox) = 4) Begin
36296>>>>>            Move anBox[0]   to tBox.aPoints[0][0]
36297>>>>>            Move anBox[1]   to tBox.aPoints[0][1]
36298>>>>>            
36298>>>>>            Move anBox[2]   to tBox.aPoints[1][0]
36299>>>>>            Move anBox[1]   to tBox.aPoints[1][1]
36300>>>>>            
36300>>>>>            Move anBox[2]   to tBox.aPoints[2][0]
36301>>>>>            Move anBox[3]   to tBox.aPoints[2][1]
36302>>>>>            
36302>>>>>            Move anBox[0]   to tBox.aPoints[3][0]
36303>>>>>            Move anBox[3]   to tBox.aPoints[3][1]
36304>>>>>            
36304>>>>>            Move (Config("defaults.polygon.lineColor"))     to tBox.sLineColor
36305>>>>>            Move (Config("defaults.polygon.lineWeight"))    to tBox.iLineWeight
36306>>>>>            Move (Config("defaults.polygon.lineOpacity"))   to tBox.nLineOpacity
36307>>>>>            Move (Config("defaults.polygon.fillColor"))     to tBox.sFillColor
36308>>>>>            Move (Config("defaults.polygon.fillOpacity"))   to tBox.nFillOpacity
36309>>>>>            
36309>>>>>            Move True to tBox.bStroke
36310>>>>>            Move (pbFitMap(Self)) to tBox.bFitMap
36311>>>>>
36311>>>>>            Send DrawPolygon of hoMap tBox
36312>>>>>        End
36312>>>>>>
36312>>>>>        
36312>>>>>    End_Procedure
36313>>>>>    
36313>>>>>End_Class
36314>>>Use GeoConnectors\cPositionStackConnector.pkg
Including file: GeoConnectors\cPositionStackConnector.pkg    (C:\Projects\LeafletTest\AppSrc\GeoConnectors\cPositionStackConnector.pkg)
36314>>>>>Use cGeocodeConnector.pkg
36314>>>>>
36314>>>>>Class cPositionStackConnector is a cGeocodeConnector
36315>>>>>    
36315>>>>>    Procedure Construct_Object
36317>>>>>        Forward Send Construct_Object
36319>>>>>
36319>>>>>        Set psHost      to "api.positionstack.com"
36320>>>>>        Set psPath      to "v1/forward"
36321>>>>>        Set psKey       to (Config("tokens.positionStackKey"))
36322>>>>>        Set psName      to "Position Stack"
36323>>>>>        Set psID        to "POSSTK"
36324>>>>>        Set psWebSite   to "https://positionstack.com/"
36325>>>>>        
36325>>>>>        // Position Stack free plan doesn't use HTTPS, so:
36325>>>>>        Set piRemotePort    of oHttp to rpHttp
36326>>>>>        Set peTransferFlags of oHttp to 0
36327>>>>>    End_Procedure
36328>>>>>    
36328>>>>>    Function FreeQuery String sQuery Returns Handle
36330>>>>>        Handle  hoJson
36330>>>>>        Boolean bOK
36330>>>>>        
36330>>>>>        Move (Replaces(" ", sQuery, "%20")) to sQuery
36331>>>>>        Move ("query=" + sQuery)            to sQuery
36332>>>>>        Get DoGeoQuery sQuery               to hoJson
36333>>>>>        
36333>>>>>        Function_Return hoJson
36334>>>>>    End_Function
36335>>>>>    
36335>>>>>    Function StructuredQuery String[] asParams Returns Handle
36337>>>>>        String[] asQuery
36338>>>>>        String   sQuery
36338>>>>>        Handle   hoJson
36338>>>>>        
36338>>>>>        If (asParams[6] <> "") ;            Move (asParams[6] * asParams[5])    to asParams[5]
36341>>>>>        If (asParams[5] <> "") ;                   Move asParams[5]                    to asQuery[SizeOfArray(asQuery)]
36344>>>>>        If (asParams[4] <> "") ;            Move asParams[4]                    to asQuery[SizeOfArray(asQuery)]
36347>>>>>        If (asParams[3] <> "") ;            Move asParams[3]                    to asQuery[SizeOfArray(asQuery)]
36350>>>>>        If (asParams[2] <> "") ;            Move asParams[2]                    to asQuery[SizeOfArray(asQuery)]
36353>>>>>        If (asParams[1] <> "") ;            Move asParams[1]                    to asQuery[SizeOfArray(asQuery)]
36356>>>>>        If (asParams[0] <> "") ;            Move asParams[0]                    to asQuery[SizeOfArray(asQuery)]
36359>>>>>        
36359>>>>>        Move (StrJoinFromArray(asQuery, ", "))  to sQuery
36360>>>>>        Move (Replaces(" ", sQuery, "%20"))     to sQuery
36361>>>>>        Get DoGeoQuery ("query=" + sQuery)      to hoJson
36362>>>>>        
36362>>>>>        Function_Return hoJson
36363>>>>>    End_Function
36364>>>>>    
36364>>>>>    Function PostcodeQuery String sCountry String sPostcode Returns Handle
36366>>>>>        String  sQuery
36366>>>>>        Handle  hoJson
36366>>>>>        
36366>>>>>        Move ("query=" + sPostcode + ", " + sCountry)   to sQuery
36367>>>>>        Move (Replaces(" ", sQuery, "%20"))     to sQuery
36368>>>>>        Get DoGeoQuery sQuery                           to hoJson
36369>>>>>        
36369>>>>>        Function_Return hoJson
36370>>>>>    End_Function
36371>>>>>    
36371>>>>>    Procedure ExtractData Handle hoJson
36373>>>>>        Number nLat nLng
36373>>>>>        Handle hoBox
36373>>>>>        Number[] anBox
36374>>>>>        
36374>>>>>        Set pnLat to (ValueAtPath(oJPath(Self), hoJson, "data.[0].latitude"))
36375>>>>>        Set pnLng to (ValueAtPath(oJPath(Self), hoJson, "data.[0].longitude"))
36376>>>>>
36376>>>>>        Set psDisplayName to (ValueAtPath(oJPath(Self), hoJson, "data.[0].label"))
36377>>>>>    End_Procedure
36378>>>>>    
36378>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
36380>>>>>        Number[]  anBox
36381>>>>>        stPolygon tBox
36381>>>>>        stPolygon tBox
36381>>>>>        String    sName
36381>>>>>        
36381>>>>>        If not hoMap ;            Procedure_Return
36384>>>>>        If (pnLat(Self) = 100) ;            Procedure_Return
36387>>>>>
36387>>>>>        Forward Send DrawMap hoJson hoMap
36389>>>>>
36389>>>>>        Send DrawMap of hoMap (pnLat(Self)) (pnLng(Self)) (piZoom(Self)) (piMaxZoom(Self))
36390>>>>>    End_Procedure
36391>>>>>    
36391>>>>>End_Class
36392>>>Use GeoConnectors\cGeocodeIOConnector.pkg
Including file: GeoConnectors\cGeocodeIOConnector.pkg    (C:\Projects\LeafletTest\AppSrc\GeoConnectors\cGeocodeIOConnector.pkg)
36392>>>>>Use cGeocodeConnector.pkg
36392>>>>>
36392>>>>>Class cGeocodeIOConnector is a cGeocodeConnector
36393>>>>>    
36393>>>>>    Procedure Construct_Object
36395>>>>>        Forward Send Construct_Object
36397>>>>>        Set psHost      to "api.geocod.io"
36398>>>>>        Set psPath      to "v1.6/geocode"
36399>>>>>        Set psKey       to (Config("tokens.geocodeIOKey"))
36400>>>>>        Set psName      to "Geocode IO"
36401>>>>>        Set psID        to "GEOCODEIO"
36402>>>>>        Set psWebSite   to "https://www.geocod.io/"
36403>>>>>        
36403>>>>>        // Position Stack free plan doesn't use HTTPS, so:
36403>>>>>        Set piRemotePort    of oHttp to rpHttp
36404>>>>>        Set peTransferFlags of oHttp to 0
36405>>>>>    End_Procedure
36406>>>>>    
36406>>>>>    Function FreeQuery String sQuery Returns Handle
36408>>>>>        Handle  hoJson
36408>>>>>        Boolean bOK
36408>>>>>        
36408>>>>>        Move (Replaces(" ", sQuery, "%20")) to sQuery
36409>>>>>        Move ("q=" + sQuery)                to sQuery
36410>>>>>        Get DoGeoQuery sQuery               to hoJson
36411>>>>>        
36411>>>>>        Function_Return hoJson
36412>>>>>    End_Function
36413>>>>>    
36413>>>>>    Function StructuredQuery String[] asParams Returns Handle
36415>>>>>        String[] asQuery
36416>>>>>        String   sQuery
36416>>>>>        Handle   hoJson
36416>>>>>        
36416>>>>>        If (asParams[6] <> "") ;        Move (asParams[6] * asParams[5])        to  asParams[5]
36419>>>>>        If (asParams[5] <> "") ;            Move ("street=" + asParams[5])      to asQuery[SizeOfArray(asQuery)]
36422>>>>>        If (asParams[4] <> "") ;            Move ("city=" + asParams[4])        to asQuery[SizeOfArray(asQuery)]
36425>>>>>        If (asParams[2] <> "") ;            Move ("state=" + asParams[2])       to asQuery[SizeOfArray(asQuery)]
36428>>>>>        If (asParams[1] <> "") ;            Move ("postal_code=" + asParams[1]) to asQuery[SizeOfArray(asQuery)]
36431>>>>>        If (asParams[0] <> "") ;            Move ("country=" + asParams[0])     to asQuery[SizeOfArray(asQuery)]
36434>>>>>        
36434>>>>>        Move (StrJoinFromArray(asQuery, "&"))   to sQuery
36435>>>>>        Move (Replaces(" ", sQuery, "%20"))     to sQuery
36436>>>>>        Get DoGeoQuery sQuery                   to hoJson
36437>>>>>        
36437>>>>>        Function_Return hoJson
36438>>>>>    End_Function
36439>>>>>    
36439>>>>>    Function PostcodeQuery String sCountry String sPostcode Returns Handle
36441>>>>>        String  sQuery
36441>>>>>        Handle  hoJson
36441>>>>>        
36441>>>>>        Move ("postal_code=" + sPostcode + "&country=" + sCountry)  to sQuery
36442>>>>>        Move (Replaces(" ", sQuery, "%20"))     to sQuery
36443>>>>>        Get DoGeoQuery sQuery                                       to hoJson
36444>>>>>        
36444>>>>>        Function_Return hoJson
36445>>>>>    End_Function
36446>>>>>    
36446>>>>>    Procedure ExtractData Handle hoJson
36448>>>>>        Number nLat nLng
36448>>>>>        Handle hoBox
36448>>>>>        Number[] anBox
36449>>>>>        
36449>>>>>        Set pnLat to (ValueAtPath(oJPath(Self), hoJson, "results.[0].location.lat"))
36450>>>>>        Set pnLng to (ValueAtPath(oJPath(Self), hoJson, "results.[0].location.lng"))
36451>>>>>
36451>>>>>        Set psDisplayName to (ValueAtPath(oJPath(Self), hoJson, "results.[0].formatted_address"))
36452>>>>>    End_Procedure
36453>>>>>    
36453>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
36455>>>>>        Number[]  anBox
36456>>>>>        stPolygon tBox
36456>>>>>        stPolygon tBox
36456>>>>>        String    sName
36456>>>>>        
36456>>>>>        If not hoMap ;            Procedure_Return
36459>>>>>        If (pnLat(Self) = 100) ;            Procedure_Return
36462>>>>>
36462>>>>>        Forward Send DrawMap hoJson hoMap
36464>>>>>
36464>>>>>        Send DrawMap of hoMap (pnLat(Self)) (pnLng(Self)) (piZoom(Self)) (piMaxZoom(Self))
36465>>>>>    End_Procedure
36466>>>>>    
36466>>>>>End_Class
36467>>>Use GeoConnectors\cOpenCageConnector.pkg
Including file: GeoConnectors\cOpenCageConnector.pkg    (C:\Projects\LeafletTest\AppSrc\GeoConnectors\cOpenCageConnector.pkg)
36467>>>>>Use cGeocodeConnector.pkg
36467>>>>>
36467>>>>>Class cOpenCageConnector is a cGeocodeConnector
36468>>>>>    
36468>>>>>    Procedure Construct_Object
36470>>>>>        Forward Send Construct_Object
36472>>>>>        Set psHost      to "api.opencagedata.com"
36473>>>>>        Set psPath      to "geocode/v1/json"
36474>>>>>        Set psKey       to (Config("tokens.openCageKey"))
36475>>>>>        Set psName      to "OpenCage"
36476>>>>>        Set psID        to "OPENCAGE"
36477>>>>>        Set psWebSite   to "https://opencagedata.com/"
36478>>>>>    End_Procedure
36479>>>>>    
36479>>>>>    Function FreeQuery String sQuery Returns Handle
36481>>>>>        Handle  hoJson
36481>>>>>        Boolean bOK
36481>>>>>        
36481>>>>>        Move (Replaces(" ", sQuery, "%20")) to sQuery
36482>>>>>        Move (Replaces(",", sQuery, "%2C")) to sQuery
36483>>>>>        
36483>>>>>        Move ("q=" + sQuery)    to sQuery
36484>>>>>        Get DoGeoQuery sQuery   to hoJson
36485>>>>>        
36485>>>>>        Function_Return hoJson
36486>>>>>    End_Function
36487>>>>>    
36487>>>>>    Function PostcodeQuery String sCountry String sPostcode Returns Handle
36489>>>>>        String  sQuery
36489>>>>>        Handle  hoJson
36489>>>>>        
36489>>>>>        Move ("q=" + sPostcode + "&countrycode=" + sCountry)  to sQuery
36490>>>>>        Move (Replaces(" ", sQuery, "%20"))                   to sQuery
36491>>>>>        Get DoGeoQuery sQuery                                 to hoJson
36492>>>>>        
36492>>>>>        Function_Return hoJson
36493>>>>>    End_Function
36494>>>>>    
36494>>>>>    Procedure ExtractData Handle hoJson
36496>>>>>        Number nLat nLng
36496>>>>>        Handle hoBox
36496>>>>>        Number[] anBox
36497>>>>>        
36497>>>>>        Set pnLat to (ValueAtPath(oJPath(Self), hoJson, "results.[0].geometry.lat"))
36498>>>>>        Set pnLng to (ValueAtPath(oJPath(Self), hoJson, "results.[0].geometry.lng"))
36499>>>>>
36499>>>>>        Set psDisplayName to (ValueAtPath(oJPath(Self), hoJson, "results.[0].formatted_address"))
36500>>>>>    End_Procedure
36501>>>>>    
36501>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
36503>>>>>        Number[]  anBox
36504>>>>>        stPolygon tBox
36504>>>>>        stPolygon tBox
36504>>>>>        String    sName
36504>>>>>        
36504>>>>>        If not hoMap ;            Procedure_Return
36507>>>>>        If (pnLat(Self) = 100) ;            Procedure_Return
36510>>>>>        
36510>>>>>        Forward Send DrawMap hoJson hoMap
36512>>>>>
36512>>>>>        Send DrawMap of hoMap (pnLat(Self)) (pnLng(Self)) (piZoom(Self)) (piMaxZoom(Self))
36513>>>>>    End_Procedure
36514>>>>>    
36514>>>>>End_Class
36515>>>Use GeoConnectors\cTrimbleConnector.pkg
Including file: GeoConnectors\cTrimbleConnector.pkg    (C:\Projects\LeafletTest\AppSrc\GeoConnectors\cTrimbleConnector.pkg)
36515>>>>>Use cGeocodeConnector.pkg
36515>>>>>
36515>>>>>Class cTrimbleConnector is a cGeocodeConnector
36516>>>>>    
36516>>>>>    Procedure Construct_Object
36518>>>>>        Forward Send Construct_Object
36520>>>>>
36520>>>>>        Set psHost      to "api.positionstack.com"
36521>>>>>        Set psPath      to "v1/forward"
36522>>>>>        Set psKey       to (Config("tokens.trimbleKey"))
36523>>>>>        Set psName      to "Trimble"
36524>>>>>        Set psID        to "TRIMBLE"
36525>>>>>        Set psWebSite   to "https://developer.trimblemaps.com/"
36526>>>>>        
36526>>>>>        // Position Stack free plan doesn't use HTTPS, so:
36526>>>>>        Set piRemotePort    of oHttp to rpHttp
36527>>>>>        Set peTransferFlags of oHttp to 0
36528>>>>>    End_Procedure
36529>>>>>    
36529>>>>>    Function FreeQuery String sQuery Returns Handle
36531>>>>>        Handle  hoJson
36531>>>>>        Boolean bOK
36531>>>>>        
36531>>>>>        Move ("query=" + sQuery)            to sQuery
36532>>>>>        Move (Replaces(" ", sQuery, "%20")) to sQuery
36533>>>>>        Get DoGeoQuery sQuery               to hoJson
36534>>>>>        
36534>>>>>        Function_Return hoJson
36535>>>>>    End_Function    
36536>>>>>    
36536>>>>>    Procedure ExtractData Handle hoJson
36538>>>>>        Number nLat nLng
36538>>>>>        Handle hoBox
36538>>>>>        Number[] anBox
36539>>>>>        
36539>>>>>        Set pnLat to (ValueAtPath(oJPath(Self), hoJson, "data.[0].latitude"))
36540>>>>>        Set pnLng to (ValueAtPath(oJPath(Self), hoJson, "data.[0].longitude"))
36541>>>>>
36541>>>>>        Set psDisplayName to (ValueAtPath(oJPath(Self), hoJson, "data.[0].label"))
36542>>>>>    End_Procedure
36543>>>>>    
36543>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
36545>>>>>        Number[]  anBox
36546>>>>>        stPolygon tBox
36546>>>>>        stPolygon tBox
36546>>>>>        String    sName
36546>>>>>        
36546>>>>>        If not hoMap ;            Procedure_Return
36549>>>>>        If (pnLat(Self) = 100) ;            Procedure_Return
36552>>>>>
36552>>>>>        Forward Send DrawMap hoJson hoMap
36554>>>>>
36554>>>>>        Send DrawMap of hoMap (pnLat(Self)) (pnLng(Self)) (piZoom(Self)) (piMaxZoom(Self))
36555>>>>>    End_Procedure
36556>>>>>    
36556>>>>>End_Class
36557>>>Use GeoConnectors\cWhat3WordsConnector.pkg
Including file: GeoConnectors\cWhat3WordsConnector.pkg    (C:\Projects\LeafletTest\AppSrc\GeoConnectors\cWhat3WordsConnector.pkg)
36557>>>>>Use cGeocodeConnector.pkg
36557>>>>>
36557>>>>>Class cWhat3WordsConnector is a cGeocodeConnector
36558>>>>>    
36558>>>>>    Procedure Construct_Object
36560>>>>>        Forward Send Construct_Object
36562>>>>>        
36562>>>>>        Set psHost      to "api.what3words.com"
36563>>>>>        Set psPath      to "v3/convert-to-coordinates"
36564>>>>>        Set psKey       to (Config("tokens.whatThreeWordsKey"))
36565>>>>>        Set psName      to "What 3 Words"
36566>>>>>        Set psID        to "WHT3WDS"
36567>>>>>        Set psWebSite   to "https://www.what3words.com"
36568>>>>>    End_Procedure
36569>>>>>    
36569>>>>>    Function FreeQuery String sQuery Returns Handle
36571>>>>>        Handle hoJson
36571>>>>>        
36571>>>>>        Move (Replaces(" ", sQuery, ".")) to sQuery
36572>>>>>        Move ("words=" + sQuery)            to sQuery
36573>>>>>        Get DoGeoQuery sQuery               to hoJson
36574>>>>>        
36574>>>>>        Function_Return hoJson
36575>>>>>    End_Function
36576>>>>>        
36576>>>>>    Procedure ExtractData Handle hoJson
36578>>>>>        Number nLat nLng
36578>>>>>        String sCountry
36578>>>>>        Number[] anBox
36579>>>>>        
36579>>>>>        Set pnLat to (ValueAtPath(oJPath(Self), hoJson, "coordinates.lat"))
36580>>>>>        Set pnLng to (ValueAtPath(oJPath(Self), hoJson, "coordinates.lng"))
36581>>>>>        
36581>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "square.southwest.lat")) to anBox[0]
36582>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "square.southwest.lng")) to anBox[2]
36583>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "square.northeast.lat")) to anBox[1]
36584>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "square.northeast.lng")) to anBox[3]
36585>>>>>        Set panBoundingBox to anBox
36586>>>>>
36586>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "country")) to sCountry
36587>>>>>        Set psDisplayName to (ValueAtPath(oJPath(Self), hoJson, "nearestPlace") + "," * sCountry)
36588>>>>>    End_Procedure
36589>>>>>    
36589>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
36591>>>>>        Number[]  anBox
36592>>>>>        stPolygon tBox
36592>>>>>        stPolygon tBox
36592>>>>>        String    sName
36592>>>>>        
36592>>>>>        If not hoMap ;            Procedure_Return
36595>>>>>        If (pnLat(Self) = 100) ;            Procedure_Return
36598>>>>>
36598>>>>>        Forward Send DrawMap hoJson hoMap
36600>>>>>
36600>>>>>        Get panBoundingBox to anBox
36601>>>>>        
36601>>>>>        If (SizeOfArray(anBox) = 4) Begin
36603>>>>>            Move anBox[0]   to tBox.aPoints[0][0]
36604>>>>>            Move anBox[2]   to tBox.aPoints[0][1]
36605>>>>>            
36605>>>>>            Move anBox[1]   to tBox.aPoints[1][0]
36606>>>>>            Move anBox[2]   to tBox.aPoints[1][1]
36607>>>>>            
36607>>>>>            Move anBox[1]   to tBox.aPoints[2][0]
36608>>>>>            Move anBox[3]   to tBox.aPoints[2][1]
36609>>>>>            
36609>>>>>            Move anBox[0]   to tBox.aPoints[3][0]
36610>>>>>            Move anBox[3]   to tBox.aPoints[3][1]
36611>>>>>            
36611>>>>>            Move (Config("defaults.polygon.lineColor"))     to tBox.sLineColor
36612>>>>>            Move (Config("defaults.polygon.lineWeight"))    to tBox.iLineWeight
36613>>>>>            Move (Config("defaults.polygon.lineOpacity"))   to tBox.nLineOpacity
36614>>>>>            Move (Config("defaults.polygon.fillColor"))     to tBox.sFillColor
36615>>>>>            Move (Config("defaults.polygon.fillOpacity"))   to tBox.nFillOpacity
36616>>>>>            
36616>>>>>            Move True to tBox.bStroke
36617>>>>>            Move (pbFitMap(Self)) to tBox.bFitMap
36618>>>>>            
36618>>>>>            Send DrawPolygon of hoMap tBox
36619>>>>>        End
36619>>>>>>
36619>>>>>        
36619>>>>>    End_Procedure
36620>>>>>    
36620>>>>>End_Class
36621>>>Use GeoConnectors\cGoogleMapsConnector.pkg
Including file: GeoConnectors\cGoogleMapsConnector.pkg    (C:\Projects\LeafletTest\AppSrc\GeoConnectors\cGoogleMapsConnector.pkg)
36621>>>>>Use cGeocodeConnector.pkg
36621>>>>>
36621>>>>>Class cGoogleMapsConnector is a cGeocodeConnector
36622>>>>>    
36622>>>>>    Procedure Construct_Object
36624>>>>>        Forward Send Construct_Object
36626>>>>>        
36626>>>>>        Set psHost      to "maps.googleapis.com"
36627>>>>>        Set psPath      to "maps/api/geocode/json"
36628>>>>>        Set psKey       to (Config("tokens.googleMapsKey"))
36629>>>>>        Set psName      to "Google Maps"
36630>>>>>        Set psID        to "GOOGLEMAPS"
36631>>>>>        Set psWebSite   to "https://developers.google.com/maps"
36632>>>>>    End_Procedure
36633>>>>>    
36633>>>>>    Function FreeQuery String sQuery Returns Handle
36635>>>>>        Handle hoJson
36635>>>>>        
36635>>>>>        Move (Replaces(" ", sQuery, "%20"))   to sQuery
36636>>>>>        Move ("address=" + sQuery)          to sQuery
36637>>>>>        Get DoGeoQuery sQuery               to hoJson
36638>>>>>        
36638>>>>>        Function_Return hoJson
36639>>>>>    End_Function
36640>>>>>    
36640>>>>>    Function StructuredQuery String[] asParams Returns Handle
36642>>>>>        String   sQuery
36642>>>>>        String[] asQuery
36643>>>>>        Handle   hoJson
36643>>>>>        
36643>>>>>        Move (ReverseArray(asParams))           to asParams
36644>>>>>        Move (StrJoinFromArray(asParams, "%20"))  to sQuery
36645>>>>>        Move ("address=" + sQuery)              to sQuery
36646>>>>>        Get DoGeoQuery sQuery                   to hoJson
36647>>>>>        
36647>>>>>        Function_Return hoJson
36648>>>>>    End_Function
36649>>>>>    
36649>>>>>    Function PostcodeQuery String sCountry String sPostcode Returns Handle
36651>>>>>        String  sQuery sHouse
36651>>>>>        Integer iArg
36651>>>>>        Handle  hoJson
36651>>>>>        
36651>>>>>        If (num_arguments > 2) Begin
36653>>>>>            Move 3 to iArg
36654>>>>>            Move iArg& to sHouse
36655>>>>>        End
36655>>>>>>
36655>>>>>        
36655>>>>>        Move ("address=" + ;                If((sHouse = ""), "", (sHouse + " ")) + ;                sPostcode + " " + sCountry) to sQuery
36656>>>>>        Move (Replaces(" ", sQuery, "%20"))   to sQuery
36657>>>>>        Get DoGeoQuery sQuery               to hoJson
36658>>>>>        
36658>>>>>        Function_Return hoJson
36659>>>>>    End_Function
36660>>>>>    
36660>>>>>    Procedure ExtractData Handle hoJson
36662>>>>>        Number nLat nLng
36662>>>>>        Handle hoBox
36662>>>>>        Number[] anBox
36663>>>>>        
36663>>>>>        Set pnLat to (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.location.lat"))
36664>>>>>        Set pnLng to (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.location.lng"))
36665>>>>>        
36665>>>>>        If (JsonAtPath(oJPath(Self), hoJson, "results[0].geometry.bounds")) Begin
36667>>>>>            Move (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.bounds.northeast.lat")) to anBox[0]
36668>>>>>            Move (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.bounds.northeast.lng")) to anBox[1]
36669>>>>>            Move (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.bounds.southwest.lat")) to anBox[2]
36670>>>>>            Move (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.bounds.southwest.lng")) to anBox[3]
36671>>>>>        End
36671>>>>>>
36671>>>>>        Else If (JsonAtPath(oJPath(Self), hoJson, "results[0].geometry.viewport")) Begin
36674>>>>>            Move (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.viewport.northeast.lat")) to anBox[0]
36675>>>>>            Move (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.viewport.northeast.lng")) to anBox[1]
36676>>>>>            Move (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.viewport.southwest.lat")) to anBox[2]
36677>>>>>            Move (ValueAtPath(oJPath(Self), hoJson, "results[0].geometry.viewport.southwest.lng")) to anBox[3]
36678>>>>>        End
36678>>>>>>
36678>>>>>        
36678>>>>>        Set panBoundingBox to anBox
36679>>>>>
36679>>>>>        Set psDisplayName to (ValueAtPath(oJPath(Self), hoJson, "results[0].formatted_address"))
36680>>>>>    End_Procedure
36681>>>>>    
36681>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
36683>>>>>        Number[]  anBox
36684>>>>>        stPolygon tBox
36684>>>>>        stPolygon tBox
36684>>>>>        String    sName
36684>>>>>        
36684>>>>>        If not hoMap ;            Procedure_Return
36687>>>>>        If (pnLat(Self) = 100) ;            Procedure_Return
36690>>>>>
36690>>>>>        Forward Send DrawMap hoJson hoMap
36692>>>>>
36692>>>>>        Get panBoundingBox to anBox
36693>>>>>        
36693>>>>>        If (SizeOfArray(anBox) = 4) Begin
36695>>>>>            Move anBox[0]   to tBox.aPoints[0][0]
36696>>>>>            Move anBox[1]   to tBox.aPoints[0][1]
36697>>>>>            
36697>>>>>            Move anBox[0]   to tBox.aPoints[1][0]
36698>>>>>            Move anBox[3]   to tBox.aPoints[1][1]
36699>>>>>            
36699>>>>>            Move anBox[2]   to tBox.aPoints[2][0]
36700>>>>>            Move anBox[3]   to tBox.aPoints[2][1]
36701>>>>>            
36701>>>>>            Move anBox[2]   to tBox.aPoints[3][0]
36702>>>>>            Move anBox[1]   to tBox.aPoints[3][1]
36703>>>>>            
36703>>>>>            Move (Config("defaults.polygon.lineColor"))     to tBox.sLineColor
36704>>>>>            Move (Config("defaults.polygon.lineWeight"))    to tBox.iLineWeight
36705>>>>>            Move (Config("defaults.polygon.lineOpacity"))   to tBox.nLineOpacity
36706>>>>>            Move (Config("defaults.polygon.fillColor"))     to tBox.sFillColor
36707>>>>>            Move (Config("defaults.polygon.fillOpacity"))   to tBox.nFillOpacity
36708>>>>>            
36708>>>>>            Move True to tBox.bStroke
36709>>>>>            Move (pbFitMap(Self)) to tBox.bFitMap
36710>>>>>            
36710>>>>>            Send DrawPolygon of hoMap tBox
36711>>>>>        End
36711>>>>>>
36711>>>>>        
36711>>>>>    End_Procedure
36712>>>>>    
36712>>>>>End_Class
36713>>>Use GeoConnectors\cBingMapsConnector.pkg
Including file: GeoConnectors\cBingMapsConnector.pkg    (C:\Projects\LeafletTest\AppSrc\GeoConnectors\cBingMapsConnector.pkg)
36713>>>>>Use cGeocodeConnector.pkg
36713>>>>>
36713>>>>>Class cBingMapsConnector is a cGeocodeConnector
36714>>>>>    
36714>>>>>    Procedure Construct_Object
36716>>>>>        Forward Send Construct_Object
36718>>>>>        
36718>>>>>        Set psHost      to "dev.virtualearth.net"
36719>>>>>        Set psPath      to "REST/v1/Locations"
36720>>>>>        Set psKey       to (Config("tokens.bingMapsKey"))
36721>>>>>        Set psName      to "Bing Maps"
36722>>>>>        Set psID        to "BINGMAPS"
36723>>>>>        Set psWebSite   to "https://www.bing.com/maps"
36724>>>>>    End_Procedure
36725>>>>>    
36725>>>>>    Function CallPath String sPath String sKey String sQuery returns String
36727>>>>>        Function_Return (sPath + "?" + sQuery + "&" + "key=" + sKey)
36728>>>>>    End_Function
36729>>>>>
36729>>>>>    Function FreeQuery String sQuery Returns Handle
36731>>>>>        Handle hoJson
36731>>>>>        
36731>>>>>        Move (Replaces(" ", sQuery, "%20")) to sQuery
36732>>>>>        Move ("q=" + sQuery)                to sQuery
36733>>>>>        Get DoGeoQuery sQuery               to hoJson
36734>>>>>        
36734>>>>>        Function_Return hoJson
36735>>>>>    End_Function
36736>>>>>    
36736>>>>>    Function StructuredQuery String[] asParams Returns Handle
36738>>>>>        String   sQuery
36738>>>>>        String[] asQuery
36739>>>>>        Handle   hoJson
36739>>>>>        
36739>>>>>        Move (sQuery + "countryRegion="  + asParams[0])                 to sQuery
36740>>>>>        Move (sQuery + "&adminDistrict=" + asParams[3])                 to sQuery
36741>>>>>        Move (sQuery + "&locality="      + asParams[4])                 to sQuery
36742>>>>>        Move (sQuery + "&postalCode="    + asParams[1])                 to sQuery
36743>>>>>        Move (sQuery + "&addressLine="   + asParams[6] * asParams[5])   to sQuery
36744>>>>>
36744>>>>>        Move (Replaces(" ", sQuery, "%20"))                             to sQuery
36745>>>>>
36745>>>>>        Get DoGeoQuery sQuery                                           to hoJson
36746>>>>>        
36746>>>>>        Function_Return hoJson
36747>>>>>    End_Function
36748>>>>>    
36748>>>>>    Function PostcodeQuery String sCountry String sPostcode Returns Handle
36750>>>>>        String  sQuery sHouse
36750>>>>>        Integer iArg
36750>>>>>        Handle  hoJson
36750>>>>>        
36750>>>>>        If (num_arguments > 2) Begin
36752>>>>>            Move 3 to iArg
36753>>>>>            Move iArg& to sHouse
36754>>>>>        End
36754>>>>>>
36754>>>>>        
36754>>>>>        Move (sQuery + "countryRegion=" + sCountry)     to sQuery
36755>>>>>        Move (sQuery + "&postalCode="    + sPostcode)   to sQuery
36756>>>>>        Move (sQuery + "&addressLine"   + sHouse)       to sQuery
36757>>>>>        
36757>>>>>        Move (Replaces(" ", sQuery, "%20"))             to sQuery
36758>>>>>        
36758>>>>>        Get DoGeoQuery sQuery                           to hoJson
36759>>>>>        
36759>>>>>        Function_Return hoJson
36760>>>>>    End_Function
36761>>>>>    
36761>>>>>    Procedure ExtractData Handle hoJson
36763>>>>>        Number nLat nLng
36763>>>>>        Handle hoBox
36763>>>>>        Number[] anBox
36764>>>>>        
36764>>>>>        Set pnLat to (ValueAtPath(oJPath(Self), hoJson, "resourceSets[0].resources[0].point.coordinates[0]"))
36765>>>>>        Set pnLng to (ValueAtPath(oJPath(Self), hoJson, "resourceSets[0].resources[0].point.coordinates[1]"))
36766>>>>>        
36766>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "resourceSets[0].resources[0].bbox[0]")) to anBox[0]
36767>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "resourceSets[0].resources[0].bbox[1]")) to anBox[1]
36768>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "resourceSets[0].resources[0].bbox[2]")) to anBox[2]
36769>>>>>        Move (ValueAtPath(oJPath(Self), hoJson, "resourceSets[0].resources[0].bbox[3]")) to anBox[3]
36770>>>>>
36770>>>>>        Set panBoundingBox to anBox
36771>>>>>
36771>>>>>        Set psDisplayName to (ValueAtPath(oJPath(Self), hoJson, "resourceSets[0].resources[0].name"))
36772>>>>>    End_Procedure
36773>>>>>    
36773>>>>>    Procedure DrawMap Handle hoJson Handle hoMap
36775>>>>>        Number[]  anBox
36776>>>>>        stPolygon tBox
36776>>>>>        stPolygon tBox
36776>>>>>        String    sName
36776>>>>>        
36776>>>>>        If not hoMap ;            Procedure_Return
36779>>>>>        If (pnLat(Self) = 100) ;            Procedure_Return
36782>>>>>
36782>>>>>        Forward Send DrawMap hoJson hoMap
36784>>>>>
36784>>>>>        Get panBoundingBox to anBox
36785>>>>>        
36785>>>>>        If (SizeOfArray(anBox) = 4) Begin
36787>>>>>            Move anBox[0]   to tBox.aPoints[0][0]
36788>>>>>            Move anBox[1]   to tBox.aPoints[0][1]
36789>>>>>            
36789>>>>>            Move anBox[0]   to tBox.aPoints[1][0]
36790>>>>>            Move anBox[3]   to tBox.aPoints[1][1]
36791>>>>>            
36791>>>>>            Move anBox[2]   to tBox.aPoints[2][0]
36792>>>>>            Move anBox[3]   to tBox.aPoints[2][1]
36793>>>>>            
36793>>>>>            Move anBox[2]   to tBox.aPoints[3][0]
36794>>>>>            Move anBox[1]   to tBox.aPoints[3][1]
36795>>>>>            
36795>>>>>            Move (Config("defaults.polygon.lineColor"))     to tBox.sLineColor
36796>>>>>            Move (Config("defaults.polygon.lineWeight"))    to tBox.iLineWeight
36797>>>>>            Move (Config("defaults.polygon.lineOpacity"))   to tBox.nLineOpacity
36798>>>>>            Move (Config("defaults.polygon.fillColor"))     to tBox.sFillColor
36799>>>>>            Move (Config("defaults.polygon.fillOpacity"))   to tBox.nFillOpacity
36800>>>>>            
36800>>>>>            Move True to tBox.bStroke
36801>>>>>            Move (pbFitMap(Self)) to tBox.bFitMap
36802>>>>>            
36802>>>>>            Send DrawPolygon of hoMap tBox
36803>>>>>        End
36803>>>>>>
36803>>>>>        
36803>>>>>    End_Procedure
36804>>>>>
36804>>>>>End_Class
36805>>>
36805>>>Object oTestGeoMap is a cWebView
36807>>>    Set psCaption to "GeoMapping Test"
36808>>>    
36808>>>//    Property String psScanducMarker "Images/Scanduc-marker-icon.png"
36808>>>    Property String psScanducMarker "Images/Scanduc-pointer-icon.png"
36810>>>    
36810>>>    Object oGeocodeHost is a cGeocodeHost
36812>>>        
36812>>>        Object oLocIQ is a cLocationIQConnector
36814>>>            Set pbFitMap to False
36815>>>        End_Object
36816>>>        
36816>>>        Object oOMapQ is a cMapQuestOpenConnector
36818>>>        End_Object
36819>>>        
36819>>>        Object oPosStk is a cPositionStackConnector
36821>>>        End_Object
36822>>>        
36822>>>        Object oGeoIO is a cGeocodeIOConnector
36824>>>        End_Object
36825>>>        
36825>>>        Object oOpenCage is a cOpenCageConnector
36827>>>        End_Object
36828>>>        
36828>>>        Object oHere is a cHereConnector
36830>>>        End_Object
36831>>>        
36831>>>        Object oTrimble is a cTrimbleConnector
36833>>>        End_Object
36834>>>        
36834>>>        Object oWhat3Words is a cWhat3WordsConnector
36836>>>        End_Object
36837>>>        
36837>>>        Object oGoogleMaps is a cGoogleMapsConnector
36839>>>        End_Object
36840>>>        
36840>>>        Object oBingMaps is a cBingMapsConnector
36842>>>        End_Object
36843>>>        
36843>>>    End_Object
36844>>>    
36844>>>    Procedure ProcessReturn Handle hoService Handle hoJson
36847>>>        Set peWhiteSpace of hoJson to jpWhitespace_Pretty
36848>>>        Set pbEscapeForwardSlash of hoJson to False
36849>>>        WebSet psValue of oResult to (Stringify(hoJson))
36850>>>        Send DrawMap of hoService hoJson (oMap(Self)) 
36851>>>        Send Destroy of hoJson
36852>>>        WebSet psValue of oQuery to (psQuery(hoService))
36853>>>    End_Procedure
36854>>>    
36854>>>    Object oWebMainPanel is a cWebPanel
36856>>>        Set piColumnCount to 12
36857>>>        
36857>>>        Object oMainGroup is a cWebGroup
36859>>>            Set piColumnSpan to 5
36860>>>            Set piColumnIndex to 0
36861>>>            Set piColumnCount to 12
36862>>>            Set pbFillHeight to True
36863>>>            Set pbShowBorder to False
36864>>>            Set pbShowCaption to False
36865>>>            
36865>>>            Object oMapMyLocBtn is a cWebButton
36867>>>                Set piColumnSpan to 3
36868>>>                Set piColumnIndex to 8
36869>>>                Set psCaption to "Current Location"
36870>>>                
36870>>>                Procedure OnClick
36873>>>                    WebSet psValue of oQuery    to ""
36874>>>                    WebSet psValue of oResult   to ""
36875>>>                    Send GetMyLocation of oMap
36876>>>                End_Procedure
36877>>>
36877>>>            End_Object
36878>>>    
36878>>>            Object oLatitude is a cWebForm
36880>>>                Set piColumnSpan to 4
36881>>>                Set psLabel to "Lat:"
36882>>>                Set peLabelAlign to alignRight
36883>>>                Set piLabelOffset to 50
36884>>>                Set peDataType to typeNumber
36885>>>                Set piPrecision to 8
36886>>>                Set psValue to "45.43401193"
36887>>>            End_Object
36888>>>            
36888>>>            Object oLongitude is a cWebForm
36890>>>                Set piColumnSpan to 4
36891>>>                Set piColumnIndex to 4
36892>>>                Set psLabel to "Lng:"
36893>>>                Set peLabelAlign to alignRight
36894>>>                Set piLabelOffset to 50
36895>>>                Set peDataType to typeNumber
36896>>>                Set piPrecision to 8
36897>>>                Set psValue to "12.33826586"
36898>>>            End_Object
36899>>>            
36899>>>            Object oSendLL is a cWebButton
36901>>>                Set piColumnSpan to 3
36902>>>                Set piColumnIndex to 8
36903>>>                Set psCaption to "Send Lat/Lng"
36904>>>                
36904>>>                Procedure OnClick
36907>>>                    Integer iInitZoom
36907>>>                    Number  nLat nLng
36907>>>                    
36907>>>                    WebSet psValue of oQuery                        to ""
36908>>>                    WebSet psValue of oResult                       to ""
36909>>>                    WebGet psValue of oInitialZoom to iInitZoom
36912>>>                    WebGet psValue of oLatitude    to nLat
36915>>>                    WebGet psValue of oLongitude   to nLng
36918>>>                    
36918>>>                    Send DrawMap of oMap nLat nLng iInitZoom 22
36919>>>                    Send DrawMarker of oMap nLat nLng ("Ah! Venice! (" + String(nLat) + " N/" + String(nLng) + " E)") "" False
36920>>>                End_Procedure
36921>>>                
36921>>>            End_Object
36922>>>
36922>>>            Object oWebHorizontalLine1 is a cWebHorizontalLine
36924>>>                Set piHeight to 25
36925>>>            End_Object            
36926>>>            
36926>>>            Object oGeoService is a cWebCombo
36928>>>                Set piColumnSpan to 7
36929>>>                Set psLabel to "Service Provider:"
36930>>>                Set peLabelAlign to alignRight
36931>>>                Set piLabelOffset to 110
36932>>>                Set pbAddEmptyItem to True
36933>>>                
36933>>>                Procedure OnFill
36936>>>                    String[] asIDs asNames
36938>>>                    Integer  i iMax
36938>>>                    
36938>>>                    Get pasConnectorIDs   of oGeocodeHost   to asIDs
36939>>>                    Get pasConnectorNames of oGeocodeHost   to asNames
36940>>>                    Move (SizeOfArray(asIDs) - 1)           to iMax
36941>>>                    
36941>>>                    For i from 0 to iMax
36947>>>>
36947>>>                        Send AddComboItem asIDs[i] asNames[i]
36948>>>                    Loop
36949>>>>
36949>>>                    
36949>>>                End_Procedure
36950>>>    
36950>>>            End_Object
36951>>>    
36951>>>            Object oWebSpacer1 is a cWebSpacer
36953>>>                Set piColumnSpan to 12
36954>>>                Set piHeight to 20
36955>>>            End_Object
36956>>>                    
36956>>>            Object oFreeQuery is a cWebForm
36958>>>                Set piColumnSpan to 12
36959>>>                Set psLabel to "Free Text Query:"
36960>>>                Set peLabelAlign to alignRight
36961>>>                Set piLabelOffset to 110
36962>>>                Set psValue to "CPH Conference, Tietgensgade 65, 1704 Copenhagen, Denmark"
36963>>>            End_Object
36964>>>            
36964>>>            Object oSendFreeQryBtn is a cWebButton
36966>>>                Set piColumnSpan to 4
36967>>>                Set piColumnIndex to 8
36968>>>                Set psCaption to "Send Free Text"
36969>>>            
36969>>>                Procedure OnClick
36972>>>                    String  sServ sQuery
36972>>>                    Handle  hoServ hoJson
36972>>>                    Integer iInitZoom
36972>>>                    
36972>>>                    WebSet psValue of oQuery                        to ""
36973>>>                    WebSet psValue of oResult                       to ""
36974>>>                    WebGet psValue of oGeoService                   to sServ
36977>>>                    Get ConnectorObjectFromID of oGeocodeHost sServ to hoServ
36978>>>                    
36978>>>                    If not hoServ Begin
36980>>>                        Send ShowInfoBox "Please select a Service Provider first" "User Error"
36981>>>                        Procedure_Return
36982>>>                    End
36982>>>>
36982>>>                    
36982>>>                    WebGet psValue of oInitialZoom to iInitZoom
36985>>>                    Set piZoom of hoServ to iInitZoom
36986>>>                    WebGet psValue of oFreeQuery  to sQuery
36989>>>                    Get FreeQuery of hoServ sQuery to hoJson
36990>>>                    
36990>>>                    If hoJson Begin
36992>>>                        Send ProcessReturn hoServ hoJson
36993>>>                        If (GetChecked(oShowMarker(Self))) ;                            Send PlaceMarker of hoServ (oMap(Self)) ;                                (If((GetChecked(oCustomMarker(Self))), psScanducMarker(Self), ""))
36996>>>                    End
36996>>>>
36996>>>                    Else ;                        Send ShowInfoBox (psError(hoServ)) "Request Failed"
36998>>>                    
36998>>>                End_Procedure
36999>>>                
36999>>>            End_Object
37000>>>    
37000>>>            Object oCountry is a cWebForm
37002>>>                Set piColumnSpan to 9
37003>>>                Set psLabel to "Country:"
37004>>>                Set peLabelAlign to alignRight
37005>>>                Set piLabelOffset to 110
37006>>>                Set psValue to "GB"
37007>>>            End_Object
37008>>>    
37008>>>            Object oPostcode is a cWebForm
37010>>>                Set piColumnSpan to 9
37011>>>                Set psLabel to "Postal Code:"
37012>>>                Set peLabelAlign to alignRight
37013>>>                Set piLabelOffset to 110
37014>>>                Set psValue to "GU26 6EX"
37015>>>            End_Object
37016>>>    
37016>>>            Object oState is a cWebForm
37018>>>                Set piColumnSpan to 9
37019>>>                Set psLabel to "State:"
37020>>>                Set peLabelAlign to alignRight
37021>>>                Set piLabelOffset to 110
37022>>>                Set psValue to "England"
37023>>>            End_Object
37024>>>    
37024>>>            Object oCounty is a cWebForm
37026>>>                Set piColumnSpan to 9
37027>>>                Set psLabel to "County:"
37028>>>                Set peLabelAlign to alignRight
37029>>>                Set piLabelOffset to 110
37030>>>                Set psValue to "Surrey"
37031>>>            End_Object
37032>>>    
37032>>>            Object oCity is a cWebForm
37034>>>                Set piColumnSpan to 9
37035>>>                Set psLabel to "City:"
37036>>>                Set peLabelAlign to alignRight
37037>>>                Set piLabelOffset to 110
37038>>>                Set psValue to "Hindhead"
37039>>>            End_Object
37040>>>    
37040>>>            Object oStreet is a cWebForm
37042>>>                Set piColumnSpan to 9
37043>>>                Set psLabel to "Street:"
37044>>>                Set peLabelAlign to alignRight
37045>>>                Set piLabelOffset to 110
37046>>>                Set psValue to "Kingswood Firs"
37047>>>            End_Object
37048>>>    
37048>>>            Object oHouse is a cWebForm
37050>>>                Set piColumnSpan to 4
37051>>>                Set psLabel to "House Number:"
37052>>>                Set peLabelAlign to alignRight
37053>>>                Set piLabelOffset to 110
37054>>>                Set psValue to "8"
37055>>>            End_Object
37056>>>    
37056>>>            Object oSendStructAddrBtn is a cWebButton
37058>>>                Set piColumnSpan to 4
37059>>>                Set piColumnIndex to 4
37060>>>                Set psCaption to "Send Structured"
37061>>>            
37061>>>                Procedure OnClick
37064>>>                    Handle   hoServ
37064>>>                    String   sServ
37064>>>                    String[] asParams
37065>>>                    Handle   hoJson
37065>>>                    Integer  iInitZoom        
37065>>>                    
37065>>>                    WebSet psValue of oQuery                        to ""
37066>>>                    WebSet psValue of oResult                       to ""
37067>>>                    WebGet psValue of oGeoService                   to sServ
37070>>>                    Get ConnectorObjectFromID of oGeocodeHost sServ to hoServ
37071>>>                    
37071>>>                    If not hoServ Begin
37073>>>                        Send ShowInfoBox "Please select a Service Provider first" "User Error"
37074>>>                        Procedure_Return
37075>>>                    End
37075>>>>
37075>>>                                            
37075>>>                    WebGet psValue of oInitialZoom to iInitZoom
37078>>>                    Set piZoom of hoServ to iInitZoom
37079>>>                    
37079>>>                    WebGet psValue of oCountry  to asParams[0]
37082>>>                    WebGet psValue of oPostcode to asParams[1]
37085>>>                    WebGet psValue of oState    to asParams[2]
37088>>>                    WebGet psValue of oCounty   to asParams[3]
37091>>>                    WebGet psValue of oCity     to asParams[4]
37094>>>                    WebGet psValue of oStreet   to asParams[5]
37097>>>                    WebGet psValue of oHouse    to asParams[6]
37100>>>                    Get StructuredQuery of hoServ asParams to hoJson
37101>>>                    
37101>>>                    If hoJson Begin
37103>>>                        Send ProcessReturn hoServ hoJson
37104>>>                        If (GetChecked(oShowMarker(Self))) ;                            Send PlaceMarker of hoServ (oMap(Self)) ;                                (If((GetChecked(oCustomMarker(Self))), psScanducMarker(Self), ""))
37107>>>                    End
37107>>>>
37107>>>                    Else ;                        Send ShowInfoBox (psError(hoServ)) "Request Failed"
37109>>>                    
37109>>>                End_Procedure
37110>>>                
37110>>>            End_Object
37111>>>    
37111>>>            Object oSendPostcodeQuery is a cWebButton
37113>>>                Set piColumnSpan to 4
37114>>>                Set piColumnIndex to 8
37115>>>                Set psCaption to "Send Postcode"
37116>>>            
37116>>>                Procedure OnClick
37119>>>                    String  sService sCountry sPostcode sHouse
37119>>>                    Handle  hoServ hoJson
37119>>>                    Integer iInitZoom
37119>>>                    
37119>>>                    WebSet psValue of oQuery                            to ""
37120>>>                    WebSet psValue of oResult                           to ""
37121>>>                    WebGet psValue of oGeoService                       to sService
37124>>>                    Get ConnectorObjectFromID of oGeocodeHost sService to hoServ
37125>>>
37125>>>                    If not hoServ Begin
37127>>>                        Send ShowInfoBox "Please select a Service Provider first" "User Error"
37128>>>                        Procedure_Return
37129>>>                    End
37129>>>>
37129>>>                                            
37129>>>                    WebGet psValue of oInitialZoom to iInitZoom
37132>>>                    Set piZoom of hoServ to iInitZoom
37133>>>    
37133>>>                    WebGet psValue of oCountry  to sCountry
37136>>>                    WebGet psValue of oPostcode to sPostcode
37139>>>                    WebGet psValue of oHouse    to sHouse
37142>>>                    Get PostcodeQuery of hoServ sCountry sPostcode sHouse to hoJson
37143>>>                    
37143>>>                    If hoJson Begin
37145>>>                        Send ProcessReturn hoServ hoJson
37146>>>                        If (GetChecked(oShowMarker(Self))) ;                            Send PlaceMarker of hoServ (oMap(Self)) ;                                (If((GetChecked(oCustomMarker(Self))), psScanducMarker(Self), ""))
37149>>>                    End
37149>>>>
37149>>>                    Else ;                        Send ShowInfoBox (psError(hoServ)) "Request Failed"
37151>>>                    
37151>>>                End_Procedure
37152>>>                
37152>>>            End_Object
37153>>>            
37153>>>            Object oQuery is a cWebEdit
37155>>>                Set piColumnSpan to 0
37156>>>                Set psLabel to "Query:"
37157>>>                Set peLabelPosition to lpTop
37158>>>                Set piHeight to 100
37159>>>            End_Object
37160>>>        
37160>>>            Object oResult is a cWebEdit
37162>>>                Set piColumnSpan to 0
37163>>>                Set psLabel to "Result:"
37164>>>                Set pbFillHeight to True
37165>>>                Set peLabelPosition to lpTop
37166>>>            End_Object
37167>>>            
37167>>>        End_Object
37168>>>        
37168>>>        Object oMapGroup is a cWebGroup
37170>>>            Set piColumnSpan to 7
37171>>>            Set piColumnIndex to 5
37172>>>            Set piColumnCount to 20
37173>>>            Set pbFillHeight to True
37174>>>            Set pbShowBorder to False
37175>>>            Set pbShowCaption to False
37176>>>
37176>>>            Object oShowMarker is a cWebCheckbox
37178>>>                Set piColumnSpan to 3
37179>>>                Set piColumnIndex to 0
37180>>>                Set psCaption to "Show marker"
37181>>>                Set psValue to True
37182>>>            End_Object
37183>>>
37183>>>            Object oCustomMarker is a cWebCheckbox
37185>>>                Set piColumnSpan to 3
37186>>>                Set piColumnIndex to 3
37187>>>                Set psCaption to "Scanduc Icon"
37188>>>                Set Value to False
37189>>>            End_Object
37190>>>    
37190>>>            Object oInitialZoom is a cWebCombo
37192>>>                Set piColumnIndex to 6
37193>>>                Set piColumnSpan to 5
37194>>>                Set psLabel to "Initial Zoom:"
37195>>>                Set peLabelAlign to alignRight
37196>>>                Set peAlign to alignRight
37197>>>                Set piLabelOffset to 120
37198>>>                Set psValue to 12
37199>>>                
37199>>>                Procedure OnFill
37202>>>                    Integer i
37202>>>                    
37202>>>                    For i from 1 to 22
37208>>>>
37208>>>                        Send AddComboItem i i
37209>>>                    Loop
37210>>>>
37210>>>                    
37210>>>                End_Procedure
37211>>>                
37211>>>            End_Object
37212>>>            
37212>>>            Object oResolution is a cWebCombo
37214>>>                Set piColumnIndex to 11
37215>>>                Set piColumnSpan to 3
37216>>>                Set psLabel to "Res:"
37217>>>                Set peLabelAlign to alignRight
37218>>>                Set piLabelOffset to 60
37219>>>                Set psValue to "256"
37220>>>                
37220>>>                Procedure OnFill
37223>>>                    Send AddComboItem "256"  "256"
37224>>>                    Send AddComboItem "512"  "512"
37225>>>                    Send AddComboItem "1024" "1024"
37226>>>                End_Procedure
37227>>>                
37227>>>                Set pbServerOnChange to True
37228>>>                Procedure OnChange String sNewValue String sOldValue
37231>>>                    WebSet psTileSize     of oMap to sNewValue
37232>>>                    Send ChangeResolution of oMap    sNewValue
37233>>>                End_Procedure
37234>>>
37234>>>            End_Object
37235>>>    
37235>>>            Object oMapLayer is a cWebCombo
37237>>>                Set piColumnIndex to 14
37238>>>                Set piColumnSpan to 6
37239>>>                Set psLabel to "View:"
37240>>>                Set peLabelAlign to alignRight
37241>>>                Set piLabelOffset to 60
37242>>>                Set psValue to "Map view"
37243>>>                
37243>>>                Procedure OnFill
37246>>>                    Send AddComboItem "mapbox/streets-v11"              "Streets view"
37247>>>                    Send AddComboItem "mapbox/outdoors-v11"             "Outdoors view"
37248>>>                    Send AddComboItem "mapbox/light-v10"                "Light view"
37249>>>                    Send AddComboItem "mapbox/dark-v10"                 "Dark view"
37250>>>                    Send AddComboItem "mapbox/satellite-v9"             "Satellite view"
37251>>>                    Send AddComboItem "mapbox/satellite-streets-v11"    "Satellite Streets view"
37252>>>                    Send AddComboItem "mapbox/navigation-day-v1"        "Navigation view (day)"
37253>>>                    Send AddComboItem "mapbox/navigation-night-v1"      "Navigation view (night)"
37254>>>                End_Procedure
37255>>>                
37255>>>                Set pbServerOnChange to True
37256>>>                Procedure OnChange String sNewValue String sOldValue
37259>>>                    WebSet psLayerID of oMap to sNewValue
37260>>>                    Send ChangeLayer of oMap    sNewValue
37261>>>                End_Procedure
37262>>>                
37262>>>            End_Object
37263>>>        
37263>>>            Object oMap is a cLeafletMappingControl
37265>>>                Set piColumnSpan to 0
37266>>>                Set piColumnIndex to 0
37267>>>                Set psLabel to "Map:"
37268>>>                Set pbFillHeight to True
37269>>>                Set peLabelPosition to lpTop
37270>>>                Set pbShowLabel to True
37271>>>                
37271>>>                Property Integer piMark# 0
37275>>>                
37275>>>                // Just augmented to reset piMark# to zero on each map draw
37275>>>                Procedure DrawMap Number nNorth Number nEast Integer iInitZoom Integer iMaxZoom
37278>>>                    WebSet piMark# to 0
37279>>>                    
37279>>>                    Forward Send DrawMap nNorth nEast iInitZoom iMaxZoom
37281>>>                End_Procedure
37282>>>                
37282>>>                Procedure MyLocation Number nLat Number nLng
37285>>>                    Integer iInitZoom
37285>>>                    Boolean bMark bCustom
37285>>>                    
37285>>>                    WebGet psValue of oInitialZoom  to iInitZoom
37288>>>                    WebGet psValue of oShowMarker   to bMark
37291>>>                    WebGet psValue of oCustomMarker to bCustom
37294>>>                    Send DrawMap nLat nLng iInitZoom 22
37295>>>                    If bMark ;                        Send DrawMarker nLat nLng "" (If(bCustom, "Images/Scanduc-pointer-icon.png", "")) False
37298>>>                    WebSet psValue of oResult to ("Lat:" * String(nLat) + "," * "Lng:" * String(nLng))
37299>>>                End_Procedure
37300>>>                
37300>>>                Set pbServerOnMapClick to True
37301>>>                Procedure OnMapClick String sLat String sLng
37304>>>                    Integer i
37304>>>                    
37304>>>                    WebGet piMark# to i
37307>>>                    Increment i
37308>>>                    WebSet piMark# to i
37309>>>                    
37309>>>                    Send DrawMarker sLat sLng ("Marker" * "#" + String(i) * ;                                               "at" * sLat + "/" + sLng) "" False
37310>>>                End_Procedure
37311>>>                
37311>>>            End_Object
37312>>>
37312>>>        End_Object
37313>>>
37313>>>    End_Object
37314>>>        
37314>>>End_Object
37315>    Use PathTrace.wo
Including file: PathTrace.wo    (C:\Projects\LeafletTest\AppSrc\PathTrace.wo)
37315>>>Use cWebView.pkg
37315>>>Use cWebPanel.pkg
37315>>>Use cWebForm.pkg 
37315>>>Use cLeafletMappingControl.pkg
37315>>>Use Flexml.pkg
37315>>>Use seq_chnl.pkg
37315>>>Use cWebCombo.pkg
37315>>>Use cWebButton.pkg
37315>>>Use cWebCheckBox.pkg
37315>>>Use cWebSpacer.pkg
37315>>>Use cWebEdit.pkg
37315>>>
37315>>>Object oPathTrace is a cWebView
37317>>>    Set psCaption to "Path Trace Example"
37318>>>    
37318>>>    Object oWebMainPanel is a cWebPanel
37320>>>        Set piColumnCount to 12
37321>>>
37321>>>        Object oTraces is a cWebCombo
37323>>>            Set piColumnSpan to 5
37324>>>            Set psLabel to "Select a trace:"
37325>>>            Set peLabelAlign to alignRight
37326>>>            
37326>>>            
37326>>>// JUST PUTTING THIS WHERE IT WON'T CONFUSE ME!            
37326>>>//                    Get FindNode of hoDoc "METADATA" to hoElem1
37326>>>//                    Get FindNode of hoXML "METADATA" to hoElem2
37326>>>//                    
37326>>>//                    Get FindNode of hoDoc "gpx" to hoElem1
37326>>>//                    Get FindNode of hoXML "gpx" to hoElem2
37326>>>//                    
37326>>>//                    Get FindNode of hoDoc "/gpx" to hoElem1
37326>>>//                    Get FindNode of hoXML "/gpx" to hoElem2
37326>>>//                    
37326>>>//                    Get FindNode of hoXml "//metadata" to hoElem1
37326>>>//                    Get FindNode of hoDoc "//metadata" to hoElem2
37326>>>//                    
37326>>>//                    Get FindNode of hoXml "/metadata" to hoElem3
37326>>>//                    Get FindNode of hoDoc "/metadata" to hoElem4
37326>>>//                    
37326>>>//                    Get FindNode of hoXml "metadata" to hoElem1
37326>>>//                    Get FindNode of hoDoc "metadata" to hoElem2
37326>>>//                    
37326>>>//                    
37326>>>//                    Get FindNode of hoDoc "trk/name" to hoElem1
37326>>>//                    Get FindNode of hoDoc "/trk/name" to hoElem2
37326>>>//                    Get FindNode of hoXml "trk/name" to hoElem3
37326>>>//                    Get FindNode of hoXml "/trk/name" to hoElem4
37326>>>//                    
37326>>>//                    Get FindNode of hoXml "descendant::author" to hoElem1
37326>>>//                    Get FindNode of hoDoc "descendant::author" to hoElem2
37326>>>//                    
37326>>>//                    Get FindNodeList of hoXml "/gpx" to hoElems
37326>>>//                    
37326>>>//                    If hoElems Begin
37326>>>//                        Integer j iMax2
37326>>>//                        
37326>>>//                        Get NodeListLength of hoElems to iMax2
37326>>>//                        
37326>>>//                        For j from 0 to iMax2
37326>>>//                            Get CollectionNode of hoElems j to hoElem1
37326>>>//                        Loop
37326>>>//                    End
37326>>>//                    
37326>>>//                    If hoElem1 Begin
37326>>>//                        
37326>>>//                        
37326>>>//                        
37326>>>//                        Send AddComboItem asPaths[i] (psText(hoElem1))
37326>>>//                        Send Destroy of hoElem1
37326>>>//                    End
37326>>>//                    
37326>>>//                    Send Destroy of hoDoc
37326>>>//                    Send Destroy of hoXML
37326>>>//                Loop
37326>>>//                    
37326>>>            
37326>>>            Procedure ProcessFile Handle hoXml String sFile
37329>>>                Integer  iOK i iMax
37329>>>                String   sHome sAuthor sTrackName
37329>>>                Handle   hoDoc hoElem1 hoElem2 hoElem3 hoElem4
37329>>>                
37329>>>                Get DocumentElement of hoXml to hoDoc
37330>>>                If not hoDoc ;                    Procedure_Return
37333>>>                
37333>>>                Move "" to sAuthor
37334>>>                
37334>>>                Get FirstChild of hoDoc to hoElem1
37335>>>                
37335>>>                // ToDo: Need to destroy any hoXML elements when breaking out!!!
37335>>>                While hoElem1
37339>>>                    
37339>>>                    If (sAuthor = "") Begin
37341>>>                    
37341>>>                        If (psNodeName(hoElem1) = "metadata") Begin
37343>>>                            Get FirstChild of hoElem1 to hoElem2
37344>>>                            
37344>>>                            While hoElem2
37348>>>                                    
37348>>>                                If (psNodeName(hoElem2) = "author") Begin
37350>>>                                    Get FirstChild of hoElem2 to hoElem3
37351>>>                                    
37351>>>                                    While hoElem3
37355>>>                                        
37355>>>                                        If (psNodeName(hoElem3) = "name") ;                                            Move (psText(hoElem3)) to sAuthor
37358>>>                                        
37358>>>                                        If (sAuthor <> "") ;                                            Send Destroy of hoElem3
37361>>>                                        If (sAuthor <> "") ;                                            Break
37364>>>                                            
37364>>>                                        If (psNodeName(hoElem3) = "link") Begin
37366>>>                                            Get FirstChild of hoElem3 to hoElem4
37367>>>                                            
37367>>>                                            While hoElem4
37371>>>                                                If (psNodeName(hoElem4) = "text") ;                                                    Move (psText(hoElem4)) to sAuthor
37374>>>                                                
37374>>>                                                If (sAuthor <> "") ;                                                    Send Destroy of hoElem4
37377>>>                                                If (sAuthor <> "") ;                                                    Break
37380>>>                                                    
37380>>>                                                Get NextNode of hoElem4 to hoElem4
37381>>>                                            Loop
37382>>>>
37382>>>                                            
37382>>>                                        End
37382>>>>
37382>>>                                        
37382>>>                                        If (sAuthor <> "") ;                                            Send Destroy of hoElem3
37385>>>                                        If (sAuthor <> "") ;                                            Break
37388>>>                                        
37388>>>                                        Get NextNode of hoElem3 to hoElem3
37389>>>                                    Loop
37390>>>>
37390>>>                                    
37390>>>                                End
37390>>>>
37390>>>                                
37390>>>                                If (sAuthor <> "") ;                                    Send Destroy of hoElem2
37393>>>                                If (sAuthor <> "") ;                                    Break 
37396>>>                                
37396>>>                                Get NextNode of hoElem2 to hoElem2
37397>>>                            Loop
37398>>>>
37398>>>                            
37398>>>                        End
37398>>>>
37398>>>                    
37398>>>                        If (psNodeName(hoElem1) = "wpt") Begin
37400>>>                            Get FirstChild of hoElem1 to hoElem2
37401>>>                            
37401>>>                            While hoElem2
37405>>>                                
37405>>>                                If (psNodeName(hoElem2) = "sym") Begin
37407>>>                                    Move (psText(hoElem2)) to sAuthor
37408>>>                                End
37408>>>>
37408>>>                                
37408>>>                                If (sAuthor <> "") ;                                    Send Destroy of hoElem2
37411>>>                                If (sAuthor <> "") ;                                    Break 
37414>>>                                
37414>>>                                Get NextNode of hoElem2 to hoElem2
37415>>>                            Loop
37416>>>>
37416>>>                            
37416>>>                        End
37416>>>>
37416>>>                        
37416>>>                    End
37416>>>>
37416>>>                    
37416>>>                    // Fallback option
37416>>>                    If (sAuthor = "") ;                        Get AttributeValue of hoDoc "creator" to sAuthor
37419>>>
37419>>>                    If (psNodeName(hoElem1) = "trk") Begin
37421>>>                        Get FirstChild of hoElem1 to hoElem2
37422>>>                        
37422>>>                        While hoElem2
37426>>>                            
37426>>>                            // Add the track If it has a name:
37426>>>                            If (psNodeName(hoElem2) = "name") Begin
37428>>>                                Send AddComboItem ;                                    sFile ;                                    (psText(hoElem2) * If((sAuthor = ""), "", "(" + sAuthor + ")") * - "-" * sFile)
37429>>>                                Send Destroy of hoElem2
37430>>>                                Send Destroy of hoElem1
37431>>>                                Send Destroy of hoDoc
37432>>>                                Procedure_Return
37433>>>                            End
37433>>>>
37433>>>                            
37433>>>                            Get NextNode of hoElem2 to hoElem2
37434>>>                        Loop
37435>>>>
37435>>>                        
37435>>>                        // Add the track If it has no name:
37435>>>                        Send AddComboItem ;                            sFile ;                            (sFile * If((sAuthor = ""), "", "(" + sAuthor + ")") * - "-" * sFile)
37436>>>                        Send Destroy of hoElem1
37437>>>                        Send Destroy of hoDoc
37438>>>                        Procedure_Return
37439>>>                    End                        
37439>>>>
37439>>>                    
37439>>>                    Get NextNode of hoElem1 to hoElem1
37440>>>                Loop
37441>>>>
37441>>>                
37441>>>                Send Destroy of hoDoc
37442>>>            End_Procedure
37443>>>            
37443>>>            Procedure OnFill
37446>>>                Integer  iChn i iMax iOK
37446>>>                String   sHome                
37446>>>                String[] asPaths
37447>>>                Handle   hoXml
37447>>>                
37447>>>                // Find all .gpx files in Paths dir:
37447>>>                Get Seq_New_Channel to iChn
37448>>>                Move (psHome(phoWorkspace(ghoApplication))) to sHome
37449>>>                
37449>>>                Direct_Input channel iChn ("dir:" * sHome + "Paths\*.gpx")
37451>>>                
37451>>>                While not (SeqEof)
37455>>>                    Readln asPaths[i]
37456>>>                    Increment i
37457>>>                Loop
37458>>>>
37458>>>                
37458>>>                Close_Input channel iChn
37460>>>                Send Seq_Release_Channel iChn
37461>>>                
37461>>>                // For each file, try to find the name of the path and the author
37461>>>                Move (SizeOfArray(asPaths) - 1) to iMax
37462>>>                
37462>>>                For i from 0 to iMax
37468>>>>
37468>>>                    Get Create (RefClass(cXMLDOMDocument)) to hoXml
37469>>>                    Set psDocumentName of hoXml to (sHome + "Paths\" + asPaths[i])
37470>>>                    Get LoadXMLDocument of hoXml to iOK
37471>>>                    If iOK ;                        Send ProcessFile hoXml asPaths[i]
37474>>>                    Send Destroy of hoXml
37475>>>                Loop
37476>>>>
37476>>>                
37476>>>            End_Procedure
37477>>>
37477>>>        End_Object
37478>>>
37478>>>        Object oLoadTrace is a cWebButton
37480>>>            Set piColumnSpan to 1
37481>>>            Set piColumnIndex to 5
37482>>>            Set psCaption to "Map trace"
37483>>>        
37483>>>            Procedure OnClick
37486>>>                String  sFile sBase sContrib sText
37486>>>                Handle  hoXML hoDoc hoTrack hoSeg hoPoint
37486>>>                Boolean bOK bMark
37486>>>                Integer i iPos
37486>>>                stPolyline tLine
37486>>>                stPolyline tLine
37486>>>                stPolylines tEmpty
37486>>>                stPolylines tEmpty
37486>>>                
37486>>>                WebSet ptPolylines of oMap to tEmpty
37487>>>                
37487>>>                Move (psHome(phoWorkspace(ghoApplication)) + "Paths\") to sBase
37488>>>                
37488>>>                WebGet psValue of oTraces to sFile
37491>>>                
37491>>>                Move (sBase + sFile) to sFile
37492>>>                Move 0 to i
37493>>>                
37493>>>                Get Create (RefClass(cXMLDOMDocument)) to hoXML
37494>>>                Set psDocumentName of hoXML to sFile
37495>>>                Get LoadXMLDocument of hoXML to bOK
37496>>>                
37496>>>                If not bOK Begin
37498>>>                    Send ShowInfoBox "Could not load path XML" "Load error"
37499>>>                    Procedure_Return
37500>>>                End
37500>>>>
37500>>>                
37500>>>                Get DocumentElement of hoXML to hoDoc
37501>>>                
37501>>>                If not hoDoc ;                    Procedure_Return
37504>>>                    
37504>>>                Get FirstChild of hoDoc to hoTrack
37505>>>                
37505>>>                If not hoTrack ;                    Procedure_Return
37508>>>                    
37508>>>                While hoTrack
37512>>>                    If (psNodeName(hoTrack) = "trk") ;                        Break
37515>>>                    Get NextSibling of hoTrack to hoTrack
37516>>>                Loop
37517>>>>
37517>>>                
37517>>>                Get FirstChild of hoTrack to hoSeg
37518>>>                
37518>>>                If not hoSeg ;                    Procedure_Return
37521>>>                    
37521>>>                While hoSeg
37525>>>                    
37525>>>                    If (psNodeName(hoSeg) = "name") ;                        Move (psText(hoSeg)) to sText
37528>>>                    
37528>>>                    If (psNodeName(hoSeg) = "trkseg") Begin
37530>>>                        Get FirstChild of hoSeg to hoPoint
37531>>>                        
37531>>>                        While hoPoint
37535>>>                            
37535>>>                            If (psNodeName(hoPoint) = "trkpt") Begin
37537>>>                                Get AttributeValue of hoPoint "lat" to tLine.aPoints[i][0]
37538>>>                                Get AttributeValue of hoPoint "lon" to tLine.aPoints[i][1]
37539>>>                                Increment i
37540>>>                            End
37540>>>>
37540>>>                            
37540>>>                            Get NextSibling of hoPoint to hoPoint
37541>>>                        Loop
37542>>>>
37542>>>
37542>>>                    End
37542>>>>
37542>>>
37542>>>                    Get NextSibling of hoSeg to hoSeg
37543>>>                Loop
37544>>>>
37544>>>                
37544>>>                Send Destroy of hoTrack
37545>>>                Send Destroy of hoDoc
37546>>>                Send Destroy of hoXml
37547>>>                
37547>>>                If (sText = "") ;                    Move sFile to sText
37550>>>                
37550>>>                Move (Config("defaults.polyline.lineColor"))    to tLine.sLineColor
37551>>>                Move (Config("defaults.polyline.lineWeight"))   to tLine.iLineWeight
37552>>>                Move (Config("defaults.polyline.lineOpacity"))  to tLine.nOpacity
37553>>>                Move True                                       to tLine.bFitMap
37554>>>                Move sText                                      to tLine.sText
37555>>>                Move True                                       to tLine.bStroke
37556>>>
37556>>>                Send GeoContributor of oMap sContrib "" (If((sContrib <> ""), "Path", "")) False
37557>>>                Send DrawMap of oMap tLine.aPoints[0][0] tLine.aPoints[0][1] 12 22
37558>>>                
37558>>>                If (GetChecked(oMarkStart(Self))) ;                    Send DrawMarker of oMap tLine.aPoints[0][0] tLine.aPoints[0][1] (Trim(sText * "Start")) "" False
37561>>>    
37561>>>                Send DrawPolyLine of oMap tLine
37562>>>            End_Procedure
37563>>>            
37563>>>        End_Object
37564>>>
37564>>>        Object oMarkStart is a cWebCheckbox
37566>>>            Set piColumnSpan to 2
37567>>>            Set piColumnIndex to 6
37568>>>            Set psCaption to "Show marker at start"
37569>>>        End_Object
37570>>>
37570>>>        Object oResolution is a cWebCombo
37572>>>            Set piColumnIndex to 8
37573>>>            Set piColumnSpan to 2
37574>>>            Set psLabel to "Res:"
37575>>>            Set peLabelAlign to alignRight
37576>>>            Set piLabelOffset to 60
37577>>>            Set psValue to "256"
37578>>>            
37578>>>            Procedure OnFill
37581>>>                Send AddComboItem "256"  "256"
37582>>>                Send AddComboItem "512"  "512"
37583>>>                Send AddComboItem "1024" "1024"
37584>>>            End_Procedure
37585>>>            
37585>>>            Set pbServerOnChange to True
37586>>>            Procedure OnChange String sNewValue String sOldValue
37589>>>                WebSet psTileSize     of oMap to sNewValue
37590>>>                Send ChangeResolution of oMap    sNewValue
37591>>>            End_Procedure
37592>>>
37592>>>        End_Object
37593>>>    
37593>>>        Object oMapLayer is a cWebCombo
37595>>>            Set piColumnIndex to 10
37596>>>            Set piColumnSpan to 2
37597>>>            Set psLabel to "View:"
37598>>>            Set peLabelAlign to alignRight
37599>>>            Set piLabelOffset to 60
37600>>>            Set psValue to "Map view"
37601>>>            
37601>>>            Procedure OnFill
37604>>>                    Send AddComboItem "mapbox/streets-v11"              "Streets view"
37605>>>                    Send AddComboItem "mapbox/outdoors-v11"             "Outdoors view"
37606>>>                    Send AddComboItem "mapbox/light-v10"                "Light view"
37607>>>                    Send AddComboItem "mapbox/dark-v10"                 "Dark view"
37608>>>                    Send AddComboItem "mapbox/satellite-v9"             "Satellite view"
37609>>>                    Send AddComboItem "mapbox/satellite-streets-v11"    "Satellite Streets view"
37610>>>                    Send AddComboItem "mapbox/navigation-day-v1"        "Navigation view (day)"
37611>>>                    Send AddComboItem "mapbox/navigation-night-v1"      "Navigation view (night)"
37612>>>            End_Procedure
37613>>>            
37613>>>            Set pbServerOnChange to True
37614>>>            Procedure OnChange String sNewValue String sOldValue
37617>>>                WebSet psLayerID of oMap to sNewValue
37618>>>                Send ChangeLayer of oMap    sNewValue
37619>>>            End_Procedure
37620>>>            
37620>>>        End_Object
37621>>>
37621>>>        Object oWebSpacer1 is a cWebSpacer
37623>>>        End_Object
37624>>>        
37624>>>        Object oMap is a cLeafletMappingControl
37626>>>        End_Object
37627>>>
37627>>>    End_Object 
37628>>>
37628>>>End_Object
37629>    Use Countries.wo
Including file: Countries.wo    (C:\Projects\LeafletTest\AppSrc\Countries.wo)
37629>>>Use cWebView.pkg
37629>>>Use cWebPanel.pkg
37629>>>Use cWebForm.pkg
37629>>>Use seq_chnl.pkg
37629>>>Use cJsonPath.pkg
37629>>>
37629>>>Use cLeafletMappingControl.pkg
37629>>>Use cWebCombo.pkg
37629>>>Use cWebButton.pkg
37629>>>Use cWebSpacer.pkg
37629>>>
37629>>>Object oCountries is a cWebView
37631>>>    Set psCaption to "Countries Sample"
37632>>>    
37632>>>    Property Handle     phoCountriesData
37634>>>    Property String[]   pasCountryNames
37636>>>    Property Integer[]  paiCountryIndexes
37638>>>    
37638>>>    Object oJPath is a cJsonPath
37640>>>    End_Object
37641>>>
37641>>>    Procedure LoadData
37644>>>        UChar[]  ucaData
37645>>>        Integer  iChn iMax i
37645>>>        String   sHome sName sISO_A3
37645>>>        String[] asNames
37646>>>        Handle   hoJson hoFeatures hoFeature
37646>>>        Boolean  bOK
37646>>>        
37646>>>        Move (psHome(phoWorkspace(ghoApplication))) to sHome
37647>>>        Get Seq_New_Channel to iChn
37648>>>        Direct_Input channel iChn (sHome + "countries.geojson")
37650>>>        
37650>>>        If (SeqEof) Begin
37652>>>            Close_Input channel iChn
37654>>>            Send Seq_Release_Channel iChn
37655>>>            Procedure_Return
37656>>>        End
37656>>>>
37656>>>
37656>>>        // Read in file
37656>>>        Read_Block channel iChn ucaData -1
37658>>>        Close_Input channel iChn
37660>>>        Send Seq_Release_Channel iChn
37661>>>        
37661>>>        Get Create (RefClass(cJsonObject)) to hoJson
37662>>>        Get ParseUtf8 of hoJson ucaData to bOK
37663>>>
37663>>>        If bOK ;            Set phoCountriesData to hoJson
37666>>>        Else Begin
37667>>>            Send Destroy of hoJson
37668>>>            Procedure_Return
37669>>>        End
37669>>>>
37669>>>
37669>>>        Move (JsonAtPath(oJPath, hoJson, "features")) to hoFeatures
37670>>>        Move (MemberCount(hoFeatures)) to iMax
37671>>>        Decrement iMax
37672>>>        
37672>>>        For i from 0 to iMax
37678>>>>
37678>>>            Get MemberByIndex of hoFeatures i to hoFeature
37679>>>            Move (ValueAtPath(oJPath, hoFeature, "properties.ADMIN"))   to sName
37680>>>            Move (ValueAtPath(oJPath, hoFeature, "properties.ISO_A3"))  to sISO_A3
37681>>>            Move (sName * "(" + sISO_A3 + ")") to asNames[i]
37682>>>            Send Destroy of hoFeature
37683>>>        Loop
37684>>>>
37684>>>        
37684>>>        Set pasCountryNames to asNames
37685>>>        Send Destroy of hoFeatures
37686>>>    End_Procedure
37687>>>    
37687>>>    Procedure End_Construct_Object
37690>>>        Send LoadData
37691>>>        
37691>>>        Forward Send End_Construct_Object
37693>>>    End_Procedure
37694>>>    
37694>>>    Function PolygonFromData Handle hoJson Returns stPolygon
37697>>>        stPolygon tPoly
37697>>>        stPolygon tPoly
37697>>>        Integer   i iMax
37697>>>        
37697>>>        Get JsonToDataType of hoJson to tPoly.aPoints
37698>>>        Move (SizeOfArray(tPoly.aPoints) - 1) to iMax
37699>>>        
37699>>>        // Lat/Lng are reveresed in this data, so...
37699>>>        For i from 0 to iMax
37705>>>>
37705>>>            Move (ReverseArray(tPoly.aPoints[i])) to tPoly.aPoints[i]
37706>>>        Loop
37707>>>>
37707>>>
37707>>>        Move (Config("defaults.polygon.lineColor"))     to tPoly.sLineColor
37708>>>        Move (Config("defaults.polygon.lineWeight"))    to tPoly.iLineWeight
37709>>>        Move (Config("defaults.polygon.lineOpacity"))   to tPoly.nLineOpacity
37710>>>        Move (Config("defaults.polygon.fillColor"))     to tPoly.sFillColor
37711>>>        Move (Config("defaults.polygon.fillOpacity"))   to tPoly.nFillOpacity
37712>>>        Move True                                       to tPoly.bStroke                    
37713>>>        
37713>>>        Send Destroy of hoJson
37714>>>        Function_Return tPoly
37715>>>    End_Function
37716>>>    
37716>>>    Procedure PlotMap
37719>>>        Integer     iIdx iMaxSet iPoly iSubSets i j iMaxPoint
37719>>>        Handle      hoData hoCoords hoSet hoPoint hoSubPt hoSubSet
37719>>>        stPolygon[] atPolys
37719>>>        stPolygon[] atPolys
37720>>>        stPolygon   tPoly
37720>>>        stPolygon   tPoly
37720>>>        stPolygons  tEmptyPolys
37720>>>        stPolygons  tEmptyPolys
37720>>>        Boolean     bFitBounds
37720>>>        Number      nMinN nMinE nMaxN nMaxE
37720>>>        
37720>>>        Move  100 to nMinN
37721>>>        Move  200 to nMinE
37722>>>        Move -100 to nMaxN
37723>>>        Move -200 to nMaxE
37724>>>        
37724>>>        WebSet ptPolygons of oMap to tEmptyPolys  // Clear the polygons
37725>>>        
37725>>>        // Get the appropriate country data from the JSON:
37725>>>        WebGet psValue of oCountrySel to iIdx
37728>>>        Get phoCountriesData of oCountries to hoData
37729>>>        Move (JsonAtPath(oJPath, hoData, "features.[" + String(iIdx) + "].geometry.coordinates")) to hoCoords
37730>>>        
37730>>>        If not hoCoords ;            Procedure_Return
37733>>>        
37733>>>        Get MemberCount of hoCoords to iMaxSet
37734>>>        Decrement iMaxSet
37735>>>        Move 0 to iPoly
37736>>>        
37736>>>        // Iterate through sets of points
37736>>>        For i from 0 to iMaxSet
37742>>>>
37742>>>            Get MemberByIndex of hoCoords i to hoSet
37743>>>            
37743>>>            Get MemberCount of hoSet to iSubSets
37744>>>            
37744>>>            // If no contents, quit:
37744>>>            If not iSubSets ;                Procedure_Return
37747>>>            
37747>>>            // Now check to see if hoSet is actually a set of points
37747>>>            Get MemberByIndex of hoSet 0 to hoPoint
37748>>>            
37748>>>            // Ensure it is an array:
37748>>>            If (JsonType(hoPoint) <> jsonTypeArray) ;                Procedure_Return
37751>>>            
37751>>>            Get MemberByIndex of hoPoint 0 to hoSubPt
37752>>>            
37752>>>            If (JsonType(hoSubPt) = jsonTypeDouble) Begin  // hoSet *is* a set of points
37754>>>                Send Destroy of hoSubPt  // Lose this
37755>>>                Send Destroy of hoPoint  // and this
37756>>>                
37756>>>                Get PolygonFromData hoSet to tPoly
37757>>>                
37757>>>                If (iPoly = 0) ;                    Move True to tPoly.bFitMap
37760>>>                    
37760>>>                Move tPoly to atPolys[iPoly]
37761>>>                Increment iPoly
37762>>>            End
37762>>>>
37762>>>            Else Begin  // hoSet is *not* just a set of points
37763>>>                Send Destroy of hoSubPt  // Lose this
37764>>>                Send Destroy of hoPoint  // and this
37765>>>
37765>>>                Decrement iSubSets  // MemberCount of hoSets
37766>>>                Move True to bFitBounds
37767>>>                
37767>>>                For j from 0 to iSubSets
37773>>>>
37773>>>                    Get MemberByIndex of hoSet j to hoSubSet
37774>>>                    
37774>>>                    Get PolygonFromData hoSubSet to tPoly
37775>>>                    
37775>>>                    Move tPoly to atPolys[iPoly]
37776>>>                    Increment iPoly
37777>>>                Loop
37778>>>>
37778>>>                
37778>>>            End
37778>>>>
37778>>>            
37778>>>        Loop
37779>>>>
37779>>>        
37779>>>        Send GeoContributor of oMap "DataHub" "https://datahub.io/" "Countries GeoJson" False
37780>>>        Send DrawMap of oMap atPolys[0].aPoints[0][0] atPolys[0].aPoints[0][1] 8 22
37781>>>
37781>>>        Move (SizeOfArray(atPolys) - 1) to iMaxSet
37782>>>        
37782>>>        For iPoly from 0 to iMaxSet
37788>>>>
37788>>>            
37788>>>            If bFitBounds Begin
37790>>>                Move (SizeOfArray(atPolys[iPoly].aPoints) - 1) to iMaxPoint
37791>>>            
37791>>>                For i from 0 to iMaxPoint
37797>>>>
37797>>>                    Move (nMinN min atPolys[iPoly].aPoints[i][0]) to nMinN
37798>>>                    Move (nMinE min atPolys[iPoly].aPoints[i][1]) to nMinE
37799>>>                    Move (nMaxN max atPolys[iPoly].aPoints[i][0]) to nMaxN
37800>>>                    Move (nMaxE max atPolys[iPoly].aPoints[i][1]) to nMaxE
37801>>>                Loop
37802>>>>
37802>>>            
37802>>>            End
37802>>>>
37802>>>            
37802>>>            Send DrawPolygon of oMap atPolys[iPoly]
37803>>>        Loop
37804>>>>
37804>>>        
37804>>>        If bFitBounds ;            Send FitBounds of oMap nMinN nMinE nMaxN nMaxE
37807>>>    End_Procedure
37808>>>
37808>>>    Object oWebMainPanel is a cWebPanel
37810>>>        Set piColumnCount to 12
37811>>>
37811>>>        Object oCountrySel is a cWebCombo
37813>>>            Set piColumnSpan to 4
37814>>>            Set psLabel to "Select Country"
37815>>>            Set peLabelAlign to alignRight
37816>>>            
37816>>>            Procedure OnFill
37819>>>                String[] asNames
37820>>>                Integer  i iMax
37820>>>                
37820>>>                Get pasCountryNames of oCountries to asNames
37821>>>                Move (SizeOfArray(asNames) - 1) to iMax
37822>>>                
37822>>>                For i from 0 to iMax
37828>>>>
37828>>>                    Send AddComboItem i asNames[i]
37829>>>                Loop                
37830>>>>
37830>>>                
37830>>>            End_Procedure
37831>>>            
37831>>>            Set pbServerOnShow to True
37832>>>            Procedure OnShow
37835>>>                String[] asNames
37836>>>                
37836>>>                Get pasCountryNames to asNames
37837>>>                WebSet psValue to asNames[0]
37838>>>            End_Procedure
37839>>>            
37839>>>        End_Object
37840>>>
37840>>>        Object oDoMap is a cWebButton
37842>>>            Set piColumnSpan to 1
37843>>>            Set piColumnIndex to 4
37844>>>            Set psCaption to "Draw Map"
37845>>>        
37845>>>            Procedure OnClick
37848>>>                Send PlotMap
37849>>>            End_Procedure
37850>>>            
37850>>>        End_Object
37851>>>        
37851>>>        Object oResolution is a cWebCombo
37853>>>            Set piColumnIndex to 8
37854>>>            Set piColumnSpan to 2
37855>>>            Set psLabel to "Res:"
37856>>>            Set peLabelAlign to alignRight
37857>>>            Set piLabelOffset to 60
37858>>>            Set psValue to "256"
37859>>>            
37859>>>            Procedure OnFill
37862>>>                Send AddComboItem "256"  "256"
37863>>>                Send AddComboItem "512"  "512"
37864>>>                Send AddComboItem "1024" "1024"
37865>>>            End_Procedure
37866>>>            
37866>>>            Set pbServerOnChange to True
37867>>>            Procedure OnChange String sNewValue String sOldValue
37870>>>                WebSet psTileSize     of oMap to sNewValue
37871>>>                Send ChangeResolution of oMap    sNewValue
37872>>>            End_Procedure
37873>>>
37873>>>        End_Object
37874>>>    
37874>>>        Object oMapLayer is a cWebCombo
37876>>>            Set piColumnIndex to 10
37877>>>            Set piColumnSpan to 2
37878>>>            Set psLabel to "View:"
37879>>>            Set peLabelAlign to alignRight
37880>>>            Set piLabelOffset to 60
37881>>>            Set psValue to "Map view"
37882>>>            
37882>>>            Procedure OnFill
37885>>>                    Send AddComboItem "mapbox/streets-v11"              "Streets view"
37886>>>                    Send AddComboItem "mapbox/outdoors-v11"             "Outdoors view"
37887>>>                    Send AddComboItem "mapbox/light-v10"                "Light view"
37888>>>                    Send AddComboItem "mapbox/dark-v10"                 "Dark view"
37889>>>                    Send AddComboItem "mapbox/satellite-v9"             "Satellite view"
37890>>>                    Send AddComboItem "mapbox/satellite-streets-v11"    "Satellite Streets view"
37891>>>                    Send AddComboItem "mapbox/navigation-day-v1"        "Navigation view (day)"
37892>>>                    Send AddComboItem "mapbox/navigation-night-v1"      "Navigation view (night)"
37893>>>            End_Procedure
37894>>>            
37894>>>            Set pbServerOnChange to True
37895>>>            Procedure OnChange String sNewValue String sOldValue
37898>>>                WebSet psLayerID of oMap to sNewValue
37899>>>                Send ChangeLayer of oMap    sNewValue
37900>>>            End_Procedure
37901>>>            
37901>>>        End_Object
37902>>>
37902>>>        Object oWebSpacer1 is a cWebSpacer
37904>>>        End_Object
37905>>>        
37905>>>        Object oMap is a cLeafletMappingControl
37907>>>        End_Object
37908>>>        
37908>>>    End_Object
37909>>>    
37909>>>End_Object
37910>    
37910>End_Object
37911>
37911>Send StartWebApp of oWebApp
37912>
Summary
Memory Available: 18661474304
Total Warnings : 0
Total Errors   : 0
Total Symbols  : 24185
Total Resources: 0
Total Commands : 37911
Total Windows  : 0
Total Pages    : 0
Static Data    : 503809
Message area   : 263100
Total Blocks   : 17029
